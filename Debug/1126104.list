
1126104.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  08007fbc  08007fbc  00008fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dac  08008dac  0000a1b8  2**0
                  CONTENTS
  4 .ARM          00000008  08008dac  08008dac  00009dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008db4  08008db4  0000a1b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08008db4  08008db4  00009db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008dc0  08008dc0  00009dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008dc4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000078  08008e3c  0000a078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000118  08008edc  0000a118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001a58  200001b8  08008f7c  0000a1b8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20001c10  08008f7c  0000ac10  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000a1b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001fbaf  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004cc6  00000000  00000000  00029d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001858  00000000  00000000  0002ea60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012b7  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e48f  00000000  00000000  0003156f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020e5b  00000000  00000000  0005f9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001023a9  00000000  00000000  00080859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00182c02  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006c78  00000000  00000000  00182c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000054  00000000  00000000  001898c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b8 	.word	0x200001b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007fa4 	.word	0x08007fa4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001bc 	.word	0x200001bc
 800020c:	08007fa4 	.word	0x08007fa4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <MX_ETH_Init+0x84>)
 80005a6:	4a20      	ldr	r2, [pc, #128]	@ (8000628 <MX_ETH_Init+0x88>)
 80005a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005aa:	4b20      	ldr	r3, [pc, #128]	@ (800062c <MX_ETH_Init+0x8c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005b0:	4b1e      	ldr	r3, [pc, #120]	@ (800062c <MX_ETH_Init+0x8c>)
 80005b2:	2280      	movs	r2, #128	@ 0x80
 80005b4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005b6:	4b1d      	ldr	r3, [pc, #116]	@ (800062c <MX_ETH_Init+0x8c>)
 80005b8:	22e1      	movs	r2, #225	@ 0xe1
 80005ba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005bc:	4b1b      	ldr	r3, [pc, #108]	@ (800062c <MX_ETH_Init+0x8c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005c2:	4b1a      	ldr	r3, [pc, #104]	@ (800062c <MX_ETH_Init+0x8c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005c8:	4b18      	ldr	r3, [pc, #96]	@ (800062c <MX_ETH_Init+0x8c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005ce:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <MX_ETH_Init+0x84>)
 80005d0:	4a16      	ldr	r2, [pc, #88]	@ (800062c <MX_ETH_Init+0x8c>)
 80005d2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <MX_ETH_Init+0x84>)
 80005d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80005da:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <MX_ETH_Init+0x84>)
 80005de:	4a14      	ldr	r2, [pc, #80]	@ (8000630 <MX_ETH_Init+0x90>)
 80005e0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <MX_ETH_Init+0x84>)
 80005e4:	4a13      	ldr	r2, [pc, #76]	@ (8000634 <MX_ETH_Init+0x94>)
 80005e6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80005e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <MX_ETH_Init+0x84>)
 80005ea:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80005ee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80005f0:	480c      	ldr	r0, [pc, #48]	@ (8000624 <MX_ETH_Init+0x84>)
 80005f2:	f002 f801 	bl	80025f8 <HAL_ETH_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80005fc:	f000 fac4 	bl	8000b88 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000600:	2238      	movs	r2, #56	@ 0x38
 8000602:	2100      	movs	r1, #0
 8000604:	480c      	ldr	r0, [pc, #48]	@ (8000638 <MX_ETH_Init+0x98>)
 8000606:	f006 fe73 	bl	80072f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800060a:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <MX_ETH_Init+0x98>)
 800060c:	2221      	movs	r2, #33	@ 0x21
 800060e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <MX_ETH_Init+0x98>)
 8000612:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000616:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000618:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <MX_ETH_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000020c 	.word	0x2000020c
 8000628:	40028000 	.word	0x40028000
 800062c:	200002bc 	.word	0x200002bc
 8000630:	20000118 	.word	0x20000118
 8000634:	20000078 	.word	0x20000078
 8000638:	200001d4 	.word	0x200001d4

0800063c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08e      	sub	sp, #56	@ 0x38
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a4e      	ldr	r2, [pc, #312]	@ (8000794 <HAL_ETH_MspInit+0x158>)
 800065a:	4293      	cmp	r3, r2
 800065c:	f040 8096 	bne.w	800078c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000660:	4b4d      	ldr	r3, [pc, #308]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000664:	4a4c      	ldr	r2, [pc, #304]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 8000666:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800066a:	6313      	str	r3, [r2, #48]	@ 0x30
 800066c:	4b4a      	ldr	r3, [pc, #296]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000674:	623b      	str	r3, [r7, #32]
 8000676:	6a3b      	ldr	r3, [r7, #32]
 8000678:	4b47      	ldr	r3, [pc, #284]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067c:	4a46      	ldr	r2, [pc, #280]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 800067e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000682:	6313      	str	r3, [r2, #48]	@ 0x30
 8000684:	4b44      	ldr	r3, [pc, #272]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000688:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800068c:	61fb      	str	r3, [r7, #28]
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	4b41      	ldr	r3, [pc, #260]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000694:	4a40      	ldr	r2, [pc, #256]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 8000696:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800069a:	6313      	str	r3, [r2, #48]	@ 0x30
 800069c:	4b3e      	ldr	r3, [pc, #248]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a8:	4b3b      	ldr	r3, [pc, #236]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ac:	4a3a      	ldr	r2, [pc, #232]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b4:	4b38      	ldr	r3, [pc, #224]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c0:	4b35      	ldr	r3, [pc, #212]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c4:	4a34      	ldr	r2, [pc, #208]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80006cc:	4b32      	ldr	r3, [pc, #200]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006dc:	4a2e      	ldr	r2, [pc, #184]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e8:	f003 0302 	and.w	r3, r3, #2
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f0:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f4:	4a28      	ldr	r2, [pc, #160]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fc:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000708:	2332      	movs	r3, #50	@ 0x32
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000718:	230b      	movs	r3, #11
 800071a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000720:	4619      	mov	r1, r3
 8000722:	481e      	ldr	r0, [pc, #120]	@ (800079c <HAL_ETH_MspInit+0x160>)
 8000724:	f002 fa8e 	bl	8002c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000728:	2386      	movs	r3, #134	@ 0x86
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000738:	230b      	movs	r3, #11
 800073a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000740:	4619      	mov	r1, r3
 8000742:	4817      	ldr	r0, [pc, #92]	@ (80007a0 <HAL_ETH_MspInit+0x164>)
 8000744:	f002 fa7e 	bl	8002c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000748:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	2302      	movs	r3, #2
 8000750:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000756:	2303      	movs	r3, #3
 8000758:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800075a:	230b      	movs	r3, #11
 800075c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000762:	4619      	mov	r1, r3
 8000764:	480f      	ldr	r0, [pc, #60]	@ (80007a4 <HAL_ETH_MspInit+0x168>)
 8000766:	f002 fa6d 	bl	8002c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800076a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800077c:	230b      	movs	r3, #11
 800077e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000784:	4619      	mov	r1, r3
 8000786:	4808      	ldr	r0, [pc, #32]	@ (80007a8 <HAL_ETH_MspInit+0x16c>)
 8000788:	f002 fa5c 	bl	8002c44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800078c:	bf00      	nop
 800078e:	3738      	adds	r7, #56	@ 0x38
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40028000 	.word	0x40028000
 8000798:	40023800 	.word	0x40023800
 800079c:	40020800 	.word	0x40020800
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40021800 	.word	0x40021800

080007ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	@ 0x30
 80007b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b51      	ldr	r3, [pc, #324]	@ (8000908 <MX_GPIO_Init+0x15c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a50      	ldr	r2, [pc, #320]	@ (8000908 <MX_GPIO_Init+0x15c>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b4e      	ldr	r3, [pc, #312]	@ (8000908 <MX_GPIO_Init+0x15c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	4b4b      	ldr	r3, [pc, #300]	@ (8000908 <MX_GPIO_Init+0x15c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a4a      	ldr	r2, [pc, #296]	@ (8000908 <MX_GPIO_Init+0x15c>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b48      	ldr	r3, [pc, #288]	@ (8000908 <MX_GPIO_Init+0x15c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b45      	ldr	r3, [pc, #276]	@ (8000908 <MX_GPIO_Init+0x15c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a44      	ldr	r2, [pc, #272]	@ (8000908 <MX_GPIO_Init+0x15c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b42      	ldr	r3, [pc, #264]	@ (8000908 <MX_GPIO_Init+0x15c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b3f      	ldr	r3, [pc, #252]	@ (8000908 <MX_GPIO_Init+0x15c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a3e      	ldr	r2, [pc, #248]	@ (8000908 <MX_GPIO_Init+0x15c>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b3c      	ldr	r3, [pc, #240]	@ (8000908 <MX_GPIO_Init+0x15c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000822:	4b39      	ldr	r3, [pc, #228]	@ (8000908 <MX_GPIO_Init+0x15c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a38      	ldr	r2, [pc, #224]	@ (8000908 <MX_GPIO_Init+0x15c>)
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b36      	ldr	r3, [pc, #216]	@ (8000908 <MX_GPIO_Init+0x15c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0308 	and.w	r3, r3, #8
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083a:	4b33      	ldr	r3, [pc, #204]	@ (8000908 <MX_GPIO_Init+0x15c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a32      	ldr	r2, [pc, #200]	@ (8000908 <MX_GPIO_Init+0x15c>)
 8000840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b30      	ldr	r3, [pc, #192]	@ (8000908 <MX_GPIO_Init+0x15c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000858:	482c      	ldr	r0, [pc, #176]	@ (800090c <MX_GPIO_Init+0x160>)
 800085a:	f002 fbb7 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2140      	movs	r1, #64	@ 0x40
 8000862:	482b      	ldr	r0, [pc, #172]	@ (8000910 <MX_GPIO_Init+0x164>)
 8000864:	f002 fbb2 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000868:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4825      	ldr	r0, [pc, #148]	@ (8000914 <MX_GPIO_Init+0x168>)
 8000880:	f002 f9e0 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000884:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	481b      	ldr	r0, [pc, #108]	@ (800090c <MX_GPIO_Init+0x160>)
 800089e:	f002 f9d1 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRDA_Pin;
 80008a2:	2304      	movs	r3, #4
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008a6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(IRDA_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4816      	ldr	r0, [pc, #88]	@ (8000910 <MX_GPIO_Init+0x164>)
 80008b8:	f002 f9c4 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008bc:	2340      	movs	r3, #64	@ 0x40
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	480f      	ldr	r0, [pc, #60]	@ (8000910 <MX_GPIO_Init+0x164>)
 80008d4:	f002 f9b6 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d8:	2380      	movs	r3, #128	@ 0x80
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4809      	ldr	r0, [pc, #36]	@ (8000910 <MX_GPIO_Init+0x164>)
 80008ec:	f002 f9aa 	bl	8002c44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	2008      	movs	r0, #8
 80008f6:	f001 fe48 	bl	800258a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80008fa:	2008      	movs	r0, #8
 80008fc:	f001 fe61 	bl	80025c2 <HAL_NVIC_EnableIRQ>

}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	@ 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40020400 	.word	0x40020400
 8000910:	40021800 	.word	0x40021800
 8000914:	40020800 	.word	0x40020800

08000918 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800091c:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <MX_I2C1_Init+0x74>)
 800091e:	4a1c      	ldr	r2, [pc, #112]	@ (8000990 <MX_I2C1_Init+0x78>)
 8000920:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000922:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <MX_I2C1_Init+0x74>)
 8000924:	4a1b      	ldr	r2, [pc, #108]	@ (8000994 <MX_I2C1_Init+0x7c>)
 8000926:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000928:	4b18      	ldr	r3, [pc, #96]	@ (800098c <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092e:	4b17      	ldr	r3, [pc, #92]	@ (800098c <MX_I2C1_Init+0x74>)
 8000930:	2201      	movs	r2, #1
 8000932:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800093a:	4b14      	ldr	r3, [pc, #80]	@ (800098c <MX_I2C1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000946:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_I2C1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000952:	480e      	ldr	r0, [pc, #56]	@ (800098c <MX_I2C1_Init+0x74>)
 8000954:	f002 fb86 	bl	8003064 <HAL_I2C_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800095e:	f000 f913 	bl	8000b88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000962:	2100      	movs	r1, #0
 8000964:	4809      	ldr	r0, [pc, #36]	@ (800098c <MX_I2C1_Init+0x74>)
 8000966:	f002 ff67 	bl	8003838 <HAL_I2CEx_ConfigAnalogFilter>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000970:	f000 f90a 	bl	8000b88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000974:	2100      	movs	r1, #0
 8000976:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_I2C1_Init+0x74>)
 8000978:	f002 ffa9 	bl	80038ce <HAL_I2CEx_ConfigDigitalFilter>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000982:	f000 f901 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200002c4 	.word	0x200002c4
 8000990:	40005400 	.word	0x40005400
 8000994:	00808cd2 	.word	0x00808cd2

08000998 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b0aa      	sub	sp, #168	@ 0xa8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	2284      	movs	r2, #132	@ 0x84
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f006 fc99 	bl	80072f0 <memset>
  if(i2cHandle->Instance==I2C1)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a22      	ldr	r2, [pc, #136]	@ (8000a4c <HAL_I2C_MspInit+0xb4>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d13c      	bne.n	8000a42 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 fde8 	bl	80045ac <HAL_RCCEx_PeriphCLKConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009e2:	f000 f8d1 	bl	8000b88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a50 <HAL_I2C_MspInit+0xb8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a19      	ldr	r2, [pc, #100]	@ (8000a50 <HAL_I2C_MspInit+0xb8>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <HAL_I2C_MspInit+0xb8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80009fe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a06:	2312      	movs	r3, #18
 8000a08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a22:	4619      	mov	r1, r3
 8000a24:	480b      	ldr	r0, [pc, #44]	@ (8000a54 <HAL_I2C_MspInit+0xbc>)
 8000a26:	f002 f90d 	bl	8002c44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <HAL_I2C_MspInit+0xb8>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <HAL_I2C_MspInit+0xb8>)
 8000a30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_I2C_MspInit+0xb8>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a42:	bf00      	nop
 8000a44:	37a8      	adds	r7, #168	@ 0xa8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020400 	.word	0x40020400

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5e:	f001 fc37 	bl	80022d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a62:	f000 f829 	bl	8000ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a66:	f7ff fea1 	bl	80007ac <MX_GPIO_Init>
  MX_ETH_Init();
 8000a6a:	f7ff fd99 	bl	80005a0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a6e:	f000 fab9 	bl	8000fe4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a72:	f000 fb47 	bl	8001104 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000a76:	f000 fa01 	bl	8000e7c <MX_TIM6_Init>
  MX_I2C1_Init();
 8000a7a:	f7ff ff4d 	bl	8000918 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000a7e:	f000 f9a3 	bl	8000dc8 <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Call usermain function
  usermain();
 8000a82:	f001 fb39 	bl	80020f8 <usermain>

  GPIO_PinState ldState = GPIO_PIN_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	71fb      	strb	r3, [r7, #7]

  while (1)
  {
	 HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, ldState);
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a92:	4808      	ldr	r0, [pc, #32]	@ (8000ab4 <main+0x5c>)
 8000a94:	f002 fa9a 	bl	8002fcc <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_Delay(500L);
 8000a98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a9c:	f001 fc76 	bl	800238c <HAL_Delay>
	 ldState = !ldState;
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2301      	moveq	r3, #1
 8000aa8:	2300      	movne	r3, #0
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	71fb      	strb	r3, [r7, #7]
	 HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, ldState);
 8000aae:	bf00      	nop
 8000ab0:	e7eb      	b.n	8000a8a <main+0x32>
 8000ab2:	bf00      	nop
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b094      	sub	sp, #80	@ 0x50
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 0320 	add.w	r3, r7, #32
 8000ac2:	2230      	movs	r2, #48	@ 0x30
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f006 fc12 	bl	80072f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000adc:	f003 f88c 	bl	8003bf8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae0:	4b27      	ldr	r3, [pc, #156]	@ (8000b80 <SystemClock_Config+0xc8>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae4:	4a26      	ldr	r2, [pc, #152]	@ (8000b80 <SystemClock_Config+0xc8>)
 8000ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aec:	4b24      	ldr	r3, [pc, #144]	@ (8000b80 <SystemClock_Config+0xc8>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000af8:	4b22      	ldr	r3, [pc, #136]	@ (8000b84 <SystemClock_Config+0xcc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b00:	4a20      	ldr	r2, [pc, #128]	@ (8000b84 <SystemClock_Config+0xcc>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	4b1e      	ldr	r3, [pc, #120]	@ (8000b84 <SystemClock_Config+0xcc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b14:	2301      	movs	r3, #1
 8000b16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b18:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b2c:	2348      	movs	r3, #72	@ 0x48
 8000b2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b34:	2303      	movs	r3, #3
 8000b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 0320 	add.w	r3, r7, #32
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 f86b 	bl	8003c18 <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b48:	f000 f81e 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b50:	2302      	movs	r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	2102      	movs	r1, #2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f003 faf9 	bl	8004160 <HAL_RCC_ClockConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b74:	f000 f808 	bl	8000b88 <Error_Handler>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3750      	adds	r7, #80	@ 0x50
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40007000 	.word	0x40007000

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <Error_Handler+0x8>

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb6:	4a08      	ldr	r2, [pc, #32]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <NMI_Handler+0x4>

08000be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c32:	f001 fb8b 	bl	800234c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRDA_Pin);
 8000c3e:	2004      	movs	r0, #4
 8000c40:	f002 f9f8 	bl	8003034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c4c:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <TIM6_DAC_IRQHandler+0x10>)
 8000c4e:	f004 f9c4 	bl	8004fda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000368 	.word	0x20000368

08000c5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	e00a      	b.n	8000c84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c6e:	f3af 8000 	nop.w
 8000c72:	4601      	mov	r1, r0
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	60ba      	str	r2, [r7, #8]
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dbf0      	blt.n	8000c6e <_read+0x12>
  }

  return len;
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	60f8      	str	r0, [r7, #12]
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	e009      	b.n	8000cbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60ba      	str	r2, [r7, #8]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f001 fadd 	bl	8002270 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbf1      	blt.n	8000ca8 <_write+0x12>
  }
  return len;
 8000cc4:	687b      	ldr	r3, [r7, #4]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_close>:

int _close(int file)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cf6:	605a      	str	r2, [r3, #4]
  return 0;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <_isatty>:

int _isatty(int file)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f006 faca 	bl	8007300 <__errno>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20050000 	.word	0x20050000
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	20000318 	.word	0x20000318
 8000da0:	20001c10 	.word	0x20001c10

08000da4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dec:	4b21      	ldr	r3, [pc, #132]	@ (8000e74 <MX_TIM3_Init+0xac>)
 8000dee:	4a22      	ldr	r2, [pc, #136]	@ (8000e78 <MX_TIM3_Init+0xb0>)
 8000df0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000df2:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <MX_TIM3_Init+0xac>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e74 <MX_TIM3_Init+0xac>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <MX_TIM3_Init+0xac>)
 8000e00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <MX_TIM3_Init+0xac>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <MX_TIM3_Init+0xac>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e12:	4818      	ldr	r0, [pc, #96]	@ (8000e74 <MX_TIM3_Init+0xac>)
 8000e14:	f004 f88a 	bl	8004f2c <HAL_TIM_PWM_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e1e:	f7ff feb3 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4810      	ldr	r0, [pc, #64]	@ (8000e74 <MX_TIM3_Init+0xac>)
 8000e32:	f004 fe2b 	bl	8005a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e3c:	f7ff fea4 	bl	8000b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e40:	2360      	movs	r3, #96	@ 0x60
 8000e42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	2208      	movs	r2, #8
 8000e54:	4619      	mov	r1, r3
 8000e56:	4807      	ldr	r0, [pc, #28]	@ (8000e74 <MX_TIM3_Init+0xac>)
 8000e58:	f004 f9de 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000e62:	f7ff fe91 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e66:	4803      	ldr	r0, [pc, #12]	@ (8000e74 <MX_TIM3_Init+0xac>)
 8000e68:	f000 f884 	bl	8000f74 <HAL_TIM_MspPostInit>

}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	@ 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	2000031c 	.word	0x2000031c
 8000e78:	40000400 	.word	0x40000400

08000e7c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_TIM6_Init+0x64>)
 8000e8e:	4a15      	ldr	r2, [pc, #84]	@ (8000ee4 <MX_TIM6_Init+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8000e92:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <MX_TIM6_Init+0x64>)
 8000e94:	2247      	movs	r2, #71	@ 0x47
 8000e96:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_TIM6_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <MX_TIM6_Init+0x64>)
 8000ea0:	2209      	movs	r2, #9
 8000ea2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <MX_TIM6_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000eaa:	480d      	ldr	r0, [pc, #52]	@ (8000ee0 <MX_TIM6_Init+0x64>)
 8000eac:	f003 ff6e 	bl	8004d8c <HAL_TIM_Base_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000eb6:	f7ff fe67 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	@ (8000ee0 <MX_TIM6_Init+0x64>)
 8000ec8:	f004 fde0 	bl	8005a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000ed2:	f7ff fe59 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000368 	.word	0x20000368
 8000ee4:	40001000 	.word	0x40001000

08000ee8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <HAL_TIM_PWM_MspInit+0x38>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d10b      	bne.n	8000f12 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <HAL_TIM_PWM_MspInit+0x3c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	4a09      	ldr	r2, [pc, #36]	@ (8000f24 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f06:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40000400 	.word	0x40000400
 8000f24:	40023800 	.word	0x40023800

08000f28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <HAL_TIM_Base_MspInit+0x44>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d113      	bne.n	8000f62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <HAL_TIM_Base_MspInit+0x48>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f70 <HAL_TIM_Base_MspInit+0x48>)
 8000f40:	f043 0310 	orr.w	r3, r3, #16
 8000f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <HAL_TIM_Base_MspInit+0x48>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	f003 0310 	and.w	r3, r3, #16
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	2036      	movs	r0, #54	@ 0x36
 8000f58:	f001 fb17 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f5c:	2036      	movs	r0, #54	@ 0x36
 8000f5e:	f001 fb30 	bl	80025c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40001000 	.word	0x40001000
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a11      	ldr	r2, [pc, #68]	@ (8000fd8 <HAL_TIM_MspPostInit+0x64>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d11c      	bne.n	8000fd0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <HAL_TIM_MspPostInit+0x68>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a10      	ldr	r2, [pc, #64]	@ (8000fdc <HAL_TIM_MspPostInit+0x68>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <HAL_TIM_MspPostInit+0x68>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <HAL_TIM_MspPostInit+0x6c>)
 8000fcc:	f001 fe3a 	bl	8002c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fd0:	bf00      	nop
 8000fd2:	3720      	adds	r7, #32
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40000400 	.word	0x40000400
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020800 	.word	0x40020800

08000fe4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	@ (800103c <MX_USART3_UART_Init+0x58>)
 8000fea:	4a15      	ldr	r2, [pc, #84]	@ (8001040 <MX_USART3_UART_Init+0x5c>)
 8000fec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fee:	4b13      	ldr	r3, [pc, #76]	@ (800103c <MX_USART3_UART_Init+0x58>)
 8000ff0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ff4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <MX_USART3_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <MX_USART3_UART_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <MX_USART3_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001008:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <MX_USART3_UART_Init+0x58>)
 800100a:	220c      	movs	r2, #12
 800100c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <MX_USART3_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001014:	4b09      	ldr	r3, [pc, #36]	@ (800103c <MX_USART3_UART_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101a:	4b08      	ldr	r3, [pc, #32]	@ (800103c <MX_USART3_UART_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <MX_USART3_UART_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	@ (800103c <MX_USART3_UART_Init+0x58>)
 8001028:	f004 fddc 	bl	8005be4 <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001032:	f7ff fda9 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200003b4 	.word	0x200003b4
 8001040:	40004800 	.word	0x40004800

08001044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b0aa      	sub	sp, #168	@ 0xa8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2284      	movs	r2, #132	@ 0x84
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f006 f943 	bl	80072f0 <memset>
  if(uartHandle->Instance==USART3)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a22      	ldr	r2, [pc, #136]	@ (80010f8 <HAL_UART_MspInit+0xb4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d13c      	bne.n	80010ee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001074:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001078:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800107a:	2300      	movs	r3, #0
 800107c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	4618      	mov	r0, r3
 8001084:	f003 fa92 	bl	80045ac <HAL_RCCEx_PeriphCLKConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800108e:	f7ff fd7b 	bl	8000b88 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <HAL_UART_MspInit+0xb8>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	4a19      	ldr	r2, [pc, #100]	@ (80010fc <HAL_UART_MspInit+0xb8>)
 8001098:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800109c:	6413      	str	r3, [r2, #64]	@ 0x40
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_UART_MspInit+0xb8>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <HAL_UART_MspInit+0xb8>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a13      	ldr	r2, [pc, #76]	@ (80010fc <HAL_UART_MspInit+0xb8>)
 80010b0:	f043 0308 	orr.w	r3, r3, #8
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <HAL_UART_MspInit+0xb8>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010dc:	2307      	movs	r3, #7
 80010de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	@ (8001100 <HAL_UART_MspInit+0xbc>)
 80010ea:	f001 fdab 	bl	8002c44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010ee:	bf00      	nop
 80010f0:	37a8      	adds	r7, #168	@ 0xa8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40004800 	.word	0x40004800
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020c00 	.word	0x40020c00

08001104 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001108:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800110a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800110e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001112:	2206      	movs	r2, #6
 8001114:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001118:	2202      	movs	r2, #2
 800111a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001124:	2202      	movs	r2, #2
 8001126:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800112a:	2201      	movs	r2, #1
 800112c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800112e:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800113a:	4b08      	ldr	r3, [pc, #32]	@ (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800113c:	2201      	movs	r2, #1
 800113e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001146:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001148:	f002 fc0d 	bl	8003966 <HAL_PCD_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001152:	f7ff fd19 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000043c 	.word	0x2000043c

08001160 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0ac      	sub	sp, #176	@ 0xb0
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	2284      	movs	r2, #132	@ 0x84
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f006 f8b5 	bl	80072f0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800118e:	d159      	bne.n	8001244 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001190:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001194:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119c:	f107 0318 	add.w	r3, r7, #24
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 fa03 	bl	80045ac <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80011ac:	f7ff fcec 	bl	8000b88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b26      	ldr	r3, [pc, #152]	@ (800124c <HAL_PCD_MspInit+0xec>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b4:	4a25      	ldr	r2, [pc, #148]	@ (800124c <HAL_PCD_MspInit+0xec>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80011bc:	4b23      	ldr	r3, [pc, #140]	@ (800124c <HAL_PCD_MspInit+0xec>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011c8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80011cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011e2:	230a      	movs	r3, #10
 80011e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011ec:	4619      	mov	r1, r3
 80011ee:	4818      	ldr	r0, [pc, #96]	@ (8001250 <HAL_PCD_MspInit+0xf0>)
 80011f0:	f001 fd28 	bl	8002c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800120c:	4619      	mov	r1, r3
 800120e:	4810      	ldr	r0, [pc, #64]	@ (8001250 <HAL_PCD_MspInit+0xf0>)
 8001210:	f001 fd18 	bl	8002c44 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001214:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <HAL_PCD_MspInit+0xec>)
 8001216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001218:	4a0c      	ldr	r2, [pc, #48]	@ (800124c <HAL_PCD_MspInit+0xec>)
 800121a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800121e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001220:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <HAL_PCD_MspInit+0xec>)
 8001222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001224:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4b07      	ldr	r3, [pc, #28]	@ (800124c <HAL_PCD_MspInit+0xec>)
 800122e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001230:	4a06      	ldr	r2, [pc, #24]	@ (800124c <HAL_PCD_MspInit+0xec>)
 8001232:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001236:	6453      	str	r3, [r2, #68]	@ 0x44
 8001238:	4b04      	ldr	r3, [pc, #16]	@ (800124c <HAL_PCD_MspInit+0xec>)
 800123a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001244:	bf00      	nop
 8001246:	37b0      	adds	r7, #176	@ 0xb0
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000

08001254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001254:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800128c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001258:	480d      	ldr	r0, [pc, #52]	@ (8001290 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800125a:	490e      	ldr	r1, [pc, #56]	@ (8001294 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800125c:	4a0e      	ldr	r2, [pc, #56]	@ (8001298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0b      	ldr	r2, [pc, #44]	@ (800129c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001270:	4c0b      	ldr	r4, [pc, #44]	@ (80012a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800127e:	f7ff fd91 	bl	8000da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001282:	f006 f843 	bl	800730c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001286:	f7ff fbe7 	bl	8000a58 <main>
  bx  lr    
 800128a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800128c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001294:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001298:	08008dc4 	.word	0x08008dc4
  ldr r2, =_sbss
 800129c:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 80012a0:	20001c10 	.word	0x20001c10

080012a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC_IRQHandler>

080012a6 <_ZN7IR_BaseC1Ev>:
 */

#include "ir_base.h"

// Constructor
IR_Base::IR_Base()
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fe5d 	bl	8001f70 <_ZN9IR_TimingC1Ev>
{
	m_state = ST_START;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
}
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi>:
#include "ir_code.h"

/**	\brief	Initial a code table.
 *
 */
IR_CodeTable::IR_CodeTable(const char *controllerName, uint16_t customCode, const IR_CODE *pCodeTable, int tableLen)
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	4613      	mov	r3, r2
 80012d6:	80fb      	strh	r3, [r7, #6]
{
	m_pControllerName = controllerName;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	601a      	str	r2, [r3, #0]
	m_customcode = customCode;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	88fa      	ldrh	r2, [r7, #6]
 80012e2:	809a      	strh	r2, [r3, #4]
	m_pCodeTable = pCodeTable;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	609a      	str	r2, [r3, #8]
	m_nTableLen = tableLen;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	60da      	str	r2, [r3, #12]
}
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <_ZN12IR_CodeTable7FindKeyEhPPKcS2_>:

/**	\brief	Search IR code in code table.
 *
 */
bool	IR_CodeTable::FindKey(uint8_t datacode, const char **ppControllerName, const char **ppKeyname)
{
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	460b      	mov	r3, r1
 800130e:	72fb      	strb	r3, [r7, #11]
	*ppControllerName = m_pControllerName;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	601a      	str	r2, [r3, #0]

	for (int i=0; i<m_nTableLen; i++)
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e015      	b.n	800134a <_ZN12IR_CodeTable7FindKeyEhPPKcS2_+0x4a>
	{
		if (datacode == m_pCodeTable[i].irCode)
 800131e:	7afb      	ldrb	r3, [r7, #11]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	6891      	ldr	r1, [r2, #8]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	00d2      	lsls	r2, r2, #3
 8001328:	440a      	add	r2, r1
 800132a:	8812      	ldrh	r2, [r2, #0]
 800132c:	4293      	cmp	r3, r2
 800132e:	d109      	bne.n	8001344 <_ZN12IR_CodeTable7FindKeyEhPPKcS2_+0x44>
		{
			*ppKeyname = m_pCodeTable[i].keyName;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4413      	add	r3, r2
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	601a      	str	r2, [r3, #0]
			return true;
 8001340:	2301      	movs	r3, #1
 8001342:	e00b      	b.n	800135c <_ZN12IR_CodeTable7FindKeyEhPPKcS2_+0x5c>
	for (int i=0; i<m_nTableLen; i++)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3301      	adds	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	429a      	cmp	r2, r3
 8001352:	dbe4      	blt.n	800131e <_ZN12IR_CodeTable7FindKeyEhPPKcS2_+0x1e>
		}
	}

	*ppKeyname = "Unknown";
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <_ZN12IR_CodeTable7FindKeyEhPPKcS2_+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
	return true;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	371c      	adds	r7, #28
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	080082dc 	.word	0x080082dc

0800136c <_ZN11IR_Receiver7GetCodeEv>:
	void	processing();
	IR_State	proc_IRsignal(int time);
	void	ShowIrCode(IR_State state);
	bool	check_IRcode(void);

	uint16_t	GetCode() {return m_ircode;}
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f8b3 366c 	ldrh.w	r3, [r3, #1644]	@ 0x66c
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_ZN11IR_Receiver13GetControllerEv>:
	const char *GetController() {return m_pControllerName;}
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f8d3 3670 	ldr.w	r3, [r3, #1648]	@ 0x670
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_ZN11IR_Receiver10GetBtnNameEv>:
	const char *GetBtnName() {return m_pkeyname;}
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f8d3 3674 	ldr.w	r3, [r3, #1652]	@ 0x674
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <_ZN11IR_Receiver10ResetStateEv>:
	void	ResetState() {m_state = ST_START;}
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <_ZN11IR_Receiver10processingEv>:

/**	\brief	Process received IR code.
 *
 */
void	IR_Receiver::processing()
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	//	process signal from remote controller
	if (m_size > 0)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	dd3c      	ble.n	8001462 <_ZN11IR_Receiver10processingEv+0x8a>
	{
		// toggle LD2
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013e8:	2180      	movs	r1, #128	@ 0x80
 80013ea:	4820      	ldr	r0, [pc, #128]	@ (800146c <_ZN11IR_Receiver10processingEv+0x94>)
 80013ec:	f001 fe07 	bl	8002ffe <HAL_GPIO_TogglePin>

		IrSignal signal = get();
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fe0d 	bl	8002018 <_ZN9IR_Timing3getEv>

		// if pulse width > 10 ms, it may mean a new code
		uint32_t pulseWidth = signal.time - preSignalTick;
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	617b      	str	r3, [r7, #20]
		if (pulseWidth > MAX_STATE_TIME)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800140e:	d904      	bls.n	800141a <_ZN11IR_Receiver10processingEv+0x42>
		{
			pulseWidth = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
			printf("\r\n");
 8001414:	4816      	ldr	r0, [pc, #88]	@ (8001470 <_ZN11IR_Receiver10processingEv+0x98>)
 8001416:	f005 ff63 	bl	80072e0 <puts>
		}

		// falling edge = end of SPACE state
		// rising edge = end of MARK state
		// a line = 17 bytes, take about 1.62 ms for 115200 bps
		if (signal.state == SPACE)
 800141a:	7b3b      	ldrb	r3, [r7, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d104      	bne.n	800142a <_ZN11IR_Receiver10processingEv+0x52>
			printf("%3lu (M)\r\n", pulseWidth);
 8001420:	6979      	ldr	r1, [r7, #20]
 8001422:	4814      	ldr	r0, [pc, #80]	@ (8001474 <_ZN11IR_Receiver10processingEv+0x9c>)
 8001424:	f005 fef4 	bl	8007210 <iprintf>
 8001428:	e003      	b.n	8001432 <_ZN11IR_Receiver10processingEv+0x5a>
		else
			printf("%3lu (S) ", pulseWidth);
 800142a:	6979      	ldr	r1, [r7, #20]
 800142c:	4812      	ldr	r0, [pc, #72]	@ (8001478 <_ZN11IR_Receiver10processingEv+0xa0>)
 800142e:	f005 feef 	bl	8007210 <iprintf>

		IR_State state = proc_IRsignal(pulseWidth);
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	4619      	mov	r1, r3
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f8ea 	bl	8001610 <_ZN11IR_Receiver13proc_IRsignalEi>
 800143c:	4603      	mov	r3, r0
 800143e:	74fb      	strb	r3, [r7, #19]
		if ((state == NEC_DONE) || (state == NEC_DONE_REPEAT) || (state == DAIKIN_DONE))
 8001440:	7cfb      	ldrb	r3, [r7, #19]
 8001442:	2b06      	cmp	r3, #6
 8001444:	d005      	beq.n	8001452 <_ZN11IR_Receiver10processingEv+0x7a>
 8001446:	7cfb      	ldrb	r3, [r7, #19]
 8001448:	2b07      	cmp	r3, #7
 800144a:	d002      	beq.n	8001452 <_ZN11IR_Receiver10processingEv+0x7a>
 800144c:	7cfb      	ldrb	r3, [r7, #19]
 800144e:	2b0b      	cmp	r3, #11
 8001450:	d104      	bne.n	800145c <_ZN11IR_Receiver10processingEv+0x84>
			ShowIrCode(state);
 8001452:	7cfb      	ldrb	r3, [r7, #19]
 8001454:	4619      	mov	r1, r3
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f810 	bl	800147c <_ZN11IR_Receiver10ShowIrCodeE8IR_State>

		preSignalTick = signal.time;
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	601a      	str	r2, [r3, #0]
	}
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40020400 	.word	0x40020400
 8001470:	08008604 	.word	0x08008604
 8001474:	08008608 	.word	0x08008608
 8001478:	08008614 	.word	0x08008614

0800147c <_ZN11IR_Receiver10ShowIrCodeE8IR_State>:

/**	\brief	Show received IR code.
 *
 */
void	IR_Receiver::ShowIrCode(IR_State state)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	@ 0x30
 8001480:	af04      	add	r7, sp, #16
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	70fb      	strb	r3, [r7, #3]
	static int nBtn = 0;
	static int repeatX = 0;
	static int repeatY = 32;
	static SSD1306_COLOR pixelColor = White;

	if (state == NEC_DONE)
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	2b06      	cmp	r3, #6
 800148c:	d138      	bne.n	8001500 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x84>
	{
		uint16_t irCode = GetCode();
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ff6c 	bl	800136c <_ZN11IR_Receiver7GetCodeEv>
 8001494:	4603      	mov	r3, r0
 8001496:	82fb      	strh	r3, [r7, #22]
		const char *pController = GetController();
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff74 	bl	8001386 <_ZN11IR_Receiver13GetControllerEv>
 800149e:	6138      	str	r0, [r7, #16]
		const char *pBtnName = GetBtnName();
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff7d 	bl	80013a0 <_ZN11IR_Receiver10GetBtnNameEv>
 80014a6:	60f8      	str	r0, [r7, #12]

		ssd1306_Fill(Black);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f005 fc19 	bl	8006ce0 <ssd1306_Fill>

		ssd1306_SetCursor(0, 0);
 80014ae:	2100      	movs	r1, #0
 80014b0:	2000      	movs	r0, #0
 80014b2:	f005 fdc1 	bl	8007038 <ssd1306_SetCursor>
		ssd1306_printf(Font_5x7, White, "%-8s", pController);
 80014b6:	494c      	ldr	r1, [pc, #304]	@ (80015e8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x16c>)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4b4b      	ldr	r3, [pc, #300]	@ (80015ec <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x170>)
 80014be:	2201      	movs	r2, #1
 80014c0:	c903      	ldmia	r1, {r0, r1}
 80014c2:	f005 fdd1 	bl	8007068 <ssd1306_printf>

		ssd1306_SetCursor(0, 8);
 80014c6:	2108      	movs	r1, #8
 80014c8:	2000      	movs	r0, #0
 80014ca:	f005 fdb5 	bl	8007038 <ssd1306_SetCursor>
		ssd1306_printf(Font_5x7, White, "%03d %04X %-10s", ++nBtn, irCode, pBtnName);
 80014ce:	4b48      	ldr	r3, [pc, #288]	@ (80015f0 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x174>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	4a46      	ldr	r2, [pc, #280]	@ (80015f0 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x174>)
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b45      	ldr	r3, [pc, #276]	@ (80015f0 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x174>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	8afa      	ldrh	r2, [r7, #22]
 80014de:	4842      	ldr	r0, [pc, #264]	@ (80015e8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x16c>)
 80014e0:	68f9      	ldr	r1, [r7, #12]
 80014e2:	9102      	str	r1, [sp, #8]
 80014e4:	9201      	str	r2, [sp, #4]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	4b42      	ldr	r3, [pc, #264]	@ (80015f4 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x178>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	c803      	ldmia	r0, {r0, r1}
 80014ee:	f005 fdbb 	bl	8007068 <ssd1306_printf>

		repeatX = 0;
 80014f2:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x17c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
		repeatY = 16;
 80014f8:	4b40      	ldr	r3, [pc, #256]	@ (80015fc <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x180>)
 80014fa:	2210      	movs	r2, #16
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e068      	b.n	80015d2 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x156>
	}
	else if (state == NEC_DONE_REPEAT)
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	2b07      	cmp	r3, #7
 8001504:	d130      	bne.n	8001568 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0xec>
	{
		ssd1306_DrawPixel(repeatX, repeatY, pixelColor);
 8001506:	4b3c      	ldr	r3, [pc, #240]	@ (80015f8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x17c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4a3b      	ldr	r2, [pc, #236]	@ (80015fc <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x180>)
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	b2d1      	uxtb	r1, r2
 8001512:	4a3b      	ldr	r2, [pc, #236]	@ (8001600 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x184>)
 8001514:	7812      	ldrb	r2, [r2, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f005 fc38 	bl	8006d8c <ssd1306_DrawPixel>

		repeatX += 2;
 800151c:	4b36      	ldr	r3, [pc, #216]	@ (80015f8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x17c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3302      	adds	r3, #2
 8001522:	4a35      	ldr	r2, [pc, #212]	@ (80015f8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x17c>)
 8001524:	6013      	str	r3, [r2, #0]
		if (repeatX >= SSD1306_WIDTH)
 8001526:	4b34      	ldr	r3, [pc, #208]	@ (80015f8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x17c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b7f      	cmp	r3, #127	@ 0x7f
 800152c:	dd51      	ble.n	80015d2 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x156>
		{
			repeatX = 0;
 800152e:	4b32      	ldr	r3, [pc, #200]	@ (80015f8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x17c>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
			repeatY += 2;
 8001534:	4b31      	ldr	r3, [pc, #196]	@ (80015fc <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x180>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3302      	adds	r3, #2
 800153a:	4a30      	ldr	r2, [pc, #192]	@ (80015fc <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x180>)
 800153c:	6013      	str	r3, [r2, #0]
			if (repeatY >= SSD1306_HEIGHT)
 800153e:	4b2f      	ldr	r3, [pc, #188]	@ (80015fc <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x180>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b3f      	cmp	r3, #63	@ 0x3f
 8001544:	dd45      	ble.n	80015d2 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x156>
			{
				repeatX = 0;
 8001546:	4b2c      	ldr	r3, [pc, #176]	@ (80015f8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x17c>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
				repeatY = 16;
 800154c:	4b2b      	ldr	r3, [pc, #172]	@ (80015fc <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x180>)
 800154e:	2210      	movs	r2, #16
 8001550:	601a      	str	r2, [r3, #0]
				pixelColor = (pixelColor == White) ? Black : White;
 8001552:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x184>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	bf14      	ite	ne
 800155a:	2301      	movne	r3, #1
 800155c:	2300      	moveq	r3, #0
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	4b27      	ldr	r3, [pc, #156]	@ (8001600 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x184>)
 8001564:	701a      	strb	r2, [r3, #0]
 8001566:	e034      	b.n	80015d2 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x156>
			}
		}
	}
	else if (state == DAIKIN_DONE)
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	2b0b      	cmp	r3, #11
 800156c:	d131      	bne.n	80015d2 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x156>
	{
		ssd1306_Fill(Black);
 800156e:	2000      	movs	r0, #0
 8001570:	f005 fbb6 	bl	8006ce0 <ssd1306_Fill>

		int y = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<19; i++)
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	e026      	b.n	80015cc <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x150>
		{
			if ((i % 7) == 0)
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x188>)
 8001582:	fb83 1302 	smull	r1, r3, r3, r2
 8001586:	4413      	add	r3, r2
 8001588:	1099      	asrs	r1, r3, #2
 800158a:	17d3      	asrs	r3, r2, #31
 800158c:	1ac9      	subs	r1, r1, r3
 800158e:	460b      	mov	r3, r1
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	1a5b      	subs	r3, r3, r1
 8001594:	1ad1      	subs	r1, r2, r3
 8001596:	2900      	cmp	r1, #0
 8001598:	d108      	bne.n	80015ac <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x130>
			{
				ssd1306_SetCursor(0, y);
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4619      	mov	r1, r3
 80015a0:	2000      	movs	r0, #0
 80015a2:	f005 fd49 	bl	8007038 <ssd1306_SetCursor>
				y += 8;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3308      	adds	r3, #8
 80015aa:	61fb      	str	r3, [r7, #28]
			}

			ssd1306_printf(Font_5x7, White, "%02X ", m_datacode[i]);
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	4413      	add	r3, r2
 80015b2:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	490b      	ldr	r1, [pc, #44]	@ (80015e8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x16c>)
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x18c>)
 80015be:	2201      	movs	r2, #1
 80015c0:	c903      	ldmia	r1, {r0, r1}
 80015c2:	f005 fd51 	bl	8007068 <ssd1306_printf>
		for (int i=0; i<19; i++)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	2b12      	cmp	r3, #18
 80015d0:	ddd5      	ble.n	800157e <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x102>
		}
	}

	ssd1306_UpdateScreen(&oled_i2c);
 80015d2:	480e      	ldr	r0, [pc, #56]	@ (800160c <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x190>)
 80015d4:	f005 fba8 	bl	8006d28 <ssd1306_UpdateScreen>

	ResetState();
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff feee 	bl	80013ba <_ZN11IR_Receiver10ResetStateEv>
}
 80015de:	bf00      	nop
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000014 	.word	0x20000014
 80015ec:	08008620 	.word	0x08008620
 80015f0:	200009a4 	.word	0x200009a4
 80015f4:	08008628 	.word	0x08008628
 80015f8:	200009a8 	.word	0x200009a8
 80015fc:	20000004 	.word	0x20000004
 8001600:	20000008 	.word	0x20000008
 8001604:	92492493 	.word	0x92492493
 8001608:	08008638 	.word	0x08008638
 800160c:	200002c4 	.word	0x200002c4

08001610 <_ZN11IR_Receiver13proc_IRsignalEi>:

/** \brief	Process IR signal.
	The IR signal is process by a state machine.
*/
IR_State	IR_Receiver::proc_IRsignal(int pulseWidth)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b09e      	sub	sp, #120	@ 0x78
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	m_pulseWidth = pulseWidth;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	f8c3 2678 	str.w	r2, [r3, #1656]	@ 0x678

	switch(m_state)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3663 	ldrb.w	r3, [r3, #1635]	@ 0x663
 8001628:	3b01      	subs	r3, #1
 800162a:	2b09      	cmp	r3, #9
 800162c:	f200 8260 	bhi.w	8001af0 <_ZN11IR_Receiver13proc_IRsignalEi+0x4e0>
 8001630:	a201      	add	r2, pc, #4	@ (adr r2, 8001638 <_ZN11IR_Receiver13proc_IRsignalEi+0x28>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	08001661 	.word	0x08001661
 800163c:	080016c7 	.word	0x080016c7
 8001640:	08001743 	.word	0x08001743
 8001644:	0800177d 	.word	0x0800177d
 8001648:	080018e3 	.word	0x080018e3
 800164c:	08001af1 	.word	0x08001af1
 8001650:	08001af1 	.word	0x08001af1
 8001654:	0800191d 	.word	0x0800191d
 8001658:	08001967 	.word	0x08001967
 800165c:	080019a1 	.word	0x080019a1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	677b      	str	r3, [r7, #116]	@ 0x74
 8001664:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001668:	673b      	str	r3, [r7, #112]	@ 0x70
/**	\brief	Check pulse width.
 *
 */
bool	IR_Receiver::about(int nTick)
{
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 800166a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800166c:	f8d3 2678 	ldr.w	r2, [r3, #1656]	@ 0x678
 8001670:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	bfb8      	it	lt
 8001678:	425b      	neglt	r3, r3
 800167a:	2b29      	cmp	r3, #41	@ 0x29
 800167c:	bfd4      	ite	le
 800167e:	2301      	movle	r3, #1
 8001680:	2300      	movgt	r3, #0
 8001682:	b2db      	uxtb	r3, r3
		if (about(16*NEC_TICK))			// 9 ms
 8001684:	2b00      	cmp	r3, #0
 8001686:	d004      	beq.n	8001692 <_ZN11IR_Receiver13proc_IRsignalEi+0x82>
			m_state = NEC_LEADING;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2202      	movs	r2, #2
 800168c:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 8001690:	e230      	b.n	8001af4 <_ZN11IR_Receiver13proc_IRsignalEi+0x4e4>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001696:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800169a:	66bb      	str	r3, [r7, #104]	@ 0x68
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 800169c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800169e:	f8d3 2678 	ldr.w	r2, [r3, #1656]	@ 0x678
 80016a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bfb8      	it	lt
 80016aa:	425b      	neglt	r3, r3
 80016ac:	2b29      	cmp	r3, #41	@ 0x29
 80016ae:	bfd4      	ite	le
 80016b0:	2301      	movle	r3, #1
 80016b2:	2300      	movgt	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
		else if (about(8*DAIKIN_TICK))	// 3.5 ms
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 821c 	beq.w	8001af4 <_ZN11IR_Receiver13proc_IRsignalEi+0x4e4>
			m_state = DAIKIN_LEADING;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2208      	movs	r2, #8
 80016c0:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 80016c4:	e216      	b.n	8001af4 <_ZN11IR_Receiver13proc_IRsignalEi+0x4e4>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80016ca:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80016ce:	663b      	str	r3, [r7, #96]	@ 0x60
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 80016d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016d2:	f8d3 2678 	ldr.w	r2, [r3, #1656]	@ 0x678
 80016d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	bfb8      	it	lt
 80016de:	425b      	neglt	r3, r3
 80016e0:	2b29      	cmp	r3, #41	@ 0x29
 80016e2:	bfd4      	ite	le
 80016e4:	2301      	movle	r3, #1
 80016e6:	2300      	movgt	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
		if (about(8*NEC_TICK))			// 4.5 ms
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00c      	beq.n	8001708 <_ZN11IR_Receiver13proc_IRsignalEi+0xf8>
			m_bitNo = 0;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f8c3 2664 	str.w	r2, [r3, #1636]	@ 0x664
			m_byteNo = 0;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f8c3 2668 	str.w	r2, [r3, #1640]	@ 0x668
			m_state = NEC_DATAFRAME;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2203      	movs	r2, #3
 8001702:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 8001706:	e1fa      	b.n	8001afe <_ZN11IR_Receiver13proc_IRsignalEi+0x4ee>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800170c:	23e0      	movs	r3, #224	@ 0xe0
 800170e:	65bb      	str	r3, [r7, #88]	@ 0x58
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 8001710:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001712:	f8d3 2678 	ldr.w	r2, [r3, #1656]	@ 0x678
 8001716:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	bfb8      	it	lt
 800171e:	425b      	neglt	r3, r3
 8001720:	2b29      	cmp	r3, #41	@ 0x29
 8001722:	bfd4      	ite	le
 8001724:	2301      	movle	r3, #1
 8001726:	2300      	movgt	r3, #0
 8001728:	b2db      	uxtb	r3, r3
		else if (about(4*NEC_TICK))		// 2.25 ms
 800172a:	2b00      	cmp	r3, #0
 800172c:	d004      	beq.n	8001738 <_ZN11IR_Receiver13proc_IRsignalEi+0x128>
			m_state = NEC_REPEATCODE;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2205      	movs	r2, #5
 8001732:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 8001736:	e1e2      	b.n	8001afe <_ZN11IR_Receiver13proc_IRsignalEi+0x4ee>
			m_state = ST_START;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 8001740:	e1dd      	b.n	8001afe <_ZN11IR_Receiver13proc_IRsignalEi+0x4ee>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	657b      	str	r3, [r7, #84]	@ 0x54
 8001746:	2338      	movs	r3, #56	@ 0x38
 8001748:	653b      	str	r3, [r7, #80]	@ 0x50
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 800174a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800174c:	f8d3 2678 	ldr.w	r2, [r3, #1656]	@ 0x678
 8001750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	bfb8      	it	lt
 8001758:	425b      	neglt	r3, r3
 800175a:	2b29      	cmp	r3, #41	@ 0x29
 800175c:	bfd4      	ite	le
 800175e:	2301      	movle	r3, #1
 8001760:	2300      	movgt	r3, #0
 8001762:	b2db      	uxtb	r3, r3
		if (about(NEC_TICK)) 			// 0.56 ms
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <_ZN11IR_Receiver13proc_IRsignalEi+0x162>
			m_state = NEC_DATABIT;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2204      	movs	r2, #4
 800176c:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 8001770:	e1c5      	b.n	8001afe <_ZN11IR_Receiver13proc_IRsignalEi+0x4ee>
			m_state = ST_START;	// frame error
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 800177a:	e1c0      	b.n	8001afe <_ZN11IR_Receiver13proc_IRsignalEi+0x4ee>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001780:	2338      	movs	r3, #56	@ 0x38
 8001782:	64bb      	str	r3, [r7, #72]	@ 0x48
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 8001784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001786:	f8d3 2678 	ldr.w	r2, [r3, #1656]	@ 0x678
 800178a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	bfb8      	it	lt
 8001792:	425b      	neglt	r3, r3
 8001794:	2b29      	cmp	r3, #41	@ 0x29
 8001796:	bfd4      	ite	le
 8001798:	2301      	movle	r3, #1
 800179a:	2300      	movgt	r3, #0
 800179c:	b2db      	uxtb	r3, r3
		if (about(NEC_TICK) || about(3*NEC_TICK))	// 0.56 ms or 1.68 ms
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d112      	bne.n	80017c8 <_ZN11IR_Receiver13proc_IRsignalEi+0x1b8>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80017a6:	23a8      	movs	r3, #168	@ 0xa8
 80017a8:	643b      	str	r3, [r7, #64]	@ 0x40
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 80017aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017ac:	f8d3 2678 	ldr.w	r2, [r3, #1656]	@ 0x678
 80017b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	bfb8      	it	lt
 80017b8:	425b      	neglt	r3, r3
 80017ba:	2b29      	cmp	r3, #41	@ 0x29
 80017bc:	bfd4      	ite	le
 80017be:	2301      	movle	r3, #1
 80017c0:	2300      	movgt	r3, #0
 80017c2:	b2db      	uxtb	r3, r3
		if (about(NEC_TICK) || about(3*NEC_TICK))	// 0.56 ms or 1.68 ms
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <_ZN11IR_Receiver13proc_IRsignalEi+0x1bc>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <_ZN11IR_Receiver13proc_IRsignalEi+0x1be>
 80017cc:	2300      	movs	r3, #0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 8082 	beq.w	80018d8 <_ZN11IR_Receiver13proc_IRsignalEi+0x2c8>
			m_datacode[m_byteNo] >>= 1;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f8d3 3668 	ldr.w	r3, [r3, #1640]	@ 0x668
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	f893 2650 	ldrb.w	r2, [r3, #1616]	@ 0x650
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f8d3 3668 	ldr.w	r3, [r3, #1640]	@ 0x668
 80017e8:	0852      	lsrs	r2, r2, #1
 80017ea:	b2d1      	uxtb	r1, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	460a      	mov	r2, r1
 80017f2:	f883 2650 	strb.w	r2, [r3, #1616]	@ 0x650
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017fa:	2338      	movs	r3, #56	@ 0x38
 80017fc:	63bb      	str	r3, [r7, #56]	@ 0x38
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 80017fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001800:	f8d3 2678 	ldr.w	r2, [r3, #1656]	@ 0x678
 8001804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	bfb8      	it	lt
 800180c:	425b      	neglt	r3, r3
 800180e:	2b29      	cmp	r3, #41	@ 0x29
 8001810:	bfd4      	ite	le
 8001812:	2301      	movle	r3, #1
 8001814:	2300      	movgt	r3, #0
 8001816:	b2db      	uxtb	r3, r3
			if (about(NEC_TICK))
 8001818:	2b00      	cmp	r3, #0
 800181a:	d012      	beq.n	8001842 <_ZN11IR_Receiver13proc_IRsignalEi+0x232>
				m_datacode[m_byteNo] &= 0x7f;	// bit = 0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f8d3 3668 	ldr.w	r3, [r3, #1640]	@ 0x668
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	f893 2650 	ldrb.w	r2, [r3, #1616]	@ 0x650
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f8d3 3668 	ldr.w	r3, [r3, #1640]	@ 0x668
 8001830:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001834:	b2d1      	uxtb	r1, r2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	460a      	mov	r2, r1
 800183c:	f883 2650 	strb.w	r2, [r3, #1616]	@ 0x650
 8001840:	e011      	b.n	8001866 <_ZN11IR_Receiver13proc_IRsignalEi+0x256>
				m_datacode[m_byteNo] |= 0x80;	// bit = 1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f8d3 3668 	ldr.w	r3, [r3, #1640]	@ 0x668
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	f893 2650 	ldrb.w	r2, [r3, #1616]	@ 0x650
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f8d3 3668 	ldr.w	r3, [r3, #1640]	@ 0x668
 8001856:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800185a:	b2d1      	uxtb	r1, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	4413      	add	r3, r2
 8001860:	460a      	mov	r2, r1
 8001862:	f883 2650 	strb.w	r2, [r3, #1616]	@ 0x650
			m_state = NEC_DATAFRAME;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2203      	movs	r2, #3
 800186a:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
			if (++m_bitNo == 8)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f8d3 3664 	ldr.w	r3, [r3, #1636]	@ 0x664
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f8c3 2664 	str.w	r2, [r3, #1636]	@ 0x664
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f8d3 3664 	ldr.w	r3, [r3, #1636]	@ 0x664
 8001882:	2b08      	cmp	r3, #8
 8001884:	bf0c      	ite	eq
 8001886:	2301      	moveq	r3, #1
 8001888:	2300      	movne	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8133 	beq.w	8001af8 <_ZN11IR_Receiver13proc_IRsignalEi+0x4e8>
				m_bitNo = 0;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f8c3 2664 	str.w	r2, [r3, #1636]	@ 0x664
				if (++m_byteNo == 4)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f8d3 3668 	ldr.w	r3, [r3, #1640]	@ 0x668
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f8c3 2668 	str.w	r2, [r3, #1640]	@ 0x668
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f8d3 3668 	ldr.w	r3, [r3, #1640]	@ 0x668
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf0c      	ite	eq
 80018b2:	2301      	moveq	r3, #1
 80018b4:	2300      	movne	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 811d 	beq.w	8001af8 <_ZN11IR_Receiver13proc_IRsignalEi+0x4e8>
					m_state = check_IRcode() ? NEC_DONE : ST_START;
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f924 	bl	8001b0c <_ZN11IR_Receiver12check_IRcodeEv>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <_ZN11IR_Receiver13proc_IRsignalEi+0x2be>
 80018ca:	2206      	movs	r2, #6
 80018cc:	e000      	b.n	80018d0 <_ZN11IR_Receiver13proc_IRsignalEi+0x2c0>
 80018ce:	2201      	movs	r2, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 80018d6:	e10f      	b.n	8001af8 <_ZN11IR_Receiver13proc_IRsignalEi+0x4e8>
			m_state = ST_START;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 80018e0:	e10a      	b.n	8001af8 <_ZN11IR_Receiver13proc_IRsignalEi+0x4e8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80018e6:	2338      	movs	r3, #56	@ 0x38
 80018e8:	633b      	str	r3, [r7, #48]	@ 0x30
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 80018ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ec:	f8d3 2678 	ldr.w	r2, [r3, #1656]	@ 0x678
 80018f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bfb8      	it	lt
 80018f8:	425b      	neglt	r3, r3
 80018fa:	2b29      	cmp	r3, #41	@ 0x29
 80018fc:	bfd4      	ite	le
 80018fe:	2301      	movle	r3, #1
 8001900:	2300      	movgt	r3, #0
 8001902:	b2db      	uxtb	r3, r3
		if (about(NEC_TICK)) 			// 0.56 ms
 8001904:	2b00      	cmp	r3, #0
 8001906:	d004      	beq.n	8001912 <_ZN11IR_Receiver13proc_IRsignalEi+0x302>
			m_state = NEC_DONE_REPEAT;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2207      	movs	r2, #7
 800190c:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 8001910:	e0f5      	b.n	8001afe <_ZN11IR_Receiver13proc_IRsignalEi+0x4ee>
			m_state = ST_START;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 800191a:	e0f0      	b.n	8001afe <_ZN11IR_Receiver13proc_IRsignalEi+0x4ee>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001920:	23b0      	movs	r3, #176	@ 0xb0
 8001922:	62bb      	str	r3, [r7, #40]	@ 0x28
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 8001924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001926:	f8d3 2678 	ldr.w	r2, [r3, #1656]	@ 0x678
 800192a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	bfb8      	it	lt
 8001932:	425b      	neglt	r3, r3
 8001934:	2b29      	cmp	r3, #41	@ 0x29
 8001936:	bfd4      	ite	le
 8001938:	2301      	movle	r3, #1
 800193a:	2300      	movgt	r3, #0
 800193c:	b2db      	uxtb	r3, r3
		if (about(4*DAIKIN_TICK))			// 1.76 ms
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00c      	beq.n	800195c <_ZN11IR_Receiver13proc_IRsignalEi+0x34c>
			m_bitNo = 0;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f8c3 2664 	str.w	r2, [r3, #1636]	@ 0x664
			m_byteNo = 0;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f8c3 2668 	str.w	r2, [r3, #1640]	@ 0x668
			m_state = DAIKIN_DATAFRAME;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2209      	movs	r2, #9
 8001956:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 800195a:	e0d0      	b.n	8001afe <_ZN11IR_Receiver13proc_IRsignalEi+0x4ee>
			m_state = ST_START;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 8001964:	e0cb      	b.n	8001afe <_ZN11IR_Receiver13proc_IRsignalEi+0x4ee>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
 800196a:	232c      	movs	r3, #44	@ 0x2c
 800196c:	623b      	str	r3, [r7, #32]
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	f8d3 2678 	ldr.w	r2, [r3, #1656]	@ 0x678
 8001974:	6a3b      	ldr	r3, [r7, #32]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	bfb8      	it	lt
 800197c:	425b      	neglt	r3, r3
 800197e:	2b29      	cmp	r3, #41	@ 0x29
 8001980:	bfd4      	ite	le
 8001982:	2301      	movle	r3, #1
 8001984:	2300      	movgt	r3, #0
 8001986:	b2db      	uxtb	r3, r3
		if (about(DAIKIN_TICK)) 			// 0.44 ms
 8001988:	2b00      	cmp	r3, #0
 800198a:	d004      	beq.n	8001996 <_ZN11IR_Receiver13proc_IRsignalEi+0x386>
			m_state = DAIKIN_DATABIT;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	220a      	movs	r2, #10
 8001990:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 8001994:	e0b3      	b.n	8001afe <_ZN11IR_Receiver13proc_IRsignalEi+0x4ee>
			m_state = ST_START;	// frame error
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 800199e:	e0ae      	b.n	8001afe <_ZN11IR_Receiver13proc_IRsignalEi+0x4ee>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	232c      	movs	r3, #44	@ 0x2c
 80019a6:	61bb      	str	r3, [r7, #24]
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f8d3 2678 	ldr.w	r2, [r3, #1656]	@ 0x678
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bfb8      	it	lt
 80019b6:	425b      	neglt	r3, r3
 80019b8:	2b29      	cmp	r3, #41	@ 0x29
 80019ba:	bfd4      	ite	le
 80019bc:	2301      	movle	r3, #1
 80019be:	2300      	movgt	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
		if (about(DAIKIN_TICK) || about(3*DAIKIN_TICK))	// 0.44 ms or 1.32 ms
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d112      	bne.n	80019ec <_ZN11IR_Receiver13proc_IRsignalEi+0x3dc>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	2384      	movs	r3, #132	@ 0x84
 80019cc:	613b      	str	r3, [r7, #16]
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f8d3 2678 	ldr.w	r2, [r3, #1656]	@ 0x678
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bfb8      	it	lt
 80019dc:	425b      	neglt	r3, r3
 80019de:	2b29      	cmp	r3, #41	@ 0x29
 80019e0:	bfd4      	ite	le
 80019e2:	2301      	movle	r3, #1
 80019e4:	2300      	movgt	r3, #0
 80019e6:	b2db      	uxtb	r3, r3
		if (about(DAIKIN_TICK) || about(3*DAIKIN_TICK))	// 0.44 ms or 1.32 ms
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <_ZN11IR_Receiver13proc_IRsignalEi+0x3e0>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <_ZN11IR_Receiver13proc_IRsignalEi+0x3e2>
 80019f0:	2300      	movs	r3, #0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d077      	beq.n	8001ae6 <_ZN11IR_Receiver13proc_IRsignalEi+0x4d6>
			m_datacode[m_byteNo] >>= 1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f8d3 3668 	ldr.w	r3, [r3, #1640]	@ 0x668
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4413      	add	r3, r2
 8001a00:	f893 2650 	ldrb.w	r2, [r3, #1616]	@ 0x650
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f8d3 3668 	ldr.w	r3, [r3, #1640]	@ 0x668
 8001a0a:	0852      	lsrs	r2, r2, #1
 8001a0c:	b2d1      	uxtb	r1, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	460a      	mov	r2, r1
 8001a14:	f883 2650 	strb.w	r2, [r3, #1616]	@ 0x650
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	232c      	movs	r3, #44	@ 0x2c
 8001a1e:	60bb      	str	r3, [r7, #8]
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f8d3 2678 	ldr.w	r2, [r3, #1656]	@ 0x678
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	bfb8      	it	lt
 8001a2e:	425b      	neglt	r3, r3
 8001a30:	2b29      	cmp	r3, #41	@ 0x29
 8001a32:	bfd4      	ite	le
 8001a34:	2301      	movle	r3, #1
 8001a36:	2300      	movgt	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
			if (about(DAIKIN_TICK))
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d012      	beq.n	8001a64 <_ZN11IR_Receiver13proc_IRsignalEi+0x454>
				m_datacode[m_byteNo] &= 0x7f;	// bit = 0
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f8d3 3668 	ldr.w	r3, [r3, #1640]	@ 0x668
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	4413      	add	r3, r2
 8001a48:	f893 2650 	ldrb.w	r2, [r3, #1616]	@ 0x650
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8d3 3668 	ldr.w	r3, [r3, #1640]	@ 0x668
 8001a52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001a56:	b2d1      	uxtb	r1, r2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	f883 2650 	strb.w	r2, [r3, #1616]	@ 0x650
 8001a62:	e011      	b.n	8001a88 <_ZN11IR_Receiver13proc_IRsignalEi+0x478>
				m_datacode[m_byteNo] |= 0x80;	// bit = 1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f8d3 3668 	ldr.w	r3, [r3, #1640]	@ 0x668
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f893 2650 	ldrb.w	r2, [r3, #1616]	@ 0x650
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f8d3 3668 	ldr.w	r3, [r3, #1640]	@ 0x668
 8001a78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001a7c:	b2d1      	uxtb	r1, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	460a      	mov	r2, r1
 8001a84:	f883 2650 	strb.w	r2, [r3, #1616]	@ 0x650
			m_state = DAIKIN_DATAFRAME;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2209      	movs	r2, #9
 8001a8c:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
			if (++m_bitNo == 8)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8d3 3664 	ldr.w	r3, [r3, #1636]	@ 0x664
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f8c3 2664 	str.w	r2, [r3, #1636]	@ 0x664
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f8d3 3664 	ldr.w	r3, [r3, #1636]	@ 0x664
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d024      	beq.n	8001afc <_ZN11IR_Receiver13proc_IRsignalEi+0x4ec>
				m_bitNo = 0;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f8c3 2664 	str.w	r2, [r3, #1636]	@ 0x664
				if (++m_byteNo == 19)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f8d3 3668 	ldr.w	r3, [r3, #1640]	@ 0x668
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8c3 2668 	str.w	r2, [r3, #1640]	@ 0x668
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8d3 3668 	ldr.w	r3, [r3, #1640]	@ 0x668
 8001ace:	2b13      	cmp	r3, #19
 8001ad0:	bf0c      	ite	eq
 8001ad2:	2301      	moveq	r3, #1
 8001ad4:	2300      	movne	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00f      	beq.n	8001afc <_ZN11IR_Receiver13proc_IRsignalEi+0x4ec>
					m_state = DAIKIN_DONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	220b      	movs	r2, #11
 8001ae0:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 8001ae4:	e00a      	b.n	8001afc <_ZN11IR_Receiver13proc_IRsignalEi+0x4ec>
			m_state = ST_START;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 8001aee:	e005      	b.n	8001afc <_ZN11IR_Receiver13proc_IRsignalEi+0x4ec>
		break;
 8001af0:	bf00      	nop
 8001af2:	e004      	b.n	8001afe <_ZN11IR_Receiver13proc_IRsignalEi+0x4ee>
		break;
 8001af4:	bf00      	nop
 8001af6:	e002      	b.n	8001afe <_ZN11IR_Receiver13proc_IRsignalEi+0x4ee>
		break;
 8001af8:	bf00      	nop
 8001afa:	e000      	b.n	8001afe <_ZN11IR_Receiver13proc_IRsignalEi+0x4ee>
		break;
 8001afc:	bf00      	nop
	return m_state;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3663 	ldrb.w	r3, [r3, #1635]	@ 0x663
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3778      	adds	r7, #120	@ 0x78
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_ZN11IR_Receiver12check_IRcodeEv>:

	The received IR code is checked against a code table that is
	retrieved from a real IR remote controller.
*/
bool	IR_Receiver::check_IRcode(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	if (m_datacode[2] + m_datacode[3] != 0xff)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3652 	ldrb.w	r3, [r3, #1618]	@ 0x652
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3653 	ldrb.w	r3, [r3, #1619]	@ 0x653
 8001b22:	4413      	add	r3, r2
 8001b24:	2bff      	cmp	r3, #255	@ 0xff
 8001b26:	d001      	beq.n	8001b2c <_ZN11IR_Receiver12check_IRcodeEv+0x20>
		return false;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e07b      	b.n	8001c24 <_ZN11IR_Receiver12check_IRcodeEv+0x118>

	m_ircode = m_datacode[2];
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3652 	ldrb.w	r3, [r3, #1618]	@ 0x652
 8001b32:	461a      	mov	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f8a3 266c 	strh.w	r2, [r3, #1644]	@ 0x66c
	uint16_t customcode = m_datacode[0] | (m_datacode[1] << 8);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3650 	ldrb.w	r3, [r3, #1616]	@ 0x650
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3651 	ldrb.w	r3, [r3, #1617]	@ 0x651
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	81fb      	strh	r3, [r7, #14]

	switch(customcode)
 8001b52:	89fb      	ldrh	r3, [r7, #14]
 8001b54:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 8001b58:	d029      	beq.n	8001bae <_ZN11IR_Receiver12check_IRcodeEv+0xa2>
 8001b5a:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 8001b5e:	dc35      	bgt.n	8001bcc <_ZN11IR_Receiver12check_IRcodeEv+0xc0>
 8001b60:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d004      	beq.n	8001b72 <_ZN11IR_Receiver12check_IRcodeEv+0x66>
 8001b68:	f64f 6201 	movw	r2, #65025	@ 0xfe01
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d00f      	beq.n	8001b90 <_ZN11IR_Receiver12check_IRcodeEv+0x84>
 8001b70:	e02c      	b.n	8001bcc <_ZN11IR_Receiver12check_IRcodeEv+0xc0>
	{
	case MOD:
		return mod.FindKey(m_ircode, &m_pControllerName, &m_pkeyname);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f8b3 366c 	ldrh.w	r3, [r3, #1644]	@ 0x66c
 8001b78:	b2d9      	uxtb	r1, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f503 62ce 	add.w	r2, r3, #1648	@ 0x670
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f203 6374 	addw	r3, r3, #1652	@ 0x674
 8001b86:	4829      	ldr	r0, [pc, #164]	@ (8001c2c <_ZN11IR_Receiver12check_IRcodeEv+0x120>)
 8001b88:	f7ff fbba 	bl	8001300 <_ZN12IR_CodeTable7FindKeyEhPPKcS2_>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	e049      	b.n	8001c24 <_ZN11IR_Receiver12check_IRcodeEv+0x118>

	case FAN:
		return fan.FindKey(m_ircode, &m_pControllerName, &m_pkeyname);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8b3 366c 	ldrh.w	r3, [r3, #1644]	@ 0x66c
 8001b96:	b2d9      	uxtb	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f503 62ce 	add.w	r2, r3, #1648	@ 0x670
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f203 6374 	addw	r3, r3, #1652	@ 0x674
 8001ba4:	4822      	ldr	r0, [pc, #136]	@ (8001c30 <_ZN11IR_Receiver12check_IRcodeEv+0x124>)
 8001ba6:	f7ff fbab 	bl	8001300 <_ZN12IR_CodeTable7FindKeyEhPPKcS2_>
 8001baa:	4603      	mov	r3, r0
 8001bac:	e03a      	b.n	8001c24 <_ZN11IR_Receiver12check_IRcodeEv+0x118>

	case HD_PLAYER:
		return hdrplayer.FindKey(m_ircode, &m_pControllerName, &m_pkeyname);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f8b3 366c 	ldrh.w	r3, [r3, #1644]	@ 0x66c
 8001bb4:	b2d9      	uxtb	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f503 62ce 	add.w	r2, r3, #1648	@ 0x670
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f203 6374 	addw	r3, r3, #1652	@ 0x674
 8001bc2:	481c      	ldr	r0, [pc, #112]	@ (8001c34 <_ZN11IR_Receiver12check_IRcodeEv+0x128>)
 8001bc4:	f7ff fb9c 	bl	8001300 <_ZN12IR_CodeTable7FindKeyEhPPKcS2_>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	e02b      	b.n	8001c24 <_ZN11IR_Receiver12check_IRcodeEv+0x118>

	default:
		if ((m_datacode[0] + m_datacode[1] == 0xff) ||
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3650 	ldrb.w	r3, [r3, #1616]	@ 0x650
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3651 	ldrb.w	r3, [r3, #1617]	@ 0x651
 8001bda:	4413      	add	r3, r2
 8001bdc:	2bff      	cmp	r3, #255	@ 0xff
 8001bde:	d007      	beq.n	8001bf0 <_ZN11IR_Receiver12check_IRcodeEv+0xe4>
 			(m_datacode[0] == m_datacode[1]))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 2650 	ldrb.w	r2, [r3, #1616]	@ 0x650
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3651 	ldrb.w	r3, [r3, #1617]	@ 0x651
		if ((m_datacode[0] + m_datacode[1] == 0xff) ||
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d118      	bne.n	8001c22 <_ZN11IR_Receiver12check_IRcodeEv+0x116>
		{
			m_ircode |= ((uint16_t) m_datacode[0] << 8);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f8b3 366c 	ldrh.w	r3, [r3, #1644]	@ 0x66c
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3650 	ldrb.w	r3, [r3, #1616]	@ 0x650
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f8a3 266c 	strh.w	r2, [r3, #1644]	@ 0x66c
			m_pControllerName = "Unknown";
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a09      	ldr	r2, [pc, #36]	@ (8001c38 <_ZN11IR_Receiver12check_IRcodeEv+0x12c>)
 8001c12:	f8c3 2670 	str.w	r2, [r3, #1648]	@ 0x670
			m_pkeyname = "Unknown";
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a07      	ldr	r2, [pc, #28]	@ (8001c38 <_ZN11IR_Receiver12check_IRcodeEv+0x12c>)
 8001c1a:	f8c3 2674 	str.w	r2, [r3, #1652]	@ 0x674
			return true;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <_ZN11IR_Receiver12check_IRcodeEv+0x118>
		}
	}

	return false;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000944 	.word	0x20000944
 8001c30:	20000954 	.word	0x20000954
 8001c34:	20000964 	.word	0x20000964
 8001c38:	08008640 	.word	0x08008640

08001c3c <_Z41__static_initialization_and_destruction_0ii>:
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d13d      	bne.n	8001cc8 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d138      	bne.n	8001cc8 <_Z41__static_initialization_and_destruction_0ii+0x8c>
IR_CodeTable mod("MOD", MOD, mod_codetable, sizeof(mod_codetable));
 8001c56:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001c5e:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 8001c62:	491c      	ldr	r1, [pc, #112]	@ (8001cd4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001c64:	481c      	ldr	r0, [pc, #112]	@ (8001cd8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001c66:	f7ff fb2f 	bl	80012c8 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi>
IR_CodeTable fan("FAN", FAN, fan_codetable, sizeof(fan_codetable));
 8001c6a:	2328      	movs	r3, #40	@ 0x28
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cdc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001c70:	f64f 6201 	movw	r2, #65025	@ 0xfe01
 8001c74:	491a      	ldr	r1, [pc, #104]	@ (8001ce0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001c76:	481b      	ldr	r0, [pc, #108]	@ (8001ce4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001c78:	f7ff fb26 	bl	80012c8 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi>
IR_CodeTable hdrplayer("HDR player", HD_PLAYER, hdrplayer_codeTable, sizeof(hdrplayer_codeTable));
 8001c7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	4b19      	ldr	r3, [pc, #100]	@ (8001ce8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001c84:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8001c88:	4918      	ldr	r1, [pc, #96]	@ (8001cec <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001c8a:	4819      	ldr	r0, [pc, #100]	@ (8001cf0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001c8c:	f7ff fb1c 	bl	80012c8 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi>
IR_CodeTable tochibatv("Toshiba TV", ToshibaTV, toshibatv_codeTable, sizeof(toshibatv_codeTable));
 8001c90:	23f0      	movs	r3, #240	@ 0xf0
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001c96:	f244 02bf 	movw	r2, #16575	@ 0x40bf
 8001c9a:	4917      	ldr	r1, [pc, #92]	@ (8001cf8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001c9c:	4817      	ldr	r0, [pc, #92]	@ (8001cfc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8001c9e:	f7ff fb13 	bl	80012c8 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi>
IR_CodeTable tochibavcr("Toshiba VCR", ToshibaVCR, toshibavcr_codeTable, sizeof(toshibavcr_codeTable));
 8001ca2:	2358      	movs	r3, #88	@ 0x58
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8001ca8:	f244 42bb 	movw	r2, #17595	@ 0x44bb
 8001cac:	4915      	ldr	r1, [pc, #84]	@ (8001d04 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8001cae:	4816      	ldr	r0, [pc, #88]	@ (8001d08 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8001cb0:	f7ff fb0a 	bl	80012c8 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi>
IR_CodeTable pioneerdvd("Pioneer DVD", PioneerDVD, pioneerdvd_codeTable, sizeof(pioneerdvd_codeTable));
 8001cb4:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8001cbc:	f24a 325c 	movw	r2, #41820	@ 0xa35c
 8001cc0:	4913      	ldr	r1, [pc, #76]	@ (8001d10 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8001cc2:	4814      	ldr	r0, [pc, #80]	@ (8001d14 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8001cc4:	f7ff fb00 	bl	80012c8 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi>
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	080086b0 	.word	0x080086b0
 8001cd4:	08008648 	.word	0x08008648
 8001cd8:	20000944 	.word	0x20000944
 8001cdc:	080087c8 	.word	0x080087c8
 8001ce0:	0800864c 	.word	0x0800864c
 8001ce4:	20000954 	.word	0x20000954
 8001ce8:	080087f0 	.word	0x080087f0
 8001cec:	08008650 	.word	0x08008650
 8001cf0:	20000964 	.word	0x20000964
 8001cf4:	080088f0 	.word	0x080088f0
 8001cf8:	0800865c 	.word	0x0800865c
 8001cfc:	20000974 	.word	0x20000974
 8001d00:	080089e0 	.word	0x080089e0
 8001d04:	08008668 	.word	0x08008668
 8001d08:	20000984 	.word	0x20000984
 8001d0c:	08008a38 	.word	0x08008a38
 8001d10:	08008674 	.word	0x08008674
 8001d14:	20000994 	.word	0x20000994

08001d18 <_GLOBAL__sub_I_mod>:
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001d20:	2001      	movs	r0, #1
 8001d22:	f7ff ff8b 	bl	8001c3c <_Z41__static_initialization_and_destruction_0ii>
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_ZN9IR_SenderC1Ev>:
#include "ir_sender.h"

GPIO_PinState mark = GPIO_PIN_SET;
GPIO_PinState space = GPIO_PIN_RESET;

IR_Sender::IR_Sender()
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fab7 	bl	80012a6 <_ZN7IR_BaseC1Ev>
{
	m_bTxCode = false;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2678 	strb.w	r2, [r3, #1656]	@ 0x678
}
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_ZN9IR_Sender10processingEv>:

/**	\brief	Process IR transmission.
 *
 */
void	IR_Sender::processing()
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
	if (m_bTxCode)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3678 	ldrb.w	r3, [r3, #1656]	@ 0x678
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <_ZN9IR_Sender10processingEv+0x18>
		sendFrame();
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f841 	bl	8001de4 <_ZN9IR_Sender9sendFrameEv>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <_ZN9IR_Sender8SendCodeEmb>:

/**	\brief	Send IR code.
 *
 */
void	IR_Sender::SendCode(uint32_t code, bool bLoopback)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	4613      	mov	r3, r2
 8001d78:	71fb      	strb	r3, [r7, #7]
	mark = bLoopback ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <_ZN9IR_Sender8SendCodeEmb+0x18>
 8001d80:	2200      	movs	r2, #0
 8001d82:	e000      	b.n	8001d86 <_ZN9IR_Sender8SendCodeEmb+0x1a>
 8001d84:	2201      	movs	r2, #1
 8001d86:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <_ZN9IR_Sender8SendCodeEmb+0x6c>)
 8001d88:	701a      	strb	r2, [r3, #0]
	space = bLoopback ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <_ZN9IR_Sender8SendCodeEmb+0x28>
 8001d90:	2201      	movs	r2, #1
 8001d92:	e000      	b.n	8001d96 <_ZN9IR_Sender8SendCodeEmb+0x2a>
 8001d94:	2200      	movs	r2, #0
 8001d96:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <_ZN9IR_Sender8SendCodeEmb+0x70>)
 8001d98:	701a      	strb	r2, [r3, #0]

	if (!m_bTxCode)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 3678 	ldrb.w	r3, [r3, #1656]	@ 0x678
 8001da0:	f083 0301 	eor.w	r3, r3, #1
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00f      	beq.n	8001dca <_ZN9IR_Sender8SendCodeEmb+0x5e>
	{
		m_code = code;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		m_state = ST_IDLE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		preSignalTick = sys_tick_10us;
 8001dba:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <_ZN9IR_Sender8SendCodeEmb+0x74>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	601a      	str	r2, [r3, #0]
		m_bTxCode = true;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2678 	strb.w	r2, [r3, #1656]	@ 0x678
	}
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000009 	.word	0x20000009
 8001ddc:	200009ac 	.word	0x200009ac
 8001de0:	200009b0 	.word	0x200009b0

08001de4 <_ZN9IR_Sender9sendFrameEv>:

/**	\brief	Send IR code.
 *
 */
void	IR_Sender::sendFrame()
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	uint32_t currTick = sys_tick_10us;
 8001dec:	4b5c      	ldr	r3, [pc, #368]	@ (8001f60 <_ZN9IR_Sender9sendFrameEv+0x17c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]
	uint32_t pulseWidth = currTick - preSignalTick;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	60bb      	str	r3, [r7, #8]

	switch(m_state)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3663 	ldrb.w	r3, [r3, #1635]	@ 0x663
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	f200 809d 	bhi.w	8001f42 <_ZN9IR_Sender9sendFrameEv+0x15e>
 8001e08:	a201      	add	r2, pc, #4	@ (adr r2, 8001e10 <_ZN9IR_Sender9sendFrameEv+0x2c>)
 8001e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0e:	bf00      	nop
 8001e10:	08001e2d 	.word	0x08001e2d
 8001e14:	08001e4b 	.word	0x08001e4b
 8001e18:	08001e71 	.word	0x08001e71
 8001e1c:	08001e9f 	.word	0x08001e9f
 8001e20:	08001ec3 	.word	0x08001ec3
 8001e24:	08001f43 	.word	0x08001f43
 8001e28:	08001f25 	.word	0x08001f25
	{
	case ST_IDLE:
		HAL_GPIO_WritePin(IRDA_GPIO_Port, IRDA_Pin, mark);
 8001e2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f64 <_ZN9IR_Sender9sendFrameEv+0x180>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	2104      	movs	r1, #4
 8001e34:	484c      	ldr	r0, [pc, #304]	@ (8001f68 <_ZN9IR_Sender9sendFrameEv+0x184>)
 8001e36:	f001 f8c9 	bl	8002fcc <HAL_GPIO_WritePin>
		preSignalTick = currTick;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	601a      	str	r2, [r3, #0]
		m_state = ST_START;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		break;
 8001e48:	e086      	b.n	8001f58 <_ZN9IR_Sender9sendFrameEv+0x174>

	case ST_START:
		if (pulseWidth >= 16*NEC_TICK)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f5b3 7f60 	cmp.w	r3, #896	@ 0x380
 8001e50:	d379      	bcc.n	8001f46 <_ZN9IR_Sender9sendFrameEv+0x162>
		{
			HAL_GPIO_WritePin(IRDA_GPIO_Port, IRDA_Pin, space);
 8001e52:	4b46      	ldr	r3, [pc, #280]	@ (8001f6c <_ZN9IR_Sender9sendFrameEv+0x188>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	2104      	movs	r1, #4
 8001e5a:	4843      	ldr	r0, [pc, #268]	@ (8001f68 <_ZN9IR_Sender9sendFrameEv+0x184>)
 8001e5c:	f001 f8b6 	bl	8002fcc <HAL_GPIO_WritePin>
			preSignalTick = currTick;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	601a      	str	r2, [r3, #0]
			m_state = NEC_LEADING;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		}
		break;
 8001e6e:	e06a      	b.n	8001f46 <_ZN9IR_Sender9sendFrameEv+0x162>

	case NEC_LEADING:
		if (pulseWidth >= 8*NEC_TICK)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001e76:	d368      	bcc.n	8001f4a <_ZN9IR_Sender9sendFrameEv+0x166>
		{
			HAL_GPIO_WritePin(IRDA_GPIO_Port, IRDA_Pin, mark);
 8001e78:	4b3a      	ldr	r3, [pc, #232]	@ (8001f64 <_ZN9IR_Sender9sendFrameEv+0x180>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	2104      	movs	r1, #4
 8001e80:	4839      	ldr	r0, [pc, #228]	@ (8001f68 <_ZN9IR_Sender9sendFrameEv+0x184>)
 8001e82:	f001 f8a3 	bl	8002fcc <HAL_GPIO_WritePin>
			preSignalTick = currTick;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	601a      	str	r2, [r3, #0]
			m_bitNo = 0;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f8c3 2664 	str.w	r2, [r3, #1636]	@ 0x664
			m_state = NEC_DATAFRAME;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2203      	movs	r2, #3
 8001e98:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		}
		break;
 8001e9c:	e055      	b.n	8001f4a <_ZN9IR_Sender9sendFrameEv+0x166>

	case NEC_DATAFRAME:
		if (pulseWidth >= NEC_TICK)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b37      	cmp	r3, #55	@ 0x37
 8001ea2:	d954      	bls.n	8001f4e <_ZN9IR_Sender9sendFrameEv+0x16a>
		{
			HAL_GPIO_WritePin(IRDA_GPIO_Port, IRDA_Pin, space);
 8001ea4:	4b31      	ldr	r3, [pc, #196]	@ (8001f6c <_ZN9IR_Sender9sendFrameEv+0x188>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2104      	movs	r1, #4
 8001eac:	482e      	ldr	r0, [pc, #184]	@ (8001f68 <_ZN9IR_Sender9sendFrameEv+0x184>)
 8001eae:	f001 f88d 	bl	8002fcc <HAL_GPIO_WritePin>
			preSignalTick = currTick;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	601a      	str	r2, [r3, #0]
			m_state = NEC_DATABIT;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2204      	movs	r2, #4
 8001ebc:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		}
		break;
 8001ec0:	e045      	b.n	8001f4e <_ZN9IR_Sender9sendFrameEv+0x16a>

	case NEC_DATABIT:
		if (pulseWidth >= ((m_code & 1) ? (3*NEC_TICK) : NEC_TICK))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <_ZN9IR_Sender9sendFrameEv+0xf0>
 8001ed0:	22a8      	movs	r2, #168	@ 0xa8
 8001ed2:	e000      	b.n	8001ed6 <_ZN9IR_Sender9sendFrameEv+0xf2>
 8001ed4:	2238      	movs	r2, #56	@ 0x38
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d83a      	bhi.n	8001f52 <_ZN9IR_Sender9sendFrameEv+0x16e>
		{
			HAL_GPIO_WritePin(IRDA_GPIO_Port, IRDA_Pin, mark);
 8001edc:	4b21      	ldr	r3, [pc, #132]	@ (8001f64 <_ZN9IR_Sender9sendFrameEv+0x180>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2104      	movs	r1, #4
 8001ee4:	4820      	ldr	r0, [pc, #128]	@ (8001f68 <_ZN9IR_Sender9sendFrameEv+0x184>)
 8001ee6:	f001 f871 	bl	8002fcc <HAL_GPIO_WritePin>
			preSignalTick = currTick;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	601a      	str	r2, [r3, #0]

			m_code >>= 1;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8001ef6:	085a      	lsrs	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
			m_state = (++m_bitNo == 32) ? NEC_DONE : NEC_DATAFRAME;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f8d3 3664 	ldr.w	r3, [r3, #1636]	@ 0x664
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f8c3 2664 	str.w	r2, [r3, #1636]	@ 0x664
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f8d3 3664 	ldr.w	r3, [r3, #1636]	@ 0x664
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	d101      	bne.n	8001f1a <_ZN9IR_Sender9sendFrameEv+0x136>
 8001f16:	2206      	movs	r2, #6
 8001f18:	e000      	b.n	8001f1c <_ZN9IR_Sender9sendFrameEv+0x138>
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f883 2663 	strb.w	r2, [r3, #1635]	@ 0x663
		}
		break;
 8001f22:	e016      	b.n	8001f52 <_ZN9IR_Sender9sendFrameEv+0x16e>

	case NEC_DONE:
		if (pulseWidth >= NEC_TICK)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b37      	cmp	r3, #55	@ 0x37
 8001f28:	d915      	bls.n	8001f56 <_ZN9IR_Sender9sendFrameEv+0x172>
		{
			HAL_GPIO_WritePin(IRDA_GPIO_Port, IRDA_Pin, space);
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <_ZN9IR_Sender9sendFrameEv+0x188>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2104      	movs	r1, #4
 8001f32:	480d      	ldr	r0, [pc, #52]	@ (8001f68 <_ZN9IR_Sender9sendFrameEv+0x184>)
 8001f34:	f001 f84a 	bl	8002fcc <HAL_GPIO_WritePin>
			m_bTxCode = false;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2678 	strb.w	r2, [r3, #1656]	@ 0x678
		}
		break;
 8001f40:	e009      	b.n	8001f56 <_ZN9IR_Sender9sendFrameEv+0x172>

	default:
		break;
 8001f42:	bf00      	nop
 8001f44:	e008      	b.n	8001f58 <_ZN9IR_Sender9sendFrameEv+0x174>
		break;
 8001f46:	bf00      	nop
 8001f48:	e006      	b.n	8001f58 <_ZN9IR_Sender9sendFrameEv+0x174>
		break;
 8001f4a:	bf00      	nop
 8001f4c:	e004      	b.n	8001f58 <_ZN9IR_Sender9sendFrameEv+0x174>
		break;
 8001f4e:	bf00      	nop
 8001f50:	e002      	b.n	8001f58 <_ZN9IR_Sender9sendFrameEv+0x174>
		break;
 8001f52:	bf00      	nop
 8001f54:	e000      	b.n	8001f58 <_ZN9IR_Sender9sendFrameEv+0x174>
		break;
 8001f56:	bf00      	nop
	}
}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200009b0 	.word	0x200009b0
 8001f64:	20000009 	.word	0x20000009
 8001f68:	40021800 	.word	0x40021800
 8001f6c:	200009ac 	.word	0x200009ac

08001f70 <_ZN9IR_TimingC1Ev>:
uint32_t sys_tick_10us = 0;

/**	\brief Constructor.
 *
 */
IR_Timing::IR_Timing()
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
{
	m_head = 0;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	605a      	str	r2, [r3, #4]
	m_tail = 0;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
	m_size = 0;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
	preSignalTick = 0;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
}
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <_ZN9IR_Timing3putE8IR_STATE>:

/**	\brief	Save state and time in queue.
 *
 */
void IR_Timing::put(IR_STATE state)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	70fb      	strb	r3, [r7, #3]
	if (m_size >= IR_TIME_NO)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2bc7      	cmp	r3, #199	@ 0xc7
 8001fb2:	dd01      	ble.n	8001fb8 <_ZN9IR_Timing3putE8IR_STATE+0x18>
		Error_Handler();
 8001fb4:	f7fe fde8 	bl	8000b88 <Error_Handler>

	m_timing[m_tail].time = sys_tick_10us;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	4b15      	ldr	r3, [pc, #84]	@ (8002014 <_ZN9IR_Timing3putE8IR_STATE+0x74>)
 8001fbe:	6819      	ldr	r1, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3202      	adds	r2, #2
 8001fc4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	m_timing[m_tail].state = state;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	3302      	adds	r3, #2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	78fa      	ldrb	r2, [r7, #3]
 8001fd6:	711a      	strb	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd8:	b672      	cpsid	i
}
 8001fda:	bf00      	nop

	__disable_irq();
	m_size++;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	60da      	str	r2, [r3, #12]
	if (++m_tail >= IR_TIME_NO)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2bc7      	cmp	r3, #199	@ 0xc7
 8001ff6:	bfcc      	ite	gt
 8001ff8:	2301      	movgt	r3, #1
 8001ffa:	2300      	movle	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <_ZN9IR_Timing3putE8IR_STATE+0x68>
		m_tail = 0;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8002008:	b662      	cpsie	i
}
 800200a:	bf00      	nop
	__enable_irq();
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	200009b0 	.word	0x200009b0

08002018 <_ZN9IR_Timing3getEv>:

/**	\brief	Get state and time from queue.
 *
 */
IrSignal IR_Timing::get()
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
	const IrSignal nul = {0, SPACE};
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	2300      	movs	r3, #0
 8002028:	753b      	strb	r3, [r7, #20]

	if (m_size == 0)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d108      	bne.n	8002044 <_ZN9IR_Timing3getEv+0x2c>
		return nul;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	461a      	mov	r2, r3
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800203e:	e882 0003 	stmia.w	r2, {r0, r1}
 8002042:	e02d      	b.n	80020a0 <_ZN9IR_Timing3getEv+0x88>

	IrSignal time = m_timing[m_head];
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	6839      	ldr	r1, [r7, #0]
 800204a:	3302      	adds	r3, #2
 800204c:	f107 0208 	add.w	r2, r7, #8
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	440b      	add	r3, r1
 8002054:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002058:	e882 0003 	stmia.w	r2, {r0, r1}
  __ASM volatile ("cpsid i" : : : "memory");
 800205c:	b672      	cpsid	i
}
 800205e:	bf00      	nop

	__disable_irq();
	m_size--;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	1e5a      	subs	r2, r3, #1
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	60da      	str	r2, [r3, #12]
	if (++m_head >= IR_TIME_NO)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2bc7      	cmp	r3, #199	@ 0xc7
 800207a:	bfcc      	ite	gt
 800207c:	2301      	movgt	r3, #1
 800207e:	2300      	movle	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <_ZN9IR_Timing3getEv+0x74>
		m_head = 0;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800208c:	b662      	cpsie	i
}
 800208e:	bf00      	nop
	__enable_irq();

	return time;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	461a      	mov	r2, r3
 8002094:	f107 0308 	add.w	r3, r7, #8
 8002098:	e893 0003 	ldmia.w	r3, {r0, r1}
 800209c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_TIM_PeriodElapsedCallback>:

/**	\brief	Timer period elapsed callback function.
 *
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	if (htim == &htim6)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a07      	ldr	r2, [pc, #28]	@ (80020d4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d104      	bne.n	80020c6 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		sys_tick_10us++;
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a05      	ldr	r2, [pc, #20]	@ (80020d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80020c4:	6013      	str	r3, [r2, #0]
	}
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000368 	.word	0x20000368
 80020d8:	200009b0 	.word	0x200009b0

080020dc <_ZN11IR_ReceiverC1Ev>:
#define LENGTH(x) ((int) (sizeof(x)/sizeof(x[0])))

/** \brief	IR code receiver
 *
 */
class IR_Receiver : public IR_Base
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff f8dd 	bl	80012a6 <_ZN7IR_BaseC1Ev>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <usermain>:
/**	usermain() in C++.
 *
 *	called by main() in C.
 */
void usermain()
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	// start timer with 10us interrupt interval.
	HAL_TIM_Base_Start_IT(&htim6);
 80020fc:	480d      	ldr	r0, [pc, #52]	@ (8002134 <usermain+0x3c>)
 80020fe:	f002 fe9d 	bl	8004e3c <HAL_TIM_Base_Start_IT>

	// initial next wait state
	waitState = (HAL_GPIO_ReadPin(IRDA_GPIO_Port, IRDA_Pin) == GPIO_PIN_SET) ? MARK : SPACE;
 8002102:	2104      	movs	r1, #4
 8002104:	480c      	ldr	r0, [pc, #48]	@ (8002138 <usermain+0x40>)
 8002106:	f000 ff49 	bl	8002f9c <HAL_GPIO_ReadPin>
 800210a:	4603      	mov	r3, r0
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <usermain+0x1c>
 8002110:	2201      	movs	r2, #1
 8002112:	e000      	b.n	8002116 <usermain+0x1e>
 8002114:	2200      	movs	r2, #0
 8002116:	4b09      	ldr	r3, [pc, #36]	@ (800213c <usermain+0x44>)
 8002118:	701a      	strb	r2, [r3, #0]

	init_oled();
 800211a:	f000 f843 	bl	80021a4 <_Z9init_oledv>

	while(1)
	{
		flash_LD1();				// flashing LD1 in 1 Hz
 800211e:	f000 f887 	bl	8002230 <_Z9flash_LD1v>
		ir_receiver.processing();	// receive IR signals
 8002122:	4807      	ldr	r0, [pc, #28]	@ (8002140 <usermain+0x48>)
 8002124:	f7ff f958 	bl	80013d8 <_ZN11IR_Receiver10processingEv>
		ir_sender.processing();		// transmit IR code
 8002128:	4806      	ldr	r0, [pc, #24]	@ (8002144 <usermain+0x4c>)
 800212a:	f7ff fe0e 	bl	8001d4a <_ZN9IR_Sender10processingEv>
		flash_LD1();				// flashing LD1 in 1 Hz
 800212e:	bf00      	nop
 8002130:	e7f5      	b.n	800211e <usermain+0x26>
 8002132:	bf00      	nop
 8002134:	20000368 	.word	0x20000368
 8002138:	40021800 	.word	0x40021800
 800213c:	200009b4 	.word	0x200009b4
 8002140:	200009b8 	.word	0x200009b8
 8002144:	20001034 	.word	0x20001034

08002148 <HAL_GPIO_EXTI_Callback>:

/**	\brief	EXTI handler for IR and user button.
 *
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IRDA_Pin)
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	2b04      	cmp	r3, #4
 8002156:	d10f      	bne.n	8002178 <HAL_GPIO_EXTI_Callback+0x30>
	{
		ir_receiver.put(waitState);
 8002158:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <HAL_GPIO_EXTI_Callback+0x4c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	480e      	ldr	r0, [pc, #56]	@ (8002198 <HAL_GPIO_EXTI_Callback+0x50>)
 8002160:	f7ff ff1e 	bl	8001fa0 <_ZN9IR_Timing3putE8IR_STATE>
		waitState = (waitState == SPACE) ? MARK : SPACE;
 8002164:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_GPIO_EXTI_Callback+0x28>
 800216c:	2201      	movs	r2, #1
 800216e:	e000      	b.n	8002172 <HAL_GPIO_EXTI_Callback+0x2a>
 8002170:	2200      	movs	r2, #0
 8002172:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002174:	701a      	strb	r2, [r3, #0]
	}
	else if (GPIO_Pin == BTN_Pin)
	{
		ir_sender.SendCode(0xe916ff00, IR_LOOPBACK);
	}
}
 8002176:	e008      	b.n	800218a <HAL_GPIO_EXTI_Callback+0x42>
	else if (GPIO_Pin == BTN_Pin)
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800217e:	d104      	bne.n	800218a <HAL_GPIO_EXTI_Callback+0x42>
		ir_sender.SendCode(0xe916ff00, IR_LOOPBACK);
 8002180:	2201      	movs	r2, #1
 8002182:	4906      	ldr	r1, [pc, #24]	@ (800219c <HAL_GPIO_EXTI_Callback+0x54>)
 8002184:	4806      	ldr	r0, [pc, #24]	@ (80021a0 <HAL_GPIO_EXTI_Callback+0x58>)
 8002186:	f7ff fdf1 	bl	8001d6c <_ZN9IR_Sender8SendCodeEmb>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200009b4 	.word	0x200009b4
 8002198:	200009b8 	.word	0x200009b8
 800219c:	e916ff00 	.word	0xe916ff00
 80021a0:	20001034 	.word	0x20001034

080021a4 <_Z9init_oledv>:

/**	\brief	Initial OLED display.
 *
 */
void	init_oled()
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
	// Init lcd using one of the stm32HAL i2c typedefs
	ssd1306_Init(&oled_i2c);
 80021aa:	481e      	ldr	r0, [pc, #120]	@ (8002224 <_Z9init_oledv+0x80>)
 80021ac:	f004 fc78 	bl	8006aa0 <ssd1306_Init>

	// Write data to local screenbuffer
	ssd1306_printf(Font_5x7, White, "IR code on 0.96\" OLED");
 80021b0:	491d      	ldr	r1, [pc, #116]	@ (8002228 <_Z9init_oledv+0x84>)
 80021b2:	4b1e      	ldr	r3, [pc, #120]	@ (800222c <_Z9init_oledv+0x88>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	c903      	ldmia	r1, {r0, r1}
 80021b8:	f004 ff56 	bl	8007068 <ssd1306_printf>

	char ch=' ';
 80021bc:	2320      	movs	r3, #32
 80021be:	73fb      	strb	r3, [r7, #15]
	for (int y=2; y<8; y++)
 80021c0:	2302      	movs	r3, #2
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	e024      	b.n	8002210 <_Z9init_oledv+0x6c>
	{
		for (int x=0; x<21; x++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	e01b      	b.n	8002204 <_Z9init_oledv+0x60>
		{
			ssd1306_SetCursor(x*Font_5x7.FontWidth, y*Font_5x7.FontHeight);
 80021cc:	4b16      	ldr	r3, [pc, #88]	@ (8002228 <_Z9init_oledv+0x84>)
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	fb12 f303 	smulbb	r3, r2, r3
 80021d8:	b2d8      	uxtb	r0, r3
 80021da:	4b13      	ldr	r3, [pc, #76]	@ (8002228 <_Z9init_oledv+0x84>)
 80021dc:	785a      	ldrb	r2, [r3, #1]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	fb12 f303 	smulbb	r3, r2, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	4619      	mov	r1, r3
 80021ea:	f004 ff25 	bl	8007038 <ssd1306_SetCursor>
			ssd1306_WriteChar(ch++, Font_5x7, White);
 80021ee:	7bf8      	ldrb	r0, [r7, #15]
 80021f0:	1c43      	adds	r3, r0, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
 80021f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002228 <_Z9init_oledv+0x84>)
 80021f6:	2301      	movs	r3, #1
 80021f8:	ca06      	ldmia	r2, {r1, r2}
 80021fa:	f004 fe27 	bl	8006e4c <ssd1306_WriteChar>
		for (int x=0; x<21; x++)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3301      	adds	r3, #1
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b14      	cmp	r3, #20
 8002208:	dde0      	ble.n	80021cc <_Z9init_oledv+0x28>
	for (int y=2; y<8; y++)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	3301      	adds	r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b07      	cmp	r3, #7
 8002214:	ddd7      	ble.n	80021c6 <_Z9init_oledv+0x22>
		}
	}

	// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&oled_i2c);
 8002216:	4803      	ldr	r0, [pc, #12]	@ (8002224 <_Z9init_oledv+0x80>)
 8002218:	f004 fd86 	bl	8006d28 <ssd1306_UpdateScreen>
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	200002c4 	.word	0x200002c4
 8002228:	20000014 	.word	0x20000014
 800222c:	08008680 	.word	0x08008680

08002230 <_Z9flash_LD1v>:

/**	\brief	Flashing LD1 in 1 Hz.
 *
 */
void	flash_LD1()
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
	const uint32_t HALF_INTERVAL = 500L;
 8002236:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800223a:	607b      	str	r3, [r7, #4]
	// Toggle LD1 per 0.5 sec.
#if BUSY_WAIT
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	HAL_Delay(500L);
#else
	uint32_t sysTick = HAL_GetTick();
 800223c:	f000 f89a 	bl	8002374 <HAL_GetTick>
 8002240:	6038      	str	r0, [r7, #0]
	if ((sysTick - lastLedToggleTime) >= HALF_INTERVAL)
 8002242:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <_Z9flash_LD1v+0x38>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800224e:	d306      	bcc.n	800225e <_Z9flash_LD1v+0x2e>
	{
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002250:	2101      	movs	r1, #1
 8002252:	4806      	ldr	r0, [pc, #24]	@ (800226c <_Z9flash_LD1v+0x3c>)
 8002254:	f000 fed3 	bl	8002ffe <HAL_GPIO_TogglePin>
		lastLedToggleTime = sysTick;
 8002258:	4a03      	ldr	r2, [pc, #12]	@ (8002268 <_Z9flash_LD1v+0x38>)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6013      	str	r3, [r2, #0]
	}
#endif
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200016b4 	.word	0x200016b4
 800226c:	40020400 	.word	0x40020400

08002270 <__io_putchar>:

/**	\brief Retarget to USART3.
 *
 */
extern "C" int __io_putchar(int ch)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
#if ENABLE_IO_PUTCHAR
	HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
#endif
	return 0;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <_Z41__static_initialization_and_destruction_0ii>:
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d10a      	bne.n	80022ae <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800229e:	4293      	cmp	r3, r2
 80022a0:	d105      	bne.n	80022ae <_Z41__static_initialization_and_destruction_0ii+0x26>
IR_Receiver ir_receiver;
 80022a2:	4805      	ldr	r0, [pc, #20]	@ (80022b8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80022a4:	f7ff ff1a 	bl	80020dc <_ZN11IR_ReceiverC1Ev>
IR_Sender ir_sender;
 80022a8:	4804      	ldr	r0, [pc, #16]	@ (80022bc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80022aa:	f7ff fd3d 	bl	8001d28 <_ZN9IR_SenderC1Ev>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200009b8 	.word	0x200009b8
 80022bc:	20001034 	.word	0x20001034

080022c0 <_GLOBAL__sub_I_waitState>:
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80022c8:	2001      	movs	r0, #1
 80022ca:	f7ff ffdd 	bl	8002288 <_Z41__static_initialization_and_destruction_0ii>
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d4:	2003      	movs	r0, #3
 80022d6:	f000 f94d 	bl	8002574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022da:	2000      	movs	r0, #0
 80022dc:	f000 f806 	bl	80022ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e0:	f7fe fc58 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f4:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_InitTick+0x54>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b12      	ldr	r3, [pc, #72]	@ (8002344 <HAL_InitTick+0x58>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002302:	fbb3 f3f1 	udiv	r3, r3, r1
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f967 	bl	80025de <HAL_SYSTICK_Config>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e00e      	b.n	8002338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b0f      	cmp	r3, #15
 800231e:	d80a      	bhi.n	8002336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002320:	2200      	movs	r2, #0
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002328:	f000 f92f 	bl	800258a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800232c:	4a06      	ldr	r2, [pc, #24]	@ (8002348 <HAL_InitTick+0x5c>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	e000      	b.n	8002338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000000 	.word	0x20000000
 8002344:	20000010 	.word	0x20000010
 8002348:	2000000c 	.word	0x2000000c

0800234c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002350:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_IncTick+0x20>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_IncTick+0x24>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4413      	add	r3, r2
 800235c:	4a04      	ldr	r2, [pc, #16]	@ (8002370 <HAL_IncTick+0x24>)
 800235e:	6013      	str	r3, [r2, #0]
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000010 	.word	0x20000010
 8002370:	200016b8 	.word	0x200016b8

08002374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return uwTick;
 8002378:	4b03      	ldr	r3, [pc, #12]	@ (8002388 <HAL_GetTick+0x14>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	200016b8 	.word	0x200016b8

0800238c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002394:	f7ff ffee 	bl	8002374 <HAL_GetTick>
 8002398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023a4:	d005      	beq.n	80023b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023a6:	4b0a      	ldr	r3, [pc, #40]	@ (80023d0 <HAL_Delay+0x44>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4413      	add	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023b2:	bf00      	nop
 80023b4:	f7ff ffde 	bl	8002374 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d8f7      	bhi.n	80023b4 <HAL_Delay+0x28>
  {
  }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000010 	.word	0x20000010

080023d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <__NVIC_SetPriorityGrouping+0x40>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023f0:	4013      	ands	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023fc:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002402:	4a04      	ldr	r2, [pc, #16]	@ (8002414 <__NVIC_SetPriorityGrouping+0x40>)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	60d3      	str	r3, [r2, #12]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000ed00 	.word	0xe000ed00
 8002418:	05fa0000 	.word	0x05fa0000

0800241c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002420:	4b04      	ldr	r3, [pc, #16]	@ (8002434 <__NVIC_GetPriorityGrouping+0x18>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	f003 0307 	and.w	r3, r3, #7
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	db0b      	blt.n	8002462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	4907      	ldr	r1, [pc, #28]	@ (8002470 <__NVIC_EnableIRQ+0x38>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2001      	movs	r0, #1
 800245a:	fa00 f202 	lsl.w	r2, r0, r2
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000e100 	.word	0xe000e100

08002474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db0a      	blt.n	800249e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	490c      	ldr	r1, [pc, #48]	@ (80024c0 <__NVIC_SetPriority+0x4c>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	0112      	lsls	r2, r2, #4
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	440b      	add	r3, r1
 8002498:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800249c:	e00a      	b.n	80024b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4908      	ldr	r1, [pc, #32]	@ (80024c4 <__NVIC_SetPriority+0x50>)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	3b04      	subs	r3, #4
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	440b      	add	r3, r1
 80024b2:	761a      	strb	r2, [r3, #24]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000e100 	.word	0xe000e100
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	@ 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f1c3 0307 	rsb	r3, r3, #7
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	bf28      	it	cs
 80024e6:	2304      	movcs	r3, #4
 80024e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3304      	adds	r3, #4
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d902      	bls.n	80024f8 <NVIC_EncodePriority+0x30>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3b03      	subs	r3, #3
 80024f6:	e000      	b.n	80024fa <NVIC_EncodePriority+0x32>
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	401a      	ands	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002510:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43d9      	mvns	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	4313      	orrs	r3, r2
         );
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	@ 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002540:	d301      	bcc.n	8002546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002542:	2301      	movs	r3, #1
 8002544:	e00f      	b.n	8002566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002546:	4a0a      	ldr	r2, [pc, #40]	@ (8002570 <SysTick_Config+0x40>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254e:	210f      	movs	r1, #15
 8002550:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002554:	f7ff ff8e 	bl	8002474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002558:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <SysTick_Config+0x40>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255e:	4b04      	ldr	r3, [pc, #16]	@ (8002570 <SysTick_Config+0x40>)
 8002560:	2207      	movs	r2, #7
 8002562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	e000e010 	.word	0xe000e010

08002574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff29 	bl	80023d4 <__NVIC_SetPriorityGrouping>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800259c:	f7ff ff3e 	bl	800241c <__NVIC_GetPriorityGrouping>
 80025a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	6978      	ldr	r0, [r7, #20]
 80025a8:	f7ff ff8e 	bl	80024c8 <NVIC_EncodePriority>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff5d 	bl	8002474 <__NVIC_SetPriority>
}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff31 	bl	8002438 <__NVIC_EnableIRQ>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ffa2 	bl	8002530 <SysTick_Config>
 80025ec:	4603      	mov	r3, r0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06a      	b.n	80026e0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002610:	2b00      	cmp	r3, #0
 8002612:	d106      	bne.n	8002622 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2223      	movs	r2, #35	@ 0x23
 8002618:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7fe f80d 	bl	800063c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002622:	4b31      	ldr	r3, [pc, #196]	@ (80026e8 <HAL_ETH_Init+0xf0>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	4a30      	ldr	r2, [pc, #192]	@ (80026e8 <HAL_ETH_Init+0xf0>)
 8002628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800262c:	6453      	str	r3, [r2, #68]	@ 0x44
 800262e:	4b2e      	ldr	r3, [pc, #184]	@ (80026e8 <HAL_ETH_Init+0xf0>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800263a:	4b2c      	ldr	r3, [pc, #176]	@ (80026ec <HAL_ETH_Init+0xf4>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4a2b      	ldr	r2, [pc, #172]	@ (80026ec <HAL_ETH_Init+0xf4>)
 8002640:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002644:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002646:	4b29      	ldr	r3, [pc, #164]	@ (80026ec <HAL_ETH_Init+0xf4>)
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	4927      	ldr	r1, [pc, #156]	@ (80026ec <HAL_ETH_Init+0xf4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002654:	4b25      	ldr	r3, [pc, #148]	@ (80026ec <HAL_ETH_Init+0xf4>)
 8002656:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800266e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002670:	f7ff fe80 	bl	8002374 <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002676:	e011      	b.n	800269c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002678:	f7ff fe7c 	bl	8002374 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002686:	d909      	bls.n	800269c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2204      	movs	r2, #4
 800268c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	22e0      	movs	r2, #224	@ 0xe0
 8002694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e021      	b.n	80026e0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1e4      	bne.n	8002678 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f958 	bl	8002964 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f9ff 	bl	8002ab8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fa55 	bl	8002b6a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	461a      	mov	r2, r3
 80026c6:	2100      	movs	r1, #0
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f9bd 	bl	8002a48 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2210      	movs	r2, #16
 80026da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40013800 	.word	0x40013800

080026f0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4b51      	ldr	r3, [pc, #324]	@ (800284c <ETH_SetMACConfig+0x15c>)
 8002706:	4013      	ands	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	7c1b      	ldrb	r3, [r3, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d102      	bne.n	8002718 <ETH_SetMACConfig+0x28>
 8002712:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002716:	e000      	b.n	800271a <ETH_SetMACConfig+0x2a>
 8002718:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	7c5b      	ldrb	r3, [r3, #17]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <ETH_SetMACConfig+0x38>
 8002722:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002726:	e000      	b.n	800272a <ETH_SetMACConfig+0x3a>
 8002728:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800272a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002730:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	7fdb      	ldrb	r3, [r3, #31]
 8002736:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002738:	431a      	orrs	r2, r3
                        macconf->Speed |
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800273e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	7f92      	ldrb	r2, [r2, #30]
 8002744:	2a00      	cmp	r2, #0
 8002746:	d102      	bne.n	800274e <ETH_SetMACConfig+0x5e>
 8002748:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800274c:	e000      	b.n	8002750 <ETH_SetMACConfig+0x60>
 800274e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002750:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	7f1b      	ldrb	r3, [r3, #28]
 8002756:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002758:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800275e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	791b      	ldrb	r3, [r3, #4]
 8002764:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002766:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800276e:	2a00      	cmp	r2, #0
 8002770:	d102      	bne.n	8002778 <ETH_SetMACConfig+0x88>
 8002772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002776:	e000      	b.n	800277a <ETH_SetMACConfig+0x8a>
 8002778:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800277a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	7bdb      	ldrb	r3, [r3, #15]
 8002780:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002782:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002788:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002790:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002792:	4313      	orrs	r3, r2
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027aa:	2001      	movs	r0, #1
 80027ac:	f7ff fdee 	bl	800238c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80027c6:	4013      	ands	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ce:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	d101      	bne.n	80027de <ETH_SetMACConfig+0xee>
 80027da:	2280      	movs	r2, #128	@ 0x80
 80027dc:	e000      	b.n	80027e0 <ETH_SetMACConfig+0xf0>
 80027de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027e0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80027ee:	2a01      	cmp	r2, #1
 80027f0:	d101      	bne.n	80027f6 <ETH_SetMACConfig+0x106>
 80027f2:	2208      	movs	r2, #8
 80027f4:	e000      	b.n	80027f8 <ETH_SetMACConfig+0x108>
 80027f6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80027f8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002800:	2a01      	cmp	r2, #1
 8002802:	d101      	bne.n	8002808 <ETH_SetMACConfig+0x118>
 8002804:	2204      	movs	r2, #4
 8002806:	e000      	b.n	800280a <ETH_SetMACConfig+0x11a>
 8002808:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800280a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002812:	2a01      	cmp	r2, #1
 8002814:	d101      	bne.n	800281a <ETH_SetMACConfig+0x12a>
 8002816:	2202      	movs	r2, #2
 8002818:	e000      	b.n	800281c <ETH_SetMACConfig+0x12c>
 800281a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800281c:	4313      	orrs	r3, r2
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002834:	2001      	movs	r0, #1
 8002836:	f7ff fda9 	bl	800238c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	619a      	str	r2, [r3, #24]
}
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	ff20810f 	.word	0xff20810f

08002850 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4b3d      	ldr	r3, [pc, #244]	@ (8002960 <ETH_SetDMAConfig+0x110>)
 800286a:	4013      	ands	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	7b1b      	ldrb	r3, [r3, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <ETH_SetDMAConfig+0x2c>
 8002876:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800287a:	e000      	b.n	800287e <ETH_SetDMAConfig+0x2e>
 800287c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	7b5b      	ldrb	r3, [r3, #13]
 8002882:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002884:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	7f52      	ldrb	r2, [r2, #29]
 800288a:	2a00      	cmp	r2, #0
 800288c:	d102      	bne.n	8002894 <ETH_SetDMAConfig+0x44>
 800288e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002892:	e000      	b.n	8002896 <ETH_SetDMAConfig+0x46>
 8002894:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002896:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	7b9b      	ldrb	r3, [r3, #14]
 800289c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800289e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	7f1b      	ldrb	r3, [r3, #28]
 80028aa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80028ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	7f9b      	ldrb	r3, [r3, #30]
 80028b2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028b4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028c2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028c4:	4313      	orrs	r3, r2
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028d4:	461a      	mov	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028e6:	2001      	movs	r0, #1
 80028e8:	f7ff fd50 	bl	800238c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028f4:	461a      	mov	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	791b      	ldrb	r3, [r3, #4]
 80028fe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002904:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800290a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002910:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002918:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800291a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002920:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002922:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002928:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002932:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002936:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002944:	2001      	movs	r0, #1
 8002946:	f7ff fd21 	bl	800238c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002952:	461a      	mov	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	f8de3f23 	.word	0xf8de3f23

08002964 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b0a6      	sub	sp, #152	@ 0x98
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800296c:	2301      	movs	r3, #1
 800296e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002978:	2300      	movs	r3, #0
 800297a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002994:	2300      	movs	r3, #0
 8002996:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800299a:	2300      	movs	r3, #0
 800299c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029a0:	2300      	movs	r3, #0
 80029a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029dc:	4619      	mov	r1, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff fe86 	bl	80026f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80029e4:	2301      	movs	r3, #1
 80029e6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80029e8:	2301      	movs	r3, #1
 80029ea:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80029f2:	2301      	movs	r3, #1
 80029f4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a10:	2301      	movs	r3, #1
 8002a12:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a18:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a1e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a24:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a34:	f107 0308 	add.w	r3, r7, #8
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff ff08 	bl	8002850 <ETH_SetDMAConfig>
}
 8002a40:	bf00      	nop
 8002a42:	3798      	adds	r7, #152	@ 0x98
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3305      	adds	r3, #5
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	3204      	adds	r2, #4
 8002a60:	7812      	ldrb	r2, [r2, #0]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	4b11      	ldr	r3, [pc, #68]	@ (8002ab0 <ETH_MACAddressConfig+0x68>)
 8002a6a:	4413      	add	r3, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3303      	adds	r3, #3
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	061a      	lsls	r2, r3, #24
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	041b      	lsls	r3, r3, #16
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3301      	adds	r3, #1
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	7812      	ldrb	r2, [r2, #0]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <ETH_MACAddressConfig+0x6c>)
 8002a9a:	4413      	add	r3, r2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	6013      	str	r3, [r2, #0]
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40028040 	.word	0x40028040
 8002ab4:	40028044 	.word	0x40028044

08002ab8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	e03e      	b.n	8002b44 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68d9      	ldr	r1, [r3, #12]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	440b      	add	r3, r1
 8002ad6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2200      	movs	r2, #0
 8002aee:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	3206      	adds	r2, #6
 8002af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d80c      	bhi.n	8002b28 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68d9      	ldr	r1, [r3, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	440b      	add	r3, r1
 8002b20:	461a      	mov	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	e004      	b.n	8002b32 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3301      	adds	r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d9bd      	bls.n	8002ac6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b5c:	611a      	str	r2, [r3, #16]
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	e046      	b.n	8002c06 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6919      	ldr	r1, [r3, #16]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2200      	movs	r2, #0
 8002b94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2200      	movs	r2, #0
 8002bac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002bb4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002bbc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	3212      	adds	r2, #18
 8002bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d80c      	bhi.n	8002bf6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6919      	ldr	r1, [r3, #16]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	60da      	str	r2, [r3, #12]
 8002bf4:	e004      	b.n	8002c00 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3301      	adds	r3, #1
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d9b5      	bls.n	8002b78 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c36:	60da      	str	r2, [r3, #12]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	@ 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	e175      	b.n	8002f50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c64:	2201      	movs	r2, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	f040 8164 	bne.w	8002f4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d005      	beq.n	8002c9a <HAL_GPIO_Init+0x56>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d130      	bne.n	8002cfc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 0201 	and.w	r2, r3, #1
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d017      	beq.n	8002d38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2203      	movs	r2, #3
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d123      	bne.n	8002d8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	08da      	lsrs	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3208      	adds	r2, #8
 8002d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	220f      	movs	r2, #15
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	08da      	lsrs	r2, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3208      	adds	r2, #8
 8002d86:	69b9      	ldr	r1, [r7, #24]
 8002d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2203      	movs	r2, #3
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0203 	and.w	r2, r3, #3
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80be 	beq.w	8002f4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dce:	4b66      	ldr	r3, [pc, #408]	@ (8002f68 <HAL_GPIO_Init+0x324>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd2:	4a65      	ldr	r2, [pc, #404]	@ (8002f68 <HAL_GPIO_Init+0x324>)
 8002dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dda:	4b63      	ldr	r3, [pc, #396]	@ (8002f68 <HAL_GPIO_Init+0x324>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002de6:	4a61      	ldr	r2, [pc, #388]	@ (8002f6c <HAL_GPIO_Init+0x328>)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	3302      	adds	r3, #2
 8002dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	220f      	movs	r2, #15
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a58      	ldr	r2, [pc, #352]	@ (8002f70 <HAL_GPIO_Init+0x32c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d037      	beq.n	8002e82 <HAL_GPIO_Init+0x23e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a57      	ldr	r2, [pc, #348]	@ (8002f74 <HAL_GPIO_Init+0x330>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d031      	beq.n	8002e7e <HAL_GPIO_Init+0x23a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a56      	ldr	r2, [pc, #344]	@ (8002f78 <HAL_GPIO_Init+0x334>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d02b      	beq.n	8002e7a <HAL_GPIO_Init+0x236>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a55      	ldr	r2, [pc, #340]	@ (8002f7c <HAL_GPIO_Init+0x338>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d025      	beq.n	8002e76 <HAL_GPIO_Init+0x232>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a54      	ldr	r2, [pc, #336]	@ (8002f80 <HAL_GPIO_Init+0x33c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01f      	beq.n	8002e72 <HAL_GPIO_Init+0x22e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a53      	ldr	r2, [pc, #332]	@ (8002f84 <HAL_GPIO_Init+0x340>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d019      	beq.n	8002e6e <HAL_GPIO_Init+0x22a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a52      	ldr	r2, [pc, #328]	@ (8002f88 <HAL_GPIO_Init+0x344>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <HAL_GPIO_Init+0x226>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a51      	ldr	r2, [pc, #324]	@ (8002f8c <HAL_GPIO_Init+0x348>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00d      	beq.n	8002e66 <HAL_GPIO_Init+0x222>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a50      	ldr	r2, [pc, #320]	@ (8002f90 <HAL_GPIO_Init+0x34c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <HAL_GPIO_Init+0x21e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4f      	ldr	r2, [pc, #316]	@ (8002f94 <HAL_GPIO_Init+0x350>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_GPIO_Init+0x21a>
 8002e5a:	2309      	movs	r3, #9
 8002e5c:	e012      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e5e:	230a      	movs	r3, #10
 8002e60:	e010      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e62:	2308      	movs	r3, #8
 8002e64:	e00e      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e66:	2307      	movs	r3, #7
 8002e68:	e00c      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e6a:	2306      	movs	r3, #6
 8002e6c:	e00a      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e6e:	2305      	movs	r3, #5
 8002e70:	e008      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e72:	2304      	movs	r3, #4
 8002e74:	e006      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e76:	2303      	movs	r3, #3
 8002e78:	e004      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e002      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e82:	2300      	movs	r3, #0
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	f002 0203 	and.w	r2, r2, #3
 8002e8a:	0092      	lsls	r2, r2, #2
 8002e8c:	4093      	lsls	r3, r2
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e94:	4935      	ldr	r1, [pc, #212]	@ (8002f6c <HAL_GPIO_Init+0x328>)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	089b      	lsrs	r3, r3, #2
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8002f98 <HAL_GPIO_Init+0x354>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ec6:	4a34      	ldr	r2, [pc, #208]	@ (8002f98 <HAL_GPIO_Init+0x354>)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ecc:	4b32      	ldr	r3, [pc, #200]	@ (8002f98 <HAL_GPIO_Init+0x354>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ef0:	4a29      	ldr	r2, [pc, #164]	@ (8002f98 <HAL_GPIO_Init+0x354>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ef6:	4b28      	ldr	r3, [pc, #160]	@ (8002f98 <HAL_GPIO_Init+0x354>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002f98 <HAL_GPIO_Init+0x354>)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f20:	4b1d      	ldr	r3, [pc, #116]	@ (8002f98 <HAL_GPIO_Init+0x354>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f44:	4a14      	ldr	r2, [pc, #80]	@ (8002f98 <HAL_GPIO_Init+0x354>)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	2b0f      	cmp	r3, #15
 8002f54:	f67f ae86 	bls.w	8002c64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	3724      	adds	r7, #36	@ 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40013800 	.word	0x40013800
 8002f70:	40020000 	.word	0x40020000
 8002f74:	40020400 	.word	0x40020400
 8002f78:	40020800 	.word	0x40020800
 8002f7c:	40020c00 	.word	0x40020c00
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40021400 	.word	0x40021400
 8002f88:	40021800 	.word	0x40021800
 8002f8c:	40021c00 	.word	0x40021c00
 8002f90:	40022000 	.word	0x40022000
 8002f94:	40022400 	.word	0x40022400
 8002f98:	40013c00 	.word	0x40013c00

08002f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	887b      	ldrh	r3, [r7, #2]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
 8002fb8:	e001      	b.n	8002fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fdc:	787b      	ldrb	r3, [r7, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fe8:	e003      	b.n	8002ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	041a      	lsls	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	619a      	str	r2, [r3, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	460b      	mov	r3, r1
 8003008:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003010:	887a      	ldrh	r2, [r7, #2]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4013      	ands	r3, r2
 8003016:	041a      	lsls	r2, r3, #16
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	43d9      	mvns	r1, r3
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	400b      	ands	r3, r1
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	619a      	str	r2, [r3, #24]
}
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800303e:	4b08      	ldr	r3, [pc, #32]	@ (8003060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d006      	beq.n	8003058 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800304a:	4a05      	ldr	r2, [pc, #20]	@ (8003060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff f878 	bl	8002148 <HAL_GPIO_EXTI_Callback>
  }
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40013c00 	.word	0x40013c00

08003064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e07f      	b.n	8003176 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fd fc84 	bl	8000998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2224      	movs	r2, #36	@ 0x24
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d107      	bne.n	80030de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	e006      	b.n	80030ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80030ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d104      	bne.n	80030fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b1d      	ldr	r3, [pc, #116]	@ (8003180 <HAL_I2C_Init+0x11c>)
 800310a:	430b      	orrs	r3, r1
 800310c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800311c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69d9      	ldr	r1, [r3, #28]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1a      	ldr	r2, [r3, #32]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	02008000 	.word	0x02008000

08003184 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af02      	add	r7, sp, #8
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	4608      	mov	r0, r1
 800318e:	4611      	mov	r1, r2
 8003190:	461a      	mov	r2, r3
 8003192:	4603      	mov	r3, r0
 8003194:	817b      	strh	r3, [r7, #10]
 8003196:	460b      	mov	r3, r1
 8003198:	813b      	strh	r3, [r7, #8]
 800319a:	4613      	mov	r3, r2
 800319c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	f040 80f9 	bne.w	800339e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_I2C_Mem_Write+0x34>
 80031b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0ed      	b.n	80033a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_I2C_Mem_Write+0x4e>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e0e6      	b.n	80033a0 <HAL_I2C_Mem_Write+0x21c>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031da:	f7ff f8cb 	bl	8002374 <HAL_GetTick>
 80031de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	2319      	movs	r3, #25
 80031e6:	2201      	movs	r2, #1
 80031e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 f955 	bl	800349c <I2C_WaitOnFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0d1      	b.n	80033a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2221      	movs	r2, #33	@ 0x21
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2240      	movs	r2, #64	@ 0x40
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a3a      	ldr	r2, [r7, #32]
 8003216:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800321c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003224:	88f8      	ldrh	r0, [r7, #6]
 8003226:	893a      	ldrh	r2, [r7, #8]
 8003228:	8979      	ldrh	r1, [r7, #10]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	4603      	mov	r3, r0
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f8b9 	bl	80033ac <I2C_RequestMemoryWrite>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0a9      	b.n	80033a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	2bff      	cmp	r3, #255	@ 0xff
 8003254:	d90e      	bls.n	8003274 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	22ff      	movs	r2, #255	@ 0xff
 800325a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003260:	b2da      	uxtb	r2, r3
 8003262:	8979      	ldrh	r1, [r7, #10]
 8003264:	2300      	movs	r3, #0
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fab1 	bl	80037d4 <I2C_TransferConfig>
 8003272:	e00f      	b.n	8003294 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003282:	b2da      	uxtb	r2, r3
 8003284:	8979      	ldrh	r1, [r7, #10]
 8003286:	2300      	movs	r3, #0
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 faa0 	bl	80037d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f93f 	bl	800351c <I2C_WaitOnTXISFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e07b      	b.n	80033a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	781a      	ldrb	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d034      	beq.n	800334c <HAL_I2C_Mem_Write+0x1c8>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d130      	bne.n	800334c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f0:	2200      	movs	r2, #0
 80032f2:	2180      	movs	r1, #128	@ 0x80
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f8d1 	bl	800349c <I2C_WaitOnFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e04d      	b.n	80033a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	2bff      	cmp	r3, #255	@ 0xff
 800330c:	d90e      	bls.n	800332c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	22ff      	movs	r2, #255	@ 0xff
 8003312:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003318:	b2da      	uxtb	r2, r3
 800331a:	8979      	ldrh	r1, [r7, #10]
 800331c:	2300      	movs	r3, #0
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fa55 	bl	80037d4 <I2C_TransferConfig>
 800332a:	e00f      	b.n	800334c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333a:	b2da      	uxtb	r2, r3
 800333c:	8979      	ldrh	r1, [r7, #10]
 800333e:	2300      	movs	r3, #0
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 fa44 	bl	80037d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d19e      	bne.n	8003294 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f91e 	bl	800359c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e01a      	b.n	80033a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2220      	movs	r2, #32
 8003370:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4b0a      	ldr	r3, [pc, #40]	@ (80033a8 <HAL_I2C_Mem_Write+0x224>)
 800337e:	400b      	ands	r3, r1
 8003380:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	e000      	b.n	80033a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800339e:	2302      	movs	r3, #2
  }
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	fe00e800 	.word	0xfe00e800

080033ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	4608      	mov	r0, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	461a      	mov	r2, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	817b      	strh	r3, [r7, #10]
 80033be:	460b      	mov	r3, r1
 80033c0:	813b      	strh	r3, [r7, #8]
 80033c2:	4613      	mov	r3, r2
 80033c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	8979      	ldrh	r1, [r7, #10]
 80033cc:	4b20      	ldr	r3, [pc, #128]	@ (8003450 <I2C_RequestMemoryWrite+0xa4>)
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f9fd 	bl	80037d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	69b9      	ldr	r1, [r7, #24]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f89c 	bl	800351c <I2C_WaitOnTXISFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e02c      	b.n	8003448 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d105      	bne.n	8003400 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033f4:	893b      	ldrh	r3, [r7, #8]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80033fe:	e015      	b.n	800342c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003400:	893b      	ldrh	r3, [r7, #8]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	b29b      	uxth	r3, r3
 8003406:	b2da      	uxtb	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	69b9      	ldr	r1, [r7, #24]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f882 	bl	800351c <I2C_WaitOnTXISFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e012      	b.n	8003448 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003422:	893b      	ldrh	r3, [r7, #8]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	2200      	movs	r2, #0
 8003434:	2180      	movs	r1, #128	@ 0x80
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f830 	bl	800349c <I2C_WaitOnFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	80002000 	.word	0x80002000

08003454 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b02      	cmp	r3, #2
 8003468:	d103      	bne.n	8003472 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2200      	movs	r2, #0
 8003470:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d007      	beq.n	8003490 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	619a      	str	r2, [r3, #24]
  }
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ac:	e022      	b.n	80034f4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034b4:	d01e      	beq.n	80034f4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b6:	f7fe ff5d 	bl	8002374 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d302      	bcc.n	80034cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d113      	bne.n	80034f4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d0:	f043 0220 	orr.w	r2, r3, #32
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e00f      	b.n	8003514 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4013      	ands	r3, r2
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	429a      	cmp	r2, r3
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	429a      	cmp	r2, r3
 8003510:	d0cd      	beq.n	80034ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003528:	e02c      	b.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f870 	bl	8003614 <I2C_IsErrorOccurred>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e02a      	b.n	8003594 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003544:	d01e      	beq.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003546:	f7fe ff15 	bl	8002374 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	429a      	cmp	r2, r3
 8003554:	d302      	bcc.n	800355c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d113      	bne.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e007      	b.n	8003594 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b02      	cmp	r3, #2
 8003590:	d1cb      	bne.n	800352a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a8:	e028      	b.n	80035fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f830 	bl	8003614 <I2C_IsErrorOccurred>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e026      	b.n	800360c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035be:	f7fe fed9 	bl	8002374 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d302      	bcc.n	80035d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d113      	bne.n	80035fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d8:	f043 0220 	orr.w	r2, r3, #32
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e007      	b.n	800360c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b20      	cmp	r3, #32
 8003608:	d1cf      	bne.n	80035aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	@ 0x28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d068      	beq.n	8003712 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2210      	movs	r2, #16
 8003646:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003648:	e049      	b.n	80036de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003650:	d045      	beq.n	80036de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003652:	f7fe fe8f 	bl	8002374 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <I2C_IsErrorOccurred+0x54>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d13a      	bne.n	80036de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003672:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800367a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800368a:	d121      	bne.n	80036d0 <I2C_IsErrorOccurred+0xbc>
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003692:	d01d      	beq.n	80036d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	2b20      	cmp	r3, #32
 8003698:	d01a      	beq.n	80036d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036aa:	f7fe fe63 	bl	8002374 <HAL_GetTick>
 80036ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b0:	e00e      	b.n	80036d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036b2:	f7fe fe5f 	bl	8002374 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b19      	cmp	r3, #25
 80036be:	d907      	bls.n	80036d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	f043 0320 	orr.w	r3, r3, #32
 80036c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80036ce:	e006      	b.n	80036de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d1e9      	bne.n	80036b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 0320 	and.w	r3, r3, #32
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d003      	beq.n	80036f4 <I2C_IsErrorOccurred+0xe0>
 80036ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0aa      	beq.n	800364a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d103      	bne.n	8003704 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2220      	movs	r2, #32
 8003702:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	f043 0304 	orr.w	r3, r3, #4
 800370a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00b      	beq.n	800373c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003734:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	f043 0308 	orr.w	r3, r3, #8
 800374c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003756:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00b      	beq.n	8003780 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	f043 0302 	orr.w	r3, r3, #2
 800376e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003778:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01c      	beq.n	80037c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f7ff fe63 	bl	8003454 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4b0d      	ldr	r3, [pc, #52]	@ (80037d0 <I2C_IsErrorOccurred+0x1bc>)
 800379a:	400b      	ands	r3, r1
 800379c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80037c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3728      	adds	r7, #40	@ 0x28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	fe00e800 	.word	0xfe00e800

080037d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	460b      	mov	r3, r1
 80037e0:	817b      	strh	r3, [r7, #10]
 80037e2:	4613      	mov	r3, r2
 80037e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037e6:	897b      	ldrh	r3, [r7, #10]
 80037e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037ec:	7a7b      	ldrb	r3, [r7, #9]
 80037ee:	041b      	lsls	r3, r3, #16
 80037f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003802:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	0d5b      	lsrs	r3, r3, #21
 800380e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003812:	4b08      	ldr	r3, [pc, #32]	@ (8003834 <I2C_TransferConfig+0x60>)
 8003814:	430b      	orrs	r3, r1
 8003816:	43db      	mvns	r3, r3
 8003818:	ea02 0103 	and.w	r1, r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	03ff63ff 	.word	0x03ff63ff

08003838 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b20      	cmp	r3, #32
 800384c:	d138      	bne.n	80038c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003858:	2302      	movs	r3, #2
 800385a:	e032      	b.n	80038c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2224      	movs	r2, #36	@ 0x24
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0201 	bic.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800388a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6819      	ldr	r1, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d139      	bne.n	8003958 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e033      	b.n	800395a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2224      	movs	r2, #36	@ 0x24
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0201 	bic.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003920:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	021b      	lsls	r3, r3, #8
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	e000      	b.n	800395a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003958:	2302      	movs	r3, #2
  }
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003966:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003968:	b08f      	sub	sp, #60	@ 0x3c
 800396a:	af0a      	add	r7, sp, #40	@ 0x28
 800396c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e116      	b.n	8003ba6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd fbe4 	bl	8001160 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2203      	movs	r2, #3
 800399c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f002 fdbe 	bl	8006538 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	603b      	str	r3, [r7, #0]
 80039c2:	687e      	ldr	r6, [r7, #4]
 80039c4:	466d      	mov	r5, sp
 80039c6:	f106 0410 	add.w	r4, r6, #16
 80039ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80039da:	1d33      	adds	r3, r6, #4
 80039dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039de:	6838      	ldr	r0, [r7, #0]
 80039e0:	f002 fd52 	bl	8006488 <USB_CoreInit>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0d7      	b.n	8003ba6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2100      	movs	r1, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f002 fdac 	bl	800655a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
 8003a06:	e04a      	b.n	8003a9e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a08:	7bfa      	ldrb	r2, [r7, #15]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	333d      	adds	r3, #61	@ 0x3d
 8003a18:	2201      	movs	r2, #1
 8003a1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a1c:	7bfa      	ldrb	r2, [r7, #15]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	333c      	adds	r3, #60	@ 0x3c
 8003a2c:	7bfa      	ldrb	r2, [r7, #15]
 8003a2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a30:	7bfa      	ldrb	r2, [r7, #15]
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	b298      	uxth	r0, r3
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3344      	adds	r3, #68	@ 0x44
 8003a44:	4602      	mov	r2, r0
 8003a46:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3340      	adds	r3, #64	@ 0x40
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	3348      	adds	r3, #72	@ 0x48
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	334c      	adds	r3, #76	@ 0x4c
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a84:	7bfa      	ldrb	r2, [r7, #15]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	3354      	adds	r3, #84	@ 0x54
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
 8003a9e:	7bfa      	ldrb	r2, [r7, #15]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d3af      	bcc.n	8003a08 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	73fb      	strb	r3, [r7, #15]
 8003aac:	e044      	b.n	8003b38 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aae:	7bfa      	ldrb	r2, [r7, #15]
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ac4:	7bfa      	ldrb	r2, [r7, #15]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003ad6:	7bfa      	ldrb	r2, [r7, #15]
 8003ad8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ada:	7bfa      	ldrb	r2, [r7, #15]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003af0:	7bfa      	ldrb	r2, [r7, #15]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b06:	7bfa      	ldrb	r2, [r7, #15]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	3301      	adds	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
 8003b38:	7bfa      	ldrb	r2, [r7, #15]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d3b5      	bcc.n	8003aae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	687e      	ldr	r6, [r7, #4]
 8003b4a:	466d      	mov	r5, sp
 8003b4c:	f106 0410 	add.w	r4, r6, #16
 8003b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b60:	1d33      	adds	r3, r6, #4
 8003b62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b64:	6838      	ldr	r0, [r7, #0]
 8003b66:	f002 fd45 	bl	80065f4 <USB_DevInit>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e014      	b.n	8003ba6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d102      	bne.n	8003b9a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f80b 	bl	8003bb0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f002 ff03 	bl	80069aa <USB_DevDisconnect>

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003bb0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bde:	4b05      	ldr	r3, [pc, #20]	@ (8003bf4 <HAL_PCDEx_ActivateLPM+0x44>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	10000003 	.word	0x10000003

08003bf8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bfc:	4b05      	ldr	r3, [pc, #20]	@ (8003c14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a04      	ldr	r2, [pc, #16]	@ (8003c14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c06:	6013      	str	r3, [r2, #0]
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40007000 	.word	0x40007000

08003c18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c20:	2300      	movs	r3, #0
 8003c22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e291      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8087 	beq.w	8003d4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c3c:	4b96      	ldr	r3, [pc, #600]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d00c      	beq.n	8003c62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c48:	4b93      	ldr	r3, [pc, #588]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d112      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62>
 8003c54:	4b90      	ldr	r3, [pc, #576]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c60:	d10b      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c62:	4b8d      	ldr	r3, [pc, #564]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d06c      	beq.n	8003d48 <HAL_RCC_OscConfig+0x130>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d168      	bne.n	8003d48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e26b      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c82:	d106      	bne.n	8003c92 <HAL_RCC_OscConfig+0x7a>
 8003c84:	4b84      	ldr	r3, [pc, #528]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a83      	ldr	r2, [pc, #524]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	e02e      	b.n	8003cf0 <HAL_RCC_OscConfig+0xd8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x9c>
 8003c9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7b      	ldr	r2, [pc, #492]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e01d      	b.n	8003cf0 <HAL_RCC_OscConfig+0xd8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0xc0>
 8003cbe:	4b76      	ldr	r3, [pc, #472]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a75      	ldr	r2, [pc, #468]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b73      	ldr	r3, [pc, #460]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a72      	ldr	r2, [pc, #456]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0xd8>
 8003cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a6e      	ldr	r2, [pc, #440]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b6c      	ldr	r3, [pc, #432]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a6b      	ldr	r2, [pc, #428]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d013      	beq.n	8003d20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fe fb3c 	bl	8002374 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d00:	f7fe fb38 	bl	8002374 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	@ 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e21f      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	4b61      	ldr	r3, [pc, #388]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0xe8>
 8003d1e:	e014      	b.n	8003d4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fe fb28 	bl	8002374 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fe fb24 	bl	8002374 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	@ 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e20b      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	4b57      	ldr	r3, [pc, #348]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x110>
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d069      	beq.n	8003e2a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d56:	4b50      	ldr	r3, [pc, #320]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d62:	4b4d      	ldr	r3, [pc, #308]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d11c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x190>
 8003d6e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d116      	bne.n	8003da8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7a:	4b47      	ldr	r3, [pc, #284]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_RCC_OscConfig+0x17a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e1df      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d92:	4b41      	ldr	r3, [pc, #260]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	493d      	ldr	r1, [pc, #244]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da6:	e040      	b.n	8003e2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d023      	beq.n	8003df8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db0:	4b39      	ldr	r3, [pc, #228]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a38      	ldr	r2, [pc, #224]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fada 	bl	8002374 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc4:	f7fe fad6 	bl	8002374 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e1bd      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd6:	4b30      	ldr	r3, [pc, #192]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de2:	4b2d      	ldr	r3, [pc, #180]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4929      	ldr	r1, [pc, #164]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]
 8003df6:	e018      	b.n	8003e2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df8:	4b27      	ldr	r3, [pc, #156]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a26      	ldr	r2, [pc, #152]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe fab6 	bl	8002374 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0c:	f7fe fab2 	bl	8002374 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e199      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d038      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d019      	beq.n	8003e72 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3e:	4b16      	ldr	r3, [pc, #88]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e42:	4a15      	ldr	r2, [pc, #84]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4a:	f7fe fa93 	bl	8002374 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e52:	f7fe fa8f 	bl	8002374 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e176      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e64:	4b0c      	ldr	r3, [pc, #48]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x23a>
 8003e70:	e01a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e72:	4b09      	ldr	r3, [pc, #36]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e76:	4a08      	ldr	r2, [pc, #32]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7e:	f7fe fa79 	bl	8002374 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e86:	f7fe fa75 	bl	8002374 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d903      	bls.n	8003e9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e15c      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
 8003e98:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9c:	4b91      	ldr	r3, [pc, #580]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1ee      	bne.n	8003e86 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80a4 	beq.w	8003ffe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb6:	4b8b      	ldr	r3, [pc, #556]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10d      	bne.n	8003ede <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	4b88      	ldr	r3, [pc, #544]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec6:	4a87      	ldr	r2, [pc, #540]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ece:	4b85      	ldr	r3, [pc, #532]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ede:	4b82      	ldr	r3, [pc, #520]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d118      	bne.n	8003f1c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003eea:	4b7f      	ldr	r3, [pc, #508]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a7e      	ldr	r2, [pc, #504]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef6:	f7fe fa3d 	bl	8002374 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efe:	f7fe fa39 	bl	8002374 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b64      	cmp	r3, #100	@ 0x64
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e120      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f10:	4b75      	ldr	r3, [pc, #468]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f0      	beq.n	8003efe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d106      	bne.n	8003f32 <HAL_RCC_OscConfig+0x31a>
 8003f24:	4b6f      	ldr	r3, [pc, #444]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f28:	4a6e      	ldr	r2, [pc, #440]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f30:	e02d      	b.n	8003f8e <HAL_RCC_OscConfig+0x376>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x33c>
 8003f3a:	4b6a      	ldr	r3, [pc, #424]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3e:	4a69      	ldr	r2, [pc, #420]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f46:	4b67      	ldr	r3, [pc, #412]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4a:	4a66      	ldr	r2, [pc, #408]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f4c:	f023 0304 	bic.w	r3, r3, #4
 8003f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f52:	e01c      	b.n	8003f8e <HAL_RCC_OscConfig+0x376>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b05      	cmp	r3, #5
 8003f5a:	d10c      	bne.n	8003f76 <HAL_RCC_OscConfig+0x35e>
 8003f5c:	4b61      	ldr	r3, [pc, #388]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f60:	4a60      	ldr	r2, [pc, #384]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f62:	f043 0304 	orr.w	r3, r3, #4
 8003f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f68:	4b5e      	ldr	r3, [pc, #376]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f74:	e00b      	b.n	8003f8e <HAL_RCC_OscConfig+0x376>
 8003f76:	4b5b      	ldr	r3, [pc, #364]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7a:	4a5a      	ldr	r2, [pc, #360]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f82:	4b58      	ldr	r3, [pc, #352]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f86:	4a57      	ldr	r2, [pc, #348]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d015      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f96:	f7fe f9ed 	bl	8002374 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7fe f9e9 	bl	8002374 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0ce      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb4:	4b4b      	ldr	r3, [pc, #300]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ee      	beq.n	8003f9e <HAL_RCC_OscConfig+0x386>
 8003fc0:	e014      	b.n	8003fec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc2:	f7fe f9d7 	bl	8002374 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fca:	f7fe f9d3 	bl	8002374 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e0b8      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe0:	4b40      	ldr	r3, [pc, #256]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ee      	bne.n	8003fca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d105      	bne.n	8003ffe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff2:	4b3c      	ldr	r3, [pc, #240]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	4a3b      	ldr	r2, [pc, #236]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8003ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ffc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80a4 	beq.w	8004150 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004008:	4b36      	ldr	r3, [pc, #216]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d06b      	beq.n	80040ec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d149      	bne.n	80040b0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b31      	ldr	r3, [pc, #196]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a30      	ldr	r2, [pc, #192]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8004022:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe f9a4 	bl	8002374 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004030:	f7fe f9a0 	bl	8002374 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e087      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	4b28      	ldr	r3, [pc, #160]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	019b      	lsls	r3, r3, #6
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	3b01      	subs	r3, #1
 8004068:	041b      	lsls	r3, r3, #16
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	061b      	lsls	r3, r3, #24
 8004072:	4313      	orrs	r3, r2
 8004074:	4a1b      	ldr	r2, [pc, #108]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8004076:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800407a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800407c:	4b19      	ldr	r3, [pc, #100]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a18      	ldr	r2, [pc, #96]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8004082:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7fe f974 	bl	8002374 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004090:	f7fe f970 	bl	8002374 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e057      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a2:	4b10      	ldr	r3, [pc, #64]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x478>
 80040ae:	e04f      	b.n	8004150 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b0:	4b0c      	ldr	r3, [pc, #48]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a0b      	ldr	r2, [pc, #44]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 80040b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fe f95a 	bl	8002374 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c4:	f7fe f956 	bl	8002374 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e03d      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	4b03      	ldr	r3, [pc, #12]	@ (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4ac>
 80040e2:	e035      	b.n	8004150 <HAL_RCC_OscConfig+0x538>
 80040e4:	40023800 	.word	0x40023800
 80040e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040ec:	4b1b      	ldr	r3, [pc, #108]	@ (800415c <HAL_RCC_OscConfig+0x544>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d028      	beq.n	800414c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004104:	429a      	cmp	r2, r3
 8004106:	d121      	bne.n	800414c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004112:	429a      	cmp	r2, r3
 8004114:	d11a      	bne.n	800414c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800411c:	4013      	ands	r3, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004122:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004124:	4293      	cmp	r3, r2
 8004126:	d111      	bne.n	800414c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004132:	085b      	lsrs	r3, r3, #1
 8004134:	3b01      	subs	r3, #1
 8004136:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004138:	429a      	cmp	r2, r3
 800413a:	d107      	bne.n	800414c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004146:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d001      	beq.n	8004150 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e000      	b.n	8004152 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800

08004160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0d0      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004178:	4b6a      	ldr	r3, [pc, #424]	@ (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d910      	bls.n	80041a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004186:	4b67      	ldr	r3, [pc, #412]	@ (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 020f 	bic.w	r2, r3, #15
 800418e:	4965      	ldr	r1, [pc, #404]	@ (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	4313      	orrs	r3, r2
 8004194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004196:	4b63      	ldr	r3, [pc, #396]	@ (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0b8      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d020      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c0:	4b59      	ldr	r3, [pc, #356]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4a58      	ldr	r2, [pc, #352]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d8:	4b53      	ldr	r3, [pc, #332]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4a52      	ldr	r2, [pc, #328]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e4:	4b50      	ldr	r3, [pc, #320]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	494d      	ldr	r1, [pc, #308]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d040      	beq.n	8004284 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420a:	4b47      	ldr	r3, [pc, #284]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d115      	bne.n	8004242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e07f      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	4b41      	ldr	r3, [pc, #260]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e073      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	4b3d      	ldr	r3, [pc, #244]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e06b      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004242:	4b39      	ldr	r3, [pc, #228]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4936      	ldr	r1, [pc, #216]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004250:	4313      	orrs	r3, r2
 8004252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004254:	f7fe f88e 	bl	8002374 <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	e00a      	b.n	8004272 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425c:	f7fe f88a 	bl	8002374 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e053      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	4b2d      	ldr	r3, [pc, #180]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 020c 	and.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	429a      	cmp	r2, r3
 8004282:	d1eb      	bne.n	800425c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004284:	4b27      	ldr	r3, [pc, #156]	@ (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d210      	bcs.n	80042b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004292:	4b24      	ldr	r3, [pc, #144]	@ (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 020f 	bic.w	r2, r3, #15
 800429a:	4922      	ldr	r1, [pc, #136]	@ (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a2:	4b20      	ldr	r3, [pc, #128]	@ (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e032      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c0:	4b19      	ldr	r3, [pc, #100]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4916      	ldr	r1, [pc, #88]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042de:	4b12      	ldr	r3, [pc, #72]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	490e      	ldr	r1, [pc, #56]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042f2:	f000 f821 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 80042f6:	4602      	mov	r2, r0
 80042f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	490a      	ldr	r1, [pc, #40]	@ (800432c <HAL_RCC_ClockConfig+0x1cc>)
 8004304:	5ccb      	ldrb	r3, [r1, r3]
 8004306:	fa22 f303 	lsr.w	r3, r2, r3
 800430a:	4a09      	ldr	r2, [pc, #36]	@ (8004330 <HAL_RCC_ClockConfig+0x1d0>)
 800430c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800430e:	4b09      	ldr	r3, [pc, #36]	@ (8004334 <HAL_RCC_ClockConfig+0x1d4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fd ffea 	bl	80022ec <HAL_InitTick>

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40023c00 	.word	0x40023c00
 8004328:	40023800 	.word	0x40023800
 800432c:	08008698 	.word	0x08008698
 8004330:	20000000 	.word	0x20000000
 8004334:	2000000c 	.word	0x2000000c

08004338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800433c:	b094      	sub	sp, #80	@ 0x50
 800433e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	647b      	str	r3, [r7, #68]	@ 0x44
 8004344:	2300      	movs	r3, #0
 8004346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004348:	2300      	movs	r3, #0
 800434a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004350:	4b79      	ldr	r3, [pc, #484]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 030c 	and.w	r3, r3, #12
 8004358:	2b08      	cmp	r3, #8
 800435a:	d00d      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x40>
 800435c:	2b08      	cmp	r3, #8
 800435e:	f200 80e1 	bhi.w	8004524 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0x34>
 8004366:	2b04      	cmp	r3, #4
 8004368:	d003      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0x3a>
 800436a:	e0db      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800436c:	4b73      	ldr	r3, [pc, #460]	@ (800453c <HAL_RCC_GetSysClockFreq+0x204>)
 800436e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004370:	e0db      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004372:	4b73      	ldr	r3, [pc, #460]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x208>)
 8004374:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004376:	e0d8      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004378:	4b6f      	ldr	r3, [pc, #444]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004380:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004382:	4b6d      	ldr	r3, [pc, #436]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d063      	beq.n	8004456 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438e:	4b6a      	ldr	r3, [pc, #424]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	099b      	lsrs	r3, r3, #6
 8004394:	2200      	movs	r2, #0
 8004396:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004398:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800439a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80043a2:	2300      	movs	r3, #0
 80043a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80043a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043aa:	4622      	mov	r2, r4
 80043ac:	462b      	mov	r3, r5
 80043ae:	f04f 0000 	mov.w	r0, #0
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	0159      	lsls	r1, r3, #5
 80043b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043bc:	0150      	lsls	r0, r2, #5
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4621      	mov	r1, r4
 80043c4:	1a51      	subs	r1, r2, r1
 80043c6:	6139      	str	r1, [r7, #16]
 80043c8:	4629      	mov	r1, r5
 80043ca:	eb63 0301 	sbc.w	r3, r3, r1
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043dc:	4659      	mov	r1, fp
 80043de:	018b      	lsls	r3, r1, #6
 80043e0:	4651      	mov	r1, sl
 80043e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043e6:	4651      	mov	r1, sl
 80043e8:	018a      	lsls	r2, r1, #6
 80043ea:	4651      	mov	r1, sl
 80043ec:	ebb2 0801 	subs.w	r8, r2, r1
 80043f0:	4659      	mov	r1, fp
 80043f2:	eb63 0901 	sbc.w	r9, r3, r1
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800440a:	4690      	mov	r8, r2
 800440c:	4699      	mov	r9, r3
 800440e:	4623      	mov	r3, r4
 8004410:	eb18 0303 	adds.w	r3, r8, r3
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	462b      	mov	r3, r5
 8004418:	eb49 0303 	adc.w	r3, r9, r3
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800442a:	4629      	mov	r1, r5
 800442c:	024b      	lsls	r3, r1, #9
 800442e:	4621      	mov	r1, r4
 8004430:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004434:	4621      	mov	r1, r4
 8004436:	024a      	lsls	r2, r1, #9
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800443e:	2200      	movs	r2, #0
 8004440:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004442:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004444:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004448:	f7fb ff32 	bl	80002b0 <__aeabi_uldivmod>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4613      	mov	r3, r2
 8004452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004454:	e058      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004456:	4b38      	ldr	r3, [pc, #224]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	099b      	lsrs	r3, r3, #6
 800445c:	2200      	movs	r2, #0
 800445e:	4618      	mov	r0, r3
 8004460:	4611      	mov	r1, r2
 8004462:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004466:	623b      	str	r3, [r7, #32]
 8004468:	2300      	movs	r3, #0
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
 800446c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004470:	4642      	mov	r2, r8
 8004472:	464b      	mov	r3, r9
 8004474:	f04f 0000 	mov.w	r0, #0
 8004478:	f04f 0100 	mov.w	r1, #0
 800447c:	0159      	lsls	r1, r3, #5
 800447e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004482:	0150      	lsls	r0, r2, #5
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4641      	mov	r1, r8
 800448a:	ebb2 0a01 	subs.w	sl, r2, r1
 800448e:	4649      	mov	r1, r9
 8004490:	eb63 0b01 	sbc.w	fp, r3, r1
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044a8:	ebb2 040a 	subs.w	r4, r2, sl
 80044ac:	eb63 050b 	sbc.w	r5, r3, fp
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	00eb      	lsls	r3, r5, #3
 80044ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044be:	00e2      	lsls	r2, r4, #3
 80044c0:	4614      	mov	r4, r2
 80044c2:	461d      	mov	r5, r3
 80044c4:	4643      	mov	r3, r8
 80044c6:	18e3      	adds	r3, r4, r3
 80044c8:	603b      	str	r3, [r7, #0]
 80044ca:	464b      	mov	r3, r9
 80044cc:	eb45 0303 	adc.w	r3, r5, r3
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044de:	4629      	mov	r1, r5
 80044e0:	028b      	lsls	r3, r1, #10
 80044e2:	4621      	mov	r1, r4
 80044e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044e8:	4621      	mov	r1, r4
 80044ea:	028a      	lsls	r2, r1, #10
 80044ec:	4610      	mov	r0, r2
 80044ee:	4619      	mov	r1, r3
 80044f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f2:	2200      	movs	r2, #0
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	61fa      	str	r2, [r7, #28]
 80044f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044fc:	f7fb fed8 	bl	80002b0 <__aeabi_uldivmod>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4613      	mov	r3, r2
 8004506:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004508:	4b0b      	ldr	r3, [pc, #44]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	3301      	adds	r3, #1
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004518:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800451a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004522:	e002      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004524:	4b05      	ldr	r3, [pc, #20]	@ (800453c <HAL_RCC_GetSysClockFreq+0x204>)
 8004526:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800452a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800452c:	4618      	mov	r0, r3
 800452e:	3750      	adds	r7, #80	@ 0x50
 8004530:	46bd      	mov	sp, r7
 8004532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004536:	bf00      	nop
 8004538:	40023800 	.word	0x40023800
 800453c:	00f42400 	.word	0x00f42400
 8004540:	007a1200 	.word	0x007a1200

08004544 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004548:	4b03      	ldr	r3, [pc, #12]	@ (8004558 <HAL_RCC_GetHCLKFreq+0x14>)
 800454a:	681b      	ldr	r3, [r3, #0]
}
 800454c:	4618      	mov	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	20000000 	.word	0x20000000

0800455c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004560:	f7ff fff0 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 8004564:	4602      	mov	r2, r0
 8004566:	4b05      	ldr	r3, [pc, #20]	@ (800457c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	0a9b      	lsrs	r3, r3, #10
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	4903      	ldr	r1, [pc, #12]	@ (8004580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004572:	5ccb      	ldrb	r3, [r1, r3]
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004578:	4618      	mov	r0, r3
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40023800 	.word	0x40023800
 8004580:	080086a8 	.word	0x080086a8

08004584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004588:	f7ff ffdc 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 800458c:	4602      	mov	r2, r0
 800458e:	4b05      	ldr	r3, [pc, #20]	@ (80045a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	0b5b      	lsrs	r3, r3, #13
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	4903      	ldr	r1, [pc, #12]	@ (80045a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800459a:	5ccb      	ldrb	r3, [r1, r3]
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40023800 	.word	0x40023800
 80045a8:	080086a8 	.word	0x080086a8

080045ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d012      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045d4:	4b69      	ldr	r3, [pc, #420]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	4a68      	ldr	r2, [pc, #416]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045de:	6093      	str	r3, [r2, #8]
 80045e0:	4b66      	ldr	r3, [pc, #408]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e8:	4964      	ldr	r1, [pc, #400]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045f6:	2301      	movs	r3, #1
 80045f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d017      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004606:	4b5d      	ldr	r3, [pc, #372]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800460c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004614:	4959      	ldr	r1, [pc, #356]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004620:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004624:	d101      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004626:	2301      	movs	r3, #1
 8004628:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004632:	2301      	movs	r3, #1
 8004634:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d017      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004642:	4b4e      	ldr	r3, [pc, #312]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004648:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004650:	494a      	ldr	r1, [pc, #296]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004660:	d101      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004662:	2301      	movs	r3, #1
 8004664:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800466e:	2301      	movs	r3, #1
 8004670:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800467e:	2301      	movs	r3, #1
 8004680:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 808b 	beq.w	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004690:	4b3a      	ldr	r3, [pc, #232]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004694:	4a39      	ldr	r2, [pc, #228]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800469a:	6413      	str	r3, [r2, #64]	@ 0x40
 800469c:	4b37      	ldr	r3, [pc, #220]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046a8:	4b35      	ldr	r3, [pc, #212]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a34      	ldr	r2, [pc, #208]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b4:	f7fd fe5e 	bl	8002374 <HAL_GetTick>
 80046b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046bc:	f7fd fe5a 	bl	8002374 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b64      	cmp	r3, #100	@ 0x64
 80046c8:	d901      	bls.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e357      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0f0      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046da:	4b28      	ldr	r3, [pc, #160]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d035      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d02e      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046f8:	4b20      	ldr	r3, [pc, #128]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004700:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004702:	4b1e      	ldr	r3, [pc, #120]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004706:	4a1d      	ldr	r2, [pc, #116]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800470e:	4b1b      	ldr	r3, [pc, #108]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004712:	4a1a      	ldr	r2, [pc, #104]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004718:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800471a:	4a18      	ldr	r2, [pc, #96]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004720:	4b16      	ldr	r3, [pc, #88]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b01      	cmp	r3, #1
 800472a:	d114      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fd fe22 	bl	8002374 <HAL_GetTick>
 8004730:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004732:	e00a      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004734:	f7fd fe1e 	bl	8002374 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004742:	4293      	cmp	r3, r2
 8004744:	d901      	bls.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e319      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474a:	4b0c      	ldr	r3, [pc, #48]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0ee      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800475e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004762:	d111      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004764:	4b05      	ldr	r3, [pc, #20]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004770:	4b04      	ldr	r3, [pc, #16]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004772:	400b      	ands	r3, r1
 8004774:	4901      	ldr	r1, [pc, #4]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004776:	4313      	orrs	r3, r2
 8004778:	608b      	str	r3, [r1, #8]
 800477a:	e00b      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800477c:	40023800 	.word	0x40023800
 8004780:	40007000 	.word	0x40007000
 8004784:	0ffffcff 	.word	0x0ffffcff
 8004788:	4baa      	ldr	r3, [pc, #680]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	4aa9      	ldr	r2, [pc, #676]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004792:	6093      	str	r3, [r2, #8]
 8004794:	4ba7      	ldr	r3, [pc, #668]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004796:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a0:	49a4      	ldr	r1, [pc, #656]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d010      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047b2:	4ba0      	ldr	r3, [pc, #640]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047b8:	4a9e      	ldr	r2, [pc, #632]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80047c2:	4b9c      	ldr	r3, [pc, #624]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047cc:	4999      	ldr	r1, [pc, #612]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047e0:	4b94      	ldr	r3, [pc, #592]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047ee:	4991      	ldr	r1, [pc, #580]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004802:	4b8c      	ldr	r3, [pc, #560]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004808:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004810:	4988      	ldr	r1, [pc, #544]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004824:	4b83      	ldr	r3, [pc, #524]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004832:	4980      	ldr	r1, [pc, #512]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004846:	4b7b      	ldr	r3, [pc, #492]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004854:	4977      	ldr	r1, [pc, #476]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004868:	4b72      	ldr	r3, [pc, #456]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486e:	f023 0203 	bic.w	r2, r3, #3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004876:	496f      	ldr	r1, [pc, #444]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800488a:	4b6a      	ldr	r3, [pc, #424]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800488c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004890:	f023 020c 	bic.w	r2, r3, #12
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004898:	4966      	ldr	r1, [pc, #408]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048ac:	4b61      	ldr	r3, [pc, #388]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ba:	495e      	ldr	r1, [pc, #376]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048ce:	4b59      	ldr	r3, [pc, #356]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048dc:	4955      	ldr	r1, [pc, #340]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048f0:	4b50      	ldr	r3, [pc, #320]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fe:	494d      	ldr	r1, [pc, #308]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004912:	4b48      	ldr	r3, [pc, #288]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004918:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004920:	4944      	ldr	r1, [pc, #272]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004934:	4b3f      	ldr	r3, [pc, #252]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004942:	493c      	ldr	r1, [pc, #240]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004956:	4b37      	ldr	r3, [pc, #220]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004964:	4933      	ldr	r1, [pc, #204]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004978:	4b2e      	ldr	r3, [pc, #184]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004986:	492b      	ldr	r1, [pc, #172]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d011      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800499a:	4b26      	ldr	r3, [pc, #152]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049a8:	4922      	ldr	r1, [pc, #136]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049b8:	d101      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80049ba:	2301      	movs	r3, #1
 80049bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80049ca:	2301      	movs	r3, #1
 80049cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049da:	4b16      	ldr	r3, [pc, #88]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e8:	4912      	ldr	r1, [pc, #72]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00b      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a02:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a0c:	4909      	ldr	r1, [pc, #36]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d006      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 80d9 	beq.w	8004bda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a28:	4b02      	ldr	r3, [pc, #8]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a01      	ldr	r2, [pc, #4]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a32:	e001      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004a34:	40023800 	.word	0x40023800
 8004a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3a:	f7fd fc9b 	bl	8002374 <HAL_GetTick>
 8004a3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a40:	e008      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a42:	f7fd fc97 	bl	8002374 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b64      	cmp	r3, #100	@ 0x64
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e194      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a54:	4b6c      	ldr	r3, [pc, #432]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f0      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d021      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d11d      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a74:	4b64      	ldr	r3, [pc, #400]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a7a:	0c1b      	lsrs	r3, r3, #16
 8004a7c:	f003 0303 	and.w	r3, r3, #3
 8004a80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a82:	4b61      	ldr	r3, [pc, #388]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a88:	0e1b      	lsrs	r3, r3, #24
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	019a      	lsls	r2, r3, #6
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	061b      	lsls	r3, r3, #24
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	071b      	lsls	r3, r3, #28
 8004aa8:	4957      	ldr	r1, [pc, #348]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d004      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ac4:	d00a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d02e      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ada:	d129      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004adc:	4b4a      	ldr	r3, [pc, #296]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ae2:	0c1b      	lsrs	r3, r3, #16
 8004ae4:	f003 0303 	and.w	r3, r3, #3
 8004ae8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004aea:	4b47      	ldr	r3, [pc, #284]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004af0:	0f1b      	lsrs	r3, r3, #28
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	019a      	lsls	r2, r3, #6
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	041b      	lsls	r3, r3, #16
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	061b      	lsls	r3, r3, #24
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	071b      	lsls	r3, r3, #28
 8004b10:	493d      	ldr	r1, [pc, #244]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b18:	4b3b      	ldr	r3, [pc, #236]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b1e:	f023 021f 	bic.w	r2, r3, #31
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b26:	3b01      	subs	r3, #1
 8004b28:	4937      	ldr	r1, [pc, #220]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01d      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b3c:	4b32      	ldr	r3, [pc, #200]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b42:	0e1b      	lsrs	r3, r3, #24
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b50:	0f1b      	lsrs	r3, r3, #28
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	019a      	lsls	r2, r3, #6
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	041b      	lsls	r3, r3, #16
 8004b64:	431a      	orrs	r2, r3
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	061b      	lsls	r3, r3, #24
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	071b      	lsls	r3, r3, #28
 8004b70:	4925      	ldr	r1, [pc, #148]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d011      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	019a      	lsls	r2, r3, #6
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	041b      	lsls	r3, r3, #16
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	061b      	lsls	r3, r3, #24
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	071b      	lsls	r3, r3, #28
 8004ba0:	4919      	ldr	r1, [pc, #100]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ba8:	4b17      	ldr	r3, [pc, #92]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a16      	ldr	r2, [pc, #88]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb4:	f7fd fbde 	bl	8002374 <HAL_GetTick>
 8004bb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bbc:	f7fd fbda 	bl	8002374 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	@ 0x64
 8004bc8:	d901      	bls.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e0d7      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bce:	4b0e      	ldr	r3, [pc, #56]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	f040 80cd 	bne.w	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004be2:	4b09      	ldr	r3, [pc, #36]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a08      	ldr	r2, [pc, #32]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004be8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bee:	f7fd fbc1 	bl	8002374 <HAL_GetTick>
 8004bf2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bf4:	e00a      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bf6:	f7fd fbbd 	bl	8002374 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b64      	cmp	r3, #100	@ 0x64
 8004c02:	d903      	bls.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e0ba      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c0c:	4b5e      	ldr	r3, [pc, #376]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c18:	d0ed      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d02e      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d12a      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c42:	4b51      	ldr	r3, [pc, #324]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c50:	4b4d      	ldr	r3, [pc, #308]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c56:	0f1b      	lsrs	r3, r3, #28
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	019a      	lsls	r2, r3, #6
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	041b      	lsls	r3, r3, #16
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	061b      	lsls	r3, r3, #24
 8004c70:	431a      	orrs	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	071b      	lsls	r3, r3, #28
 8004c76:	4944      	ldr	r1, [pc, #272]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c7e:	4b42      	ldr	r3, [pc, #264]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c84:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	493d      	ldr	r1, [pc, #244]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d022      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ca8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cac:	d11d      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cae:	4b36      	ldr	r3, [pc, #216]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb4:	0e1b      	lsrs	r3, r3, #24
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cbc:	4b32      	ldr	r3, [pc, #200]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc2:	0f1b      	lsrs	r3, r3, #28
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	019a      	lsls	r2, r3, #6
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	041b      	lsls	r3, r3, #16
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	061b      	lsls	r3, r3, #24
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	071b      	lsls	r3, r3, #28
 8004ce2:	4929      	ldr	r1, [pc, #164]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d028      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cf6:	4b24      	ldr	r3, [pc, #144]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfc:	0e1b      	lsrs	r3, r3, #24
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d04:	4b20      	ldr	r3, [pc, #128]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0a:	0c1b      	lsrs	r3, r3, #16
 8004d0c:	f003 0303 	and.w	r3, r3, #3
 8004d10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	019a      	lsls	r2, r3, #6
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	041b      	lsls	r3, r3, #16
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	061b      	lsls	r3, r3, #24
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	071b      	lsls	r3, r3, #28
 8004d2a:	4917      	ldr	r1, [pc, #92]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d32:	4b15      	ldr	r3, [pc, #84]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	4911      	ldr	r1, [pc, #68]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d48:	4b0f      	ldr	r3, [pc, #60]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d54:	f7fd fb0e 	bl	8002374 <HAL_GetTick>
 8004d58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d5c:	f7fd fb0a 	bl	8002374 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b64      	cmp	r3, #100	@ 0x64
 8004d68:	d901      	bls.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e007      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d6e:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d7a:	d1ef      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3720      	adds	r7, #32
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800

08004d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e049      	b.n	8004e32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fc f8b8 	bl	8000f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4610      	mov	r0, r2
 8004dcc:	f000 fb60 	bl	8005490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d001      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e054      	b.n	8004efe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a26      	ldr	r2, [pc, #152]	@ (8004f0c <HAL_TIM_Base_Start_IT+0xd0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d022      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7e:	d01d      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a22      	ldr	r2, [pc, #136]	@ (8004f10 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d018      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a21      	ldr	r2, [pc, #132]	@ (8004f14 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d013      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a1f      	ldr	r2, [pc, #124]	@ (8004f18 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00e      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f1c <HAL_TIM_Base_Start_IT+0xe0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d009      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1c      	ldr	r2, [pc, #112]	@ (8004f20 <HAL_TIM_Base_Start_IT+0xe4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f24 <HAL_TIM_Base_Start_IT+0xe8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d115      	bne.n	8004ee8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	4b19      	ldr	r3, [pc, #100]	@ (8004f28 <HAL_TIM_Base_Start_IT+0xec>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b06      	cmp	r3, #6
 8004ecc:	d015      	beq.n	8004efa <HAL_TIM_Base_Start_IT+0xbe>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ed4:	d011      	beq.n	8004efa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0201 	orr.w	r2, r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee6:	e008      	b.n	8004efa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	e000      	b.n	8004efc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800
 8004f18:	40000c00 	.word	0x40000c00
 8004f1c:	40010400 	.word	0x40010400
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40001800 	.word	0x40001800
 8004f28:	00010007 	.word	0x00010007

08004f2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e049      	b.n	8004fd2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fb ffc8 	bl	8000ee8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3304      	adds	r3, #4
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	f000 fa90 	bl	8005490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d122      	bne.n	8005036 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d11b      	bne.n	8005036 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f06f 0202 	mvn.w	r2, #2
 8005006:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fa19 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 8005022:	e005      	b.n	8005030 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fa0b 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa1c 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b04      	cmp	r3, #4
 8005042:	d122      	bne.n	800508a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b04      	cmp	r3, #4
 8005050:	d11b      	bne.n	800508a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f06f 0204 	mvn.w	r2, #4
 800505a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f9ef 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 8005076:	e005      	b.n	8005084 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f9e1 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f9f2 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b08      	cmp	r3, #8
 8005096:	d122      	bne.n	80050de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d11b      	bne.n	80050de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f06f 0208 	mvn.w	r2, #8
 80050ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2204      	movs	r2, #4
 80050b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f003 0303 	and.w	r3, r3, #3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f9c5 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 80050ca:	e005      	b.n	80050d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f9b7 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f9c8 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f003 0310 	and.w	r3, r3, #16
 80050e8:	2b10      	cmp	r3, #16
 80050ea:	d122      	bne.n	8005132 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f003 0310 	and.w	r3, r3, #16
 80050f6:	2b10      	cmp	r3, #16
 80050f8:	d11b      	bne.n	8005132 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f06f 0210 	mvn.w	r2, #16
 8005102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2208      	movs	r2, #8
 8005108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f99b 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 800511e:	e005      	b.n	800512c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f98d 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f99e 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b01      	cmp	r3, #1
 800513e:	d10e      	bne.n	800515e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b01      	cmp	r3, #1
 800514c:	d107      	bne.n	800515e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f06f 0201 	mvn.w	r2, #1
 8005156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7fc ffa7 	bl	80020ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005168:	2b80      	cmp	r3, #128	@ 0x80
 800516a:	d10e      	bne.n	800518a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005176:	2b80      	cmp	r3, #128	@ 0x80
 8005178:	d107      	bne.n	800518a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fd19 	bl	8005bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005198:	d10e      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a4:	2b80      	cmp	r3, #128	@ 0x80
 80051a6:	d107      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80051b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fd0c 	bl	8005bd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c2:	2b40      	cmp	r3, #64	@ 0x40
 80051c4:	d10e      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d0:	2b40      	cmp	r3, #64	@ 0x40
 80051d2:	d107      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f94c 	bl	800547c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	d10e      	bne.n	8005210 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0320 	and.w	r3, r3, #32
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d107      	bne.n	8005210 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0220 	mvn.w	r2, #32
 8005208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fccc 	bl	8005ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005232:	2302      	movs	r3, #2
 8005234:	e0ff      	b.n	8005436 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b14      	cmp	r3, #20
 8005242:	f200 80f0 	bhi.w	8005426 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005246:	a201      	add	r2, pc, #4	@ (adr r2, 800524c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	080052a1 	.word	0x080052a1
 8005250:	08005427 	.word	0x08005427
 8005254:	08005427 	.word	0x08005427
 8005258:	08005427 	.word	0x08005427
 800525c:	080052e1 	.word	0x080052e1
 8005260:	08005427 	.word	0x08005427
 8005264:	08005427 	.word	0x08005427
 8005268:	08005427 	.word	0x08005427
 800526c:	08005323 	.word	0x08005323
 8005270:	08005427 	.word	0x08005427
 8005274:	08005427 	.word	0x08005427
 8005278:	08005427 	.word	0x08005427
 800527c:	08005363 	.word	0x08005363
 8005280:	08005427 	.word	0x08005427
 8005284:	08005427 	.word	0x08005427
 8005288:	08005427 	.word	0x08005427
 800528c:	080053a5 	.word	0x080053a5
 8005290:	08005427 	.word	0x08005427
 8005294:	08005427 	.word	0x08005427
 8005298:	08005427 	.word	0x08005427
 800529c:	080053e5 	.word	0x080053e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f992 	bl	80055d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0208 	orr.w	r2, r2, #8
 80052ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0204 	bic.w	r2, r2, #4
 80052ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6999      	ldr	r1, [r3, #24]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	619a      	str	r2, [r3, #24]
      break;
 80052de:	e0a5      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f9e4 	bl	80056b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800530a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6999      	ldr	r1, [r3, #24]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	021a      	lsls	r2, r3, #8
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	619a      	str	r2, [r3, #24]
      break;
 8005320:	e084      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fa3b 	bl	80057a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0208 	orr.w	r2, r2, #8
 800533c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0204 	bic.w	r2, r2, #4
 800534c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69d9      	ldr	r1, [r3, #28]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	61da      	str	r2, [r3, #28]
      break;
 8005360:	e064      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fa91 	bl	8005890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800537c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800538c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69d9      	ldr	r1, [r3, #28]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	021a      	lsls	r2, r3, #8
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	61da      	str	r2, [r3, #28]
      break;
 80053a2:	e043      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fac8 	bl	8005940 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0208 	orr.w	r2, r2, #8
 80053be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0204 	bic.w	r2, r2, #4
 80053ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80053e2:	e023      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fafa 	bl	80059e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800540e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	021a      	lsls	r2, r3, #8
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005424:	e002      	b.n	800542c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	75fb      	strb	r3, [r7, #23]
      break;
 800542a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005434:	7dfb      	ldrb	r3, [r7, #23]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop

08005440 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a40      	ldr	r2, [pc, #256]	@ (80055a4 <TIM_Base_SetConfig+0x114>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d013      	beq.n	80054d0 <TIM_Base_SetConfig+0x40>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ae:	d00f      	beq.n	80054d0 <TIM_Base_SetConfig+0x40>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a3d      	ldr	r2, [pc, #244]	@ (80055a8 <TIM_Base_SetConfig+0x118>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00b      	beq.n	80054d0 <TIM_Base_SetConfig+0x40>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a3c      	ldr	r2, [pc, #240]	@ (80055ac <TIM_Base_SetConfig+0x11c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d007      	beq.n	80054d0 <TIM_Base_SetConfig+0x40>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a3b      	ldr	r2, [pc, #236]	@ (80055b0 <TIM_Base_SetConfig+0x120>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d003      	beq.n	80054d0 <TIM_Base_SetConfig+0x40>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a3a      	ldr	r2, [pc, #232]	@ (80055b4 <TIM_Base_SetConfig+0x124>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d108      	bne.n	80054e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a2f      	ldr	r2, [pc, #188]	@ (80055a4 <TIM_Base_SetConfig+0x114>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d02b      	beq.n	8005542 <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f0:	d027      	beq.n	8005542 <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a2c      	ldr	r2, [pc, #176]	@ (80055a8 <TIM_Base_SetConfig+0x118>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d023      	beq.n	8005542 <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2b      	ldr	r2, [pc, #172]	@ (80055ac <TIM_Base_SetConfig+0x11c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d01f      	beq.n	8005542 <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2a      	ldr	r2, [pc, #168]	@ (80055b0 <TIM_Base_SetConfig+0x120>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d01b      	beq.n	8005542 <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a29      	ldr	r2, [pc, #164]	@ (80055b4 <TIM_Base_SetConfig+0x124>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d017      	beq.n	8005542 <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a28      	ldr	r2, [pc, #160]	@ (80055b8 <TIM_Base_SetConfig+0x128>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a27      	ldr	r2, [pc, #156]	@ (80055bc <TIM_Base_SetConfig+0x12c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00f      	beq.n	8005542 <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a26      	ldr	r2, [pc, #152]	@ (80055c0 <TIM_Base_SetConfig+0x130>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00b      	beq.n	8005542 <TIM_Base_SetConfig+0xb2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a25      	ldr	r2, [pc, #148]	@ (80055c4 <TIM_Base_SetConfig+0x134>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d007      	beq.n	8005542 <TIM_Base_SetConfig+0xb2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a24      	ldr	r2, [pc, #144]	@ (80055c8 <TIM_Base_SetConfig+0x138>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d003      	beq.n	8005542 <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a23      	ldr	r2, [pc, #140]	@ (80055cc <TIM_Base_SetConfig+0x13c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d108      	bne.n	8005554 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a0a      	ldr	r2, [pc, #40]	@ (80055a4 <TIM_Base_SetConfig+0x114>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_Base_SetConfig+0xf8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a0c      	ldr	r2, [pc, #48]	@ (80055b4 <TIM_Base_SetConfig+0x124>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d103      	bne.n	8005590 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	691a      	ldr	r2, [r3, #16]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	615a      	str	r2, [r3, #20]
}
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40010000 	.word	0x40010000
 80055a8:	40000400 	.word	0x40000400
 80055ac:	40000800 	.word	0x40000800
 80055b0:	40000c00 	.word	0x40000c00
 80055b4:	40010400 	.word	0x40010400
 80055b8:	40014000 	.word	0x40014000
 80055bc:	40014400 	.word	0x40014400
 80055c0:	40014800 	.word	0x40014800
 80055c4:	40001800 	.word	0x40001800
 80055c8:	40001c00 	.word	0x40001c00
 80055cc:	40002000 	.word	0x40002000

080055d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0201 	bic.w	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4b2b      	ldr	r3, [pc, #172]	@ (80056a8 <TIM_OC1_SetConfig+0xd8>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0303 	bic.w	r3, r3, #3
 8005606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f023 0302 	bic.w	r3, r3, #2
 8005618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a21      	ldr	r2, [pc, #132]	@ (80056ac <TIM_OC1_SetConfig+0xdc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <TIM_OC1_SetConfig+0x64>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a20      	ldr	r2, [pc, #128]	@ (80056b0 <TIM_OC1_SetConfig+0xe0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d10c      	bne.n	800564e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f023 0308 	bic.w	r3, r3, #8
 800563a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f023 0304 	bic.w	r3, r3, #4
 800564c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a16      	ldr	r2, [pc, #88]	@ (80056ac <TIM_OC1_SetConfig+0xdc>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d003      	beq.n	800565e <TIM_OC1_SetConfig+0x8e>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a15      	ldr	r2, [pc, #84]	@ (80056b0 <TIM_OC1_SetConfig+0xe0>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d111      	bne.n	8005682 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800566c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	621a      	str	r2, [r3, #32]
}
 800569c:	bf00      	nop
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	fffeff8f 	.word	0xfffeff8f
 80056ac:	40010000 	.word	0x40010000
 80056b0:	40010400 	.word	0x40010400

080056b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f023 0210 	bic.w	r2, r3, #16
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4b2e      	ldr	r3, [pc, #184]	@ (8005798 <TIM_OC2_SetConfig+0xe4>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f023 0320 	bic.w	r3, r3, #32
 80056fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a23      	ldr	r2, [pc, #140]	@ (800579c <TIM_OC2_SetConfig+0xe8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_OC2_SetConfig+0x68>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a22      	ldr	r2, [pc, #136]	@ (80057a0 <TIM_OC2_SetConfig+0xec>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d10d      	bne.n	8005738 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005736:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a18      	ldr	r2, [pc, #96]	@ (800579c <TIM_OC2_SetConfig+0xe8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d003      	beq.n	8005748 <TIM_OC2_SetConfig+0x94>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a17      	ldr	r2, [pc, #92]	@ (80057a0 <TIM_OC2_SetConfig+0xec>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d113      	bne.n	8005770 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800574e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4313      	orrs	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	621a      	str	r2, [r3, #32]
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	feff8fff 	.word	0xfeff8fff
 800579c:	40010000 	.word	0x40010000
 80057a0:	40010400 	.word	0x40010400

080057a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005884 <TIM_OC3_SetConfig+0xe0>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0303 	bic.w	r3, r3, #3
 80057da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a22      	ldr	r2, [pc, #136]	@ (8005888 <TIM_OC3_SetConfig+0xe4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d003      	beq.n	800580a <TIM_OC3_SetConfig+0x66>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a21      	ldr	r2, [pc, #132]	@ (800588c <TIM_OC3_SetConfig+0xe8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d10d      	bne.n	8005826 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a17      	ldr	r2, [pc, #92]	@ (8005888 <TIM_OC3_SetConfig+0xe4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d003      	beq.n	8005836 <TIM_OC3_SetConfig+0x92>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a16      	ldr	r2, [pc, #88]	@ (800588c <TIM_OC3_SetConfig+0xe8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d113      	bne.n	800585e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800583c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	621a      	str	r2, [r3, #32]
}
 8005878:	bf00      	nop
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	fffeff8f 	.word	0xfffeff8f
 8005888:	40010000 	.word	0x40010000
 800588c:	40010400 	.word	0x40010400

08005890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005934 <TIM_OC4_SetConfig+0xa4>)
 80058bc:	4013      	ands	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	031b      	lsls	r3, r3, #12
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a13      	ldr	r2, [pc, #76]	@ (8005938 <TIM_OC4_SetConfig+0xa8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_OC4_SetConfig+0x68>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a12      	ldr	r2, [pc, #72]	@ (800593c <TIM_OC4_SetConfig+0xac>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d109      	bne.n	800590c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	019b      	lsls	r3, r3, #6
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	621a      	str	r2, [r3, #32]
}
 8005926:	bf00      	nop
 8005928:	371c      	adds	r7, #28
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	feff8fff 	.word	0xfeff8fff
 8005938:	40010000 	.word	0x40010000
 800593c:	40010400 	.word	0x40010400

08005940 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4b1b      	ldr	r3, [pc, #108]	@ (80059d8 <TIM_OC5_SetConfig+0x98>)
 800596c:	4013      	ands	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005980:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	041b      	lsls	r3, r3, #16
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a12      	ldr	r2, [pc, #72]	@ (80059dc <TIM_OC5_SetConfig+0x9c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d003      	beq.n	800599e <TIM_OC5_SetConfig+0x5e>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a11      	ldr	r2, [pc, #68]	@ (80059e0 <TIM_OC5_SetConfig+0xa0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d109      	bne.n	80059b2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	621a      	str	r2, [r3, #32]
}
 80059cc:	bf00      	nop
 80059ce:	371c      	adds	r7, #28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	fffeff8f 	.word	0xfffeff8f
 80059dc:	40010000 	.word	0x40010000
 80059e0:	40010400 	.word	0x40010400

080059e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8005a80 <TIM_OC6_SetConfig+0x9c>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	051b      	lsls	r3, r3, #20
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a13      	ldr	r2, [pc, #76]	@ (8005a84 <TIM_OC6_SetConfig+0xa0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_OC6_SetConfig+0x60>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a12      	ldr	r2, [pc, #72]	@ (8005a88 <TIM_OC6_SetConfig+0xa4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d109      	bne.n	8005a58 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	029b      	lsls	r3, r3, #10
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	621a      	str	r2, [r3, #32]
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	feff8fff 	.word	0xfeff8fff
 8005a84:	40010000 	.word	0x40010000
 8005a88:	40010400 	.word	0x40010400

08005a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e06d      	b.n	8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a30      	ldr	r2, [pc, #192]	@ (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a2f      	ldr	r2, [pc, #188]	@ (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d108      	bne.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005ade:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a20      	ldr	r2, [pc, #128]	@ (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d022      	beq.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b16:	d01d      	beq.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d018      	beq.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a1c      	ldr	r2, [pc, #112]	@ (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d013      	beq.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1a      	ldr	r2, [pc, #104]	@ (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00e      	beq.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a15      	ldr	r2, [pc, #84]	@ (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d009      	beq.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a16      	ldr	r2, [pc, #88]	@ (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a15      	ldr	r2, [pc, #84]	@ (8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d10c      	bne.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	40010000 	.word	0x40010000
 8005b90:	40010400 	.word	0x40010400
 8005b94:	40000400 	.word	0x40000400
 8005b98:	40000800 	.word	0x40000800
 8005b9c:	40000c00 	.word	0x40000c00
 8005ba0:	40014000 	.word	0x40014000
 8005ba4:	40001800 	.word	0x40001800

08005ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e040      	b.n	8005c78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d106      	bne.n	8005c0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fb fa1c 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2224      	movs	r2, #36	@ 0x24
 8005c10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0201 	bic.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f82c 	bl	8005c80 <UART_SetConfig>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d101      	bne.n	8005c32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e022      	b.n	8005c78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fa84 	bl	8006148 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fb0b 	bl	800628c <UART_CheckIdleState>
 8005c76:	4603      	mov	r3, r0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4ba6      	ldr	r3, [pc, #664]	@ (8005f44 <UART_SetConfig+0x2c4>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	6979      	ldr	r1, [r7, #20]
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a94      	ldr	r2, [pc, #592]	@ (8005f48 <UART_SetConfig+0x2c8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d120      	bne.n	8005d3e <UART_SetConfig+0xbe>
 8005cfc:	4b93      	ldr	r3, [pc, #588]	@ (8005f4c <UART_SetConfig+0x2cc>)
 8005cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d816      	bhi.n	8005d38 <UART_SetConfig+0xb8>
 8005d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d10 <UART_SetConfig+0x90>)
 8005d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d10:	08005d21 	.word	0x08005d21
 8005d14:	08005d2d 	.word	0x08005d2d
 8005d18:	08005d27 	.word	0x08005d27
 8005d1c:	08005d33 	.word	0x08005d33
 8005d20:	2301      	movs	r3, #1
 8005d22:	77fb      	strb	r3, [r7, #31]
 8005d24:	e150      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005d26:	2302      	movs	r3, #2
 8005d28:	77fb      	strb	r3, [r7, #31]
 8005d2a:	e14d      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005d2c:	2304      	movs	r3, #4
 8005d2e:	77fb      	strb	r3, [r7, #31]
 8005d30:	e14a      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005d32:	2308      	movs	r3, #8
 8005d34:	77fb      	strb	r3, [r7, #31]
 8005d36:	e147      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005d38:	2310      	movs	r3, #16
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	e144      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a83      	ldr	r2, [pc, #524]	@ (8005f50 <UART_SetConfig+0x2d0>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d132      	bne.n	8005dae <UART_SetConfig+0x12e>
 8005d48:	4b80      	ldr	r3, [pc, #512]	@ (8005f4c <UART_SetConfig+0x2cc>)
 8005d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d4e:	f003 030c 	and.w	r3, r3, #12
 8005d52:	2b0c      	cmp	r3, #12
 8005d54:	d828      	bhi.n	8005da8 <UART_SetConfig+0x128>
 8005d56:	a201      	add	r2, pc, #4	@ (adr r2, 8005d5c <UART_SetConfig+0xdc>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005d91 	.word	0x08005d91
 8005d60:	08005da9 	.word	0x08005da9
 8005d64:	08005da9 	.word	0x08005da9
 8005d68:	08005da9 	.word	0x08005da9
 8005d6c:	08005d9d 	.word	0x08005d9d
 8005d70:	08005da9 	.word	0x08005da9
 8005d74:	08005da9 	.word	0x08005da9
 8005d78:	08005da9 	.word	0x08005da9
 8005d7c:	08005d97 	.word	0x08005d97
 8005d80:	08005da9 	.word	0x08005da9
 8005d84:	08005da9 	.word	0x08005da9
 8005d88:	08005da9 	.word	0x08005da9
 8005d8c:	08005da3 	.word	0x08005da3
 8005d90:	2300      	movs	r3, #0
 8005d92:	77fb      	strb	r3, [r7, #31]
 8005d94:	e118      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005d96:	2302      	movs	r3, #2
 8005d98:	77fb      	strb	r3, [r7, #31]
 8005d9a:	e115      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e112      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005da2:	2308      	movs	r3, #8
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e10f      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005da8:	2310      	movs	r3, #16
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e10c      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a68      	ldr	r2, [pc, #416]	@ (8005f54 <UART_SetConfig+0x2d4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d120      	bne.n	8005dfa <UART_SetConfig+0x17a>
 8005db8:	4b64      	ldr	r3, [pc, #400]	@ (8005f4c <UART_SetConfig+0x2cc>)
 8005dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dbe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005dc2:	2b30      	cmp	r3, #48	@ 0x30
 8005dc4:	d013      	beq.n	8005dee <UART_SetConfig+0x16e>
 8005dc6:	2b30      	cmp	r3, #48	@ 0x30
 8005dc8:	d814      	bhi.n	8005df4 <UART_SetConfig+0x174>
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d009      	beq.n	8005de2 <UART_SetConfig+0x162>
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	d810      	bhi.n	8005df4 <UART_SetConfig+0x174>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <UART_SetConfig+0x15c>
 8005dd6:	2b10      	cmp	r3, #16
 8005dd8:	d006      	beq.n	8005de8 <UART_SetConfig+0x168>
 8005dda:	e00b      	b.n	8005df4 <UART_SetConfig+0x174>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	77fb      	strb	r3, [r7, #31]
 8005de0:	e0f2      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005de2:	2302      	movs	r3, #2
 8005de4:	77fb      	strb	r3, [r7, #31]
 8005de6:	e0ef      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005de8:	2304      	movs	r3, #4
 8005dea:	77fb      	strb	r3, [r7, #31]
 8005dec:	e0ec      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005dee:	2308      	movs	r3, #8
 8005df0:	77fb      	strb	r3, [r7, #31]
 8005df2:	e0e9      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005df4:	2310      	movs	r3, #16
 8005df6:	77fb      	strb	r3, [r7, #31]
 8005df8:	e0e6      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a56      	ldr	r2, [pc, #344]	@ (8005f58 <UART_SetConfig+0x2d8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d120      	bne.n	8005e46 <UART_SetConfig+0x1c6>
 8005e04:	4b51      	ldr	r3, [pc, #324]	@ (8005f4c <UART_SetConfig+0x2cc>)
 8005e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e10:	d013      	beq.n	8005e3a <UART_SetConfig+0x1ba>
 8005e12:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e14:	d814      	bhi.n	8005e40 <UART_SetConfig+0x1c0>
 8005e16:	2b80      	cmp	r3, #128	@ 0x80
 8005e18:	d009      	beq.n	8005e2e <UART_SetConfig+0x1ae>
 8005e1a:	2b80      	cmp	r3, #128	@ 0x80
 8005e1c:	d810      	bhi.n	8005e40 <UART_SetConfig+0x1c0>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <UART_SetConfig+0x1a8>
 8005e22:	2b40      	cmp	r3, #64	@ 0x40
 8005e24:	d006      	beq.n	8005e34 <UART_SetConfig+0x1b4>
 8005e26:	e00b      	b.n	8005e40 <UART_SetConfig+0x1c0>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	77fb      	strb	r3, [r7, #31]
 8005e2c:	e0cc      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	77fb      	strb	r3, [r7, #31]
 8005e32:	e0c9      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005e34:	2304      	movs	r3, #4
 8005e36:	77fb      	strb	r3, [r7, #31]
 8005e38:	e0c6      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	77fb      	strb	r3, [r7, #31]
 8005e3e:	e0c3      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005e40:	2310      	movs	r3, #16
 8005e42:	77fb      	strb	r3, [r7, #31]
 8005e44:	e0c0      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a44      	ldr	r2, [pc, #272]	@ (8005f5c <UART_SetConfig+0x2dc>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d125      	bne.n	8005e9c <UART_SetConfig+0x21c>
 8005e50:	4b3e      	ldr	r3, [pc, #248]	@ (8005f4c <UART_SetConfig+0x2cc>)
 8005e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e5e:	d017      	beq.n	8005e90 <UART_SetConfig+0x210>
 8005e60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e64:	d817      	bhi.n	8005e96 <UART_SetConfig+0x216>
 8005e66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e6a:	d00b      	beq.n	8005e84 <UART_SetConfig+0x204>
 8005e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e70:	d811      	bhi.n	8005e96 <UART_SetConfig+0x216>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <UART_SetConfig+0x1fe>
 8005e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e7a:	d006      	beq.n	8005e8a <UART_SetConfig+0x20a>
 8005e7c:	e00b      	b.n	8005e96 <UART_SetConfig+0x216>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	77fb      	strb	r3, [r7, #31]
 8005e82:	e0a1      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005e84:	2302      	movs	r3, #2
 8005e86:	77fb      	strb	r3, [r7, #31]
 8005e88:	e09e      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005e8a:	2304      	movs	r3, #4
 8005e8c:	77fb      	strb	r3, [r7, #31]
 8005e8e:	e09b      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005e90:	2308      	movs	r3, #8
 8005e92:	77fb      	strb	r3, [r7, #31]
 8005e94:	e098      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005e96:	2310      	movs	r3, #16
 8005e98:	77fb      	strb	r3, [r7, #31]
 8005e9a:	e095      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a2f      	ldr	r2, [pc, #188]	@ (8005f60 <UART_SetConfig+0x2e0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d125      	bne.n	8005ef2 <UART_SetConfig+0x272>
 8005ea6:	4b29      	ldr	r3, [pc, #164]	@ (8005f4c <UART_SetConfig+0x2cc>)
 8005ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005eb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005eb4:	d017      	beq.n	8005ee6 <UART_SetConfig+0x266>
 8005eb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005eba:	d817      	bhi.n	8005eec <UART_SetConfig+0x26c>
 8005ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ec0:	d00b      	beq.n	8005eda <UART_SetConfig+0x25a>
 8005ec2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ec6:	d811      	bhi.n	8005eec <UART_SetConfig+0x26c>
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <UART_SetConfig+0x254>
 8005ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ed0:	d006      	beq.n	8005ee0 <UART_SetConfig+0x260>
 8005ed2:	e00b      	b.n	8005eec <UART_SetConfig+0x26c>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e076      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005eda:	2302      	movs	r3, #2
 8005edc:	77fb      	strb	r3, [r7, #31]
 8005ede:	e073      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005ee0:	2304      	movs	r3, #4
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	e070      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005ee6:	2308      	movs	r3, #8
 8005ee8:	77fb      	strb	r3, [r7, #31]
 8005eea:	e06d      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005eec:	2310      	movs	r3, #16
 8005eee:	77fb      	strb	r3, [r7, #31]
 8005ef0:	e06a      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8005f64 <UART_SetConfig+0x2e4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d138      	bne.n	8005f6e <UART_SetConfig+0x2ee>
 8005efc:	4b13      	ldr	r3, [pc, #76]	@ (8005f4c <UART_SetConfig+0x2cc>)
 8005efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f02:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005f06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f0a:	d017      	beq.n	8005f3c <UART_SetConfig+0x2bc>
 8005f0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f10:	d82a      	bhi.n	8005f68 <UART_SetConfig+0x2e8>
 8005f12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f16:	d00b      	beq.n	8005f30 <UART_SetConfig+0x2b0>
 8005f18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f1c:	d824      	bhi.n	8005f68 <UART_SetConfig+0x2e8>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <UART_SetConfig+0x2aa>
 8005f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f26:	d006      	beq.n	8005f36 <UART_SetConfig+0x2b6>
 8005f28:	e01e      	b.n	8005f68 <UART_SetConfig+0x2e8>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	77fb      	strb	r3, [r7, #31]
 8005f2e:	e04b      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005f30:	2302      	movs	r3, #2
 8005f32:	77fb      	strb	r3, [r7, #31]
 8005f34:	e048      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005f36:	2304      	movs	r3, #4
 8005f38:	77fb      	strb	r3, [r7, #31]
 8005f3a:	e045      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005f3c:	2308      	movs	r3, #8
 8005f3e:	77fb      	strb	r3, [r7, #31]
 8005f40:	e042      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005f42:	bf00      	nop
 8005f44:	efff69f3 	.word	0xefff69f3
 8005f48:	40011000 	.word	0x40011000
 8005f4c:	40023800 	.word	0x40023800
 8005f50:	40004400 	.word	0x40004400
 8005f54:	40004800 	.word	0x40004800
 8005f58:	40004c00 	.word	0x40004c00
 8005f5c:	40005000 	.word	0x40005000
 8005f60:	40011400 	.word	0x40011400
 8005f64:	40007800 	.word	0x40007800
 8005f68:	2310      	movs	r3, #16
 8005f6a:	77fb      	strb	r3, [r7, #31]
 8005f6c:	e02c      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a72      	ldr	r2, [pc, #456]	@ (800613c <UART_SetConfig+0x4bc>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d125      	bne.n	8005fc4 <UART_SetConfig+0x344>
 8005f78:	4b71      	ldr	r3, [pc, #452]	@ (8006140 <UART_SetConfig+0x4c0>)
 8005f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005f82:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005f86:	d017      	beq.n	8005fb8 <UART_SetConfig+0x338>
 8005f88:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005f8c:	d817      	bhi.n	8005fbe <UART_SetConfig+0x33e>
 8005f8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f92:	d00b      	beq.n	8005fac <UART_SetConfig+0x32c>
 8005f94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f98:	d811      	bhi.n	8005fbe <UART_SetConfig+0x33e>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <UART_SetConfig+0x326>
 8005f9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fa2:	d006      	beq.n	8005fb2 <UART_SetConfig+0x332>
 8005fa4:	e00b      	b.n	8005fbe <UART_SetConfig+0x33e>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	77fb      	strb	r3, [r7, #31]
 8005faa:	e00d      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005fac:	2302      	movs	r3, #2
 8005fae:	77fb      	strb	r3, [r7, #31]
 8005fb0:	e00a      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005fb2:	2304      	movs	r3, #4
 8005fb4:	77fb      	strb	r3, [r7, #31]
 8005fb6:	e007      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005fb8:	2308      	movs	r3, #8
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e004      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005fbe:	2310      	movs	r3, #16
 8005fc0:	77fb      	strb	r3, [r7, #31]
 8005fc2:	e001      	b.n	8005fc8 <UART_SetConfig+0x348>
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fd0:	d15b      	bne.n	800608a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005fd2:	7ffb      	ldrb	r3, [r7, #31]
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d828      	bhi.n	800602a <UART_SetConfig+0x3aa>
 8005fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe0 <UART_SetConfig+0x360>)
 8005fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fde:	bf00      	nop
 8005fe0:	08006005 	.word	0x08006005
 8005fe4:	0800600d 	.word	0x0800600d
 8005fe8:	08006015 	.word	0x08006015
 8005fec:	0800602b 	.word	0x0800602b
 8005ff0:	0800601b 	.word	0x0800601b
 8005ff4:	0800602b 	.word	0x0800602b
 8005ff8:	0800602b 	.word	0x0800602b
 8005ffc:	0800602b 	.word	0x0800602b
 8006000:	08006023 	.word	0x08006023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006004:	f7fe faaa 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8006008:	61b8      	str	r0, [r7, #24]
        break;
 800600a:	e013      	b.n	8006034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800600c:	f7fe faba 	bl	8004584 <HAL_RCC_GetPCLK2Freq>
 8006010:	61b8      	str	r0, [r7, #24]
        break;
 8006012:	e00f      	b.n	8006034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006014:	4b4b      	ldr	r3, [pc, #300]	@ (8006144 <UART_SetConfig+0x4c4>)
 8006016:	61bb      	str	r3, [r7, #24]
        break;
 8006018:	e00c      	b.n	8006034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800601a:	f7fe f98d 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 800601e:	61b8      	str	r0, [r7, #24]
        break;
 8006020:	e008      	b.n	8006034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006026:	61bb      	str	r3, [r7, #24]
        break;
 8006028:	e004      	b.n	8006034 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	77bb      	strb	r3, [r7, #30]
        break;
 8006032:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d074      	beq.n	8006124 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	005a      	lsls	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	085b      	lsrs	r3, r3, #1
 8006044:	441a      	add	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	fbb2 f3f3 	udiv	r3, r2, r3
 800604e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2b0f      	cmp	r3, #15
 8006054:	d916      	bls.n	8006084 <UART_SetConfig+0x404>
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800605c:	d212      	bcs.n	8006084 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	b29b      	uxth	r3, r3
 8006062:	f023 030f 	bic.w	r3, r3, #15
 8006066:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	085b      	lsrs	r3, r3, #1
 800606c:	b29b      	uxth	r3, r3
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	b29a      	uxth	r2, r3
 8006074:	89fb      	ldrh	r3, [r7, #14]
 8006076:	4313      	orrs	r3, r2
 8006078:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	89fa      	ldrh	r2, [r7, #14]
 8006080:	60da      	str	r2, [r3, #12]
 8006082:	e04f      	b.n	8006124 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	77bb      	strb	r3, [r7, #30]
 8006088:	e04c      	b.n	8006124 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800608a:	7ffb      	ldrb	r3, [r7, #31]
 800608c:	2b08      	cmp	r3, #8
 800608e:	d828      	bhi.n	80060e2 <UART_SetConfig+0x462>
 8006090:	a201      	add	r2, pc, #4	@ (adr r2, 8006098 <UART_SetConfig+0x418>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060bd 	.word	0x080060bd
 800609c:	080060c5 	.word	0x080060c5
 80060a0:	080060cd 	.word	0x080060cd
 80060a4:	080060e3 	.word	0x080060e3
 80060a8:	080060d3 	.word	0x080060d3
 80060ac:	080060e3 	.word	0x080060e3
 80060b0:	080060e3 	.word	0x080060e3
 80060b4:	080060e3 	.word	0x080060e3
 80060b8:	080060db 	.word	0x080060db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060bc:	f7fe fa4e 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 80060c0:	61b8      	str	r0, [r7, #24]
        break;
 80060c2:	e013      	b.n	80060ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060c4:	f7fe fa5e 	bl	8004584 <HAL_RCC_GetPCLK2Freq>
 80060c8:	61b8      	str	r0, [r7, #24]
        break;
 80060ca:	e00f      	b.n	80060ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006144 <UART_SetConfig+0x4c4>)
 80060ce:	61bb      	str	r3, [r7, #24]
        break;
 80060d0:	e00c      	b.n	80060ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060d2:	f7fe f931 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 80060d6:	61b8      	str	r0, [r7, #24]
        break;
 80060d8:	e008      	b.n	80060ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060de:	61bb      	str	r3, [r7, #24]
        break;
 80060e0:	e004      	b.n	80060ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	77bb      	strb	r3, [r7, #30]
        break;
 80060ea:	bf00      	nop
    }

    if (pclk != 0U)
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d018      	beq.n	8006124 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	085a      	lsrs	r2, r3, #1
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	441a      	add	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	fbb2 f3f3 	udiv	r3, r2, r3
 8006104:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	2b0f      	cmp	r3, #15
 800610a:	d909      	bls.n	8006120 <UART_SetConfig+0x4a0>
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006112:	d205      	bcs.n	8006120 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	b29a      	uxth	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60da      	str	r2, [r3, #12]
 800611e:	e001      	b.n	8006124 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006130:	7fbb      	ldrb	r3, [r7, #30]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3720      	adds	r7, #32
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40007c00 	.word	0x40007c00
 8006140:	40023800 	.word	0x40023800
 8006144:	00f42400 	.word	0x00f42400

08006148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00a      	beq.n	80061d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fe:	f003 0320 	and.w	r3, r3, #32
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01a      	beq.n	800625e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006246:	d10a      	bne.n	800625e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	605a      	str	r2, [r3, #4]
  }
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af02      	add	r7, sp, #8
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800629c:	f7fc f86a 	bl	8002374 <HAL_GetTick>
 80062a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0308 	and.w	r3, r3, #8
 80062ac:	2b08      	cmp	r3, #8
 80062ae:	d10e      	bne.n	80062ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f81b 	bl	80062fa <UART_WaitOnFlagUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e011      	b.n	80062f2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b09c      	sub	sp, #112	@ 0x70
 80062fe:	af00      	add	r7, sp, #0
 8006300:	60f8      	str	r0, [r7, #12]
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	603b      	str	r3, [r7, #0]
 8006306:	4613      	mov	r3, r2
 8006308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800630a:	e0a7      	b.n	800645c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800630c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800630e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006312:	f000 80a3 	beq.w	800645c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006316:	f7fc f82d 	bl	8002374 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006322:	429a      	cmp	r2, r3
 8006324:	d302      	bcc.n	800632c <UART_WaitOnFlagUntilTimeout+0x32>
 8006326:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006328:	2b00      	cmp	r3, #0
 800632a:	d13f      	bne.n	80063ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800633a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800633c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006340:	667b      	str	r3, [r7, #100]	@ 0x64
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800634a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800634c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006350:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e6      	bne.n	800632c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3308      	adds	r3, #8
 8006364:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800636e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006370:	f023 0301 	bic.w	r3, r3, #1
 8006374:	663b      	str	r3, [r7, #96]	@ 0x60
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3308      	adds	r3, #8
 800637c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800637e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006380:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006384:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800638c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e5      	bne.n	800635e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2220      	movs	r2, #32
 8006396:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2220      	movs	r2, #32
 800639c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e068      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0304 	and.w	r3, r3, #4
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d050      	beq.n	800645c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063c8:	d148      	bne.n	800645c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063dc:	e853 3f00 	ldrex	r3, [r3]
 80063e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80063e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80063f4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e6      	bne.n	80063d4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3308      	adds	r3, #8
 800640c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	613b      	str	r3, [r7, #16]
   return(result);
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f023 0301 	bic.w	r3, r3, #1
 800641c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3308      	adds	r3, #8
 8006424:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006426:	623a      	str	r2, [r7, #32]
 8006428:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642a:	69f9      	ldr	r1, [r7, #28]
 800642c:	6a3a      	ldr	r2, [r7, #32]
 800642e:	e841 2300 	strex	r3, r2, [r1]
 8006432:	61bb      	str	r3, [r7, #24]
   return(result);
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1e5      	bne.n	8006406 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2220      	movs	r2, #32
 800643e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2220      	movs	r2, #32
 8006444:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e010      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69da      	ldr	r2, [r3, #28]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	4013      	ands	r3, r2
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	429a      	cmp	r2, r3
 800646a:	bf0c      	ite	eq
 800646c:	2301      	moveq	r3, #1
 800646e:	2300      	movne	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	461a      	mov	r2, r3
 8006474:	79fb      	ldrb	r3, [r7, #7]
 8006476:	429a      	cmp	r2, r3
 8006478:	f43f af48 	beq.w	800630c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3770      	adds	r7, #112	@ 0x70
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006488:	b084      	sub	sp, #16
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	f107 001c 	add.w	r0, r7, #28
 8006496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800649a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649c:	2b01      	cmp	r3, #1
 800649e:	d120      	bne.n	80064e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	4b20      	ldr	r3, [pc, #128]	@ (8006534 <USB_CoreInit+0xac>)
 80064b2:	4013      	ands	r3, r2
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d105      	bne.n	80064d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fa96 	bl	8006a08 <USB_CoreReset>
 80064dc:	4603      	mov	r3, r0
 80064de:	73fb      	strb	r3, [r7, #15]
 80064e0:	e010      	b.n	8006504 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fa8a 	bl	8006a08 <USB_CoreReset>
 80064f4:	4603      	mov	r3, r0
 80064f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006506:	2b01      	cmp	r3, #1
 8006508:	d10b      	bne.n	8006522 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f043 0206 	orr.w	r2, r3, #6
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f043 0220 	orr.w	r2, r3, #32
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006522:	7bfb      	ldrb	r3, [r7, #15]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800652e:	b004      	add	sp, #16
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	ffbdffbf 	.word	0xffbdffbf

08006538 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f023 0201 	bic.w	r2, r3, #1
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	460b      	mov	r3, r1
 8006564:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d115      	bne.n	80065a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006588:	2001      	movs	r0, #1
 800658a:	f7fb feff 	bl	800238c <HAL_Delay>
      ms++;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3301      	adds	r3, #1
 8006592:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fa29 	bl	80069ec <USB_GetMode>
 800659a:	4603      	mov	r3, r0
 800659c:	2b01      	cmp	r3, #1
 800659e:	d01e      	beq.n	80065de <USB_SetCurrentMode+0x84>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b31      	cmp	r3, #49	@ 0x31
 80065a4:	d9f0      	bls.n	8006588 <USB_SetCurrentMode+0x2e>
 80065a6:	e01a      	b.n	80065de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065a8:	78fb      	ldrb	r3, [r7, #3]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d115      	bne.n	80065da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065ba:	2001      	movs	r0, #1
 80065bc:	f7fb fee6 	bl	800238c <HAL_Delay>
      ms++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fa10 	bl	80069ec <USB_GetMode>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d005      	beq.n	80065de <USB_SetCurrentMode+0x84>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2b31      	cmp	r3, #49	@ 0x31
 80065d6:	d9f0      	bls.n	80065ba <USB_SetCurrentMode+0x60>
 80065d8:	e001      	b.n	80065de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e005      	b.n	80065ea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b32      	cmp	r3, #50	@ 0x32
 80065e2:	d101      	bne.n	80065e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e000      	b.n	80065ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065f4:	b084      	sub	sp, #16
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b086      	sub	sp, #24
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800660e:	2300      	movs	r3, #0
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	e009      	b.n	8006628 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	3340      	adds	r3, #64	@ 0x40
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	2200      	movs	r2, #0
 8006620:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	3301      	adds	r3, #1
 8006626:	613b      	str	r3, [r7, #16]
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b0e      	cmp	r3, #14
 800662c:	d9f2      	bls.n	8006614 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800662e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006630:	2b00      	cmp	r3, #0
 8006632:	d11c      	bne.n	800666e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006642:	f043 0302 	orr.w	r3, r3, #2
 8006646:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	601a      	str	r2, [r3, #0]
 800666c:	e005      	b.n	800667a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006672:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006680:	461a      	mov	r2, r3
 8006682:	2300      	movs	r3, #0
 8006684:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800668c:	4619      	mov	r1, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006694:	461a      	mov	r2, r3
 8006696:	680b      	ldr	r3, [r1, #0]
 8006698:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800669a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669c:	2b01      	cmp	r3, #1
 800669e:	d10c      	bne.n	80066ba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80066a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d104      	bne.n	80066b0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066a6:	2100      	movs	r1, #0
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f965 	bl	8006978 <USB_SetDevSpeed>
 80066ae:	e008      	b.n	80066c2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066b0:	2101      	movs	r1, #1
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f960 	bl	8006978 <USB_SetDevSpeed>
 80066b8:	e003      	b.n	80066c2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066ba:	2103      	movs	r1, #3
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f95b 	bl	8006978 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066c2:	2110      	movs	r1, #16
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f8f3 	bl	80068b0 <USB_FlushTxFifo>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f91f 	bl	8006918 <USB_FlushRxFifo>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ea:	461a      	mov	r2, r3
 80066ec:	2300      	movs	r3, #0
 80066ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066f6:	461a      	mov	r2, r3
 80066f8:	2300      	movs	r3, #0
 80066fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006702:	461a      	mov	r2, r3
 8006704:	2300      	movs	r3, #0
 8006706:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006708:	2300      	movs	r3, #0
 800670a:	613b      	str	r3, [r7, #16]
 800670c:	e043      	b.n	8006796 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006720:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006724:	d118      	bne.n	8006758 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10a      	bne.n	8006742 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006738:	461a      	mov	r2, r3
 800673a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	e013      	b.n	800676a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800674e:	461a      	mov	r2, r3
 8006750:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	e008      	b.n	800676a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006764:	461a      	mov	r2, r3
 8006766:	2300      	movs	r3, #0
 8006768:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006776:	461a      	mov	r2, r3
 8006778:	2300      	movs	r3, #0
 800677a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006788:	461a      	mov	r2, r3
 800678a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800678e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	3301      	adds	r3, #1
 8006794:	613b      	str	r3, [r7, #16]
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	429a      	cmp	r2, r3
 800679c:	d3b7      	bcc.n	800670e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800679e:	2300      	movs	r3, #0
 80067a0:	613b      	str	r3, [r7, #16]
 80067a2:	e043      	b.n	800682c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067ba:	d118      	bne.n	80067ee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ce:	461a      	mov	r2, r3
 80067d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	e013      	b.n	8006800 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e4:	461a      	mov	r2, r3
 80067e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	e008      	b.n	8006800 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067fa:	461a      	mov	r2, r3
 80067fc:	2300      	movs	r3, #0
 80067fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800680c:	461a      	mov	r2, r3
 800680e:	2300      	movs	r3, #0
 8006810:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681e:	461a      	mov	r2, r3
 8006820:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006824:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	3301      	adds	r3, #1
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	429a      	cmp	r2, r3
 8006832:	d3b7      	bcc.n	80067a4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006842:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006846:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006854:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006858:	2b00      	cmp	r3, #0
 800685a:	d105      	bne.n	8006868 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	f043 0210 	orr.w	r2, r3, #16
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699a      	ldr	r2, [r3, #24]
 800686c:	4b0e      	ldr	r3, [pc, #56]	@ (80068a8 <USB_DevInit+0x2b4>)
 800686e:	4313      	orrs	r3, r2
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d005      	beq.n	8006886 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f043 0208 	orr.w	r2, r3, #8
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006888:	2b01      	cmp	r3, #1
 800688a:	d105      	bne.n	8006898 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699a      	ldr	r2, [r3, #24]
 8006890:	4b06      	ldr	r3, [pc, #24]	@ (80068ac <USB_DevInit+0x2b8>)
 8006892:	4313      	orrs	r3, r2
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006898:	7dfb      	ldrb	r3, [r7, #23]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068a4:	b004      	add	sp, #16
 80068a6:	4770      	bx	lr
 80068a8:	803c3800 	.word	0x803c3800
 80068ac:	40000004 	.word	0x40000004

080068b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3301      	adds	r3, #1
 80068c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4a13      	ldr	r2, [pc, #76]	@ (8006914 <USB_FlushTxFifo+0x64>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d901      	bls.n	80068d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e01b      	b.n	8006908 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	daf2      	bge.n	80068be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	019b      	lsls	r3, r3, #6
 80068e0:	f043 0220 	orr.w	r2, r3, #32
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3301      	adds	r3, #1
 80068ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4a08      	ldr	r2, [pc, #32]	@ (8006914 <USB_FlushTxFifo+0x64>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d901      	bls.n	80068fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e006      	b.n	8006908 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b20      	cmp	r3, #32
 8006904:	d0f0      	beq.n	80068e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	00030d40 	.word	0x00030d40

08006918 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3301      	adds	r3, #1
 8006928:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4a11      	ldr	r2, [pc, #68]	@ (8006974 <USB_FlushRxFifo+0x5c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d901      	bls.n	8006936 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e018      	b.n	8006968 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	daf2      	bge.n	8006924 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2210      	movs	r2, #16
 8006946:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3301      	adds	r3, #1
 800694c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4a08      	ldr	r2, [pc, #32]	@ (8006974 <USB_FlushRxFifo+0x5c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d901      	bls.n	800695a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e006      	b.n	8006968 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f003 0310 	and.w	r3, r3, #16
 8006962:	2b10      	cmp	r3, #16
 8006964:	d0f0      	beq.n	8006948 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	00030d40 	.word	0x00030d40

08006978 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	460b      	mov	r3, r1
 8006982:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	78fb      	ldrb	r3, [r7, #3]
 8006992:	68f9      	ldr	r1, [r7, #12]
 8006994:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006998:	4313      	orrs	r3, r2
 800699a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b085      	sub	sp, #20
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069c4:	f023 0303 	bic.w	r3, r3, #3
 80069c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069d8:	f043 0302 	orr.w	r3, r3, #2
 80069dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	f003 0301 	and.w	r3, r3, #1
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3301      	adds	r3, #1
 8006a18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4a13      	ldr	r2, [pc, #76]	@ (8006a6c <USB_CoreReset+0x64>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d901      	bls.n	8006a26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e01b      	b.n	8006a5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	daf2      	bge.n	8006a14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f043 0201 	orr.w	r2, r3, #1
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3301      	adds	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4a09      	ldr	r2, [pc, #36]	@ (8006a6c <USB_CoreReset+0x64>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d901      	bls.n	8006a50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e006      	b.n	8006a5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d0f0      	beq.n	8006a3e <USB_CoreReset+0x36>

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	00030d40 	.word	0x00030d40

08006a70 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af04      	add	r7, sp, #16
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8006a7c:	230a      	movs	r3, #10
 8006a7e:	9302      	str	r3, [sp, #8]
 8006a80:	2301      	movs	r3, #1
 8006a82:	9301      	str	r3, [sp, #4]
 8006a84:	1cfb      	adds	r3, r7, #3
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	2301      	movs	r3, #1
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2178      	movs	r1, #120	@ 0x78
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fc fb78 	bl	8003184 <HAL_I2C_Mem_Write>
 8006a94:	4603      	mov	r3, r0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8006aa8:	2064      	movs	r0, #100	@ 0x64
 8006aaa:	f7fb fc6f 	bl	800238c <HAL_Delay>
    int status = 0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8006ab2:	21ae      	movs	r1, #174	@ 0xae
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7ff ffdb 	bl	8006a70 <ssd1306_WriteCommand>
 8006aba:	4603      	mov	r3, r0
 8006abc:	461a      	mov	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8006ac4:	2120      	movs	r1, #32
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff ffd2 	bl	8006a70 <ssd1306_WriteCommand>
 8006acc:	4603      	mov	r3, r0
 8006ace:	461a      	mov	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8006ad6:	2110      	movs	r1, #16
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7ff ffc9 	bl	8006a70 <ssd1306_WriteCommand>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8006ae8:	21b0      	movs	r1, #176	@ 0xb0
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7ff ffc0 	bl	8006a70 <ssd1306_WriteCommand>
 8006af0:	4603      	mov	r3, r0
 8006af2:	461a      	mov	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8006afa:	21c8      	movs	r1, #200	@ 0xc8
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7ff ffb7 	bl	8006a70 <ssd1306_WriteCommand>
 8006b02:	4603      	mov	r3, r0
 8006b04:	461a      	mov	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4413      	add	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff ffae 	bl	8006a70 <ssd1306_WriteCommand>
 8006b14:	4603      	mov	r3, r0
 8006b16:	461a      	mov	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8006b1e:	2110      	movs	r1, #16
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff ffa5 	bl	8006a70 <ssd1306_WriteCommand>
 8006b26:	4603      	mov	r3, r0
 8006b28:	461a      	mov	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8006b30:	2140      	movs	r1, #64	@ 0x40
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7ff ff9c 	bl	8006a70 <ssd1306_WriteCommand>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8006b42:	2181      	movs	r1, #129	@ 0x81
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7ff ff93 	bl	8006a70 <ssd1306_WriteCommand>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4413      	add	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8006b54:	21ff      	movs	r1, #255	@ 0xff
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff ff8a 	bl	8006a70 <ssd1306_WriteCommand>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	461a      	mov	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4413      	add	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8006b66:	21a1      	movs	r1, #161	@ 0xa1
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff ff81 	bl	8006a70 <ssd1306_WriteCommand>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	461a      	mov	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	4413      	add	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8006b78:	21a6      	movs	r1, #166	@ 0xa6
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7ff ff78 	bl	8006a70 <ssd1306_WriteCommand>
 8006b80:	4603      	mov	r3, r0
 8006b82:	461a      	mov	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8006b8a:	21a8      	movs	r1, #168	@ 0xa8
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff ff6f 	bl	8006a70 <ssd1306_WriteCommand>
 8006b92:	4603      	mov	r3, r0
 8006b94:	461a      	mov	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4413      	add	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8006b9c:	213f      	movs	r1, #63	@ 0x3f
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7ff ff66 	bl	8006a70 <ssd1306_WriteCommand>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4413      	add	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006bae:	21a4      	movs	r1, #164	@ 0xa4
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff ff5d 	bl	8006a70 <ssd1306_WriteCommand>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8006bc0:	21d3      	movs	r1, #211	@ 0xd3
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff ff54 	bl	8006a70 <ssd1306_WriteCommand>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	461a      	mov	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4413      	add	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff ff4b 	bl	8006a70 <ssd1306_WriteCommand>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	461a      	mov	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4413      	add	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8006be4:	21d5      	movs	r1, #213	@ 0xd5
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7ff ff42 	bl	8006a70 <ssd1306_WriteCommand>
 8006bec:	4603      	mov	r3, r0
 8006bee:	461a      	mov	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8006bf6:	21f0      	movs	r1, #240	@ 0xf0
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff ff39 	bl	8006a70 <ssd1306_WriteCommand>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	461a      	mov	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4413      	add	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8006c08:	21d9      	movs	r1, #217	@ 0xd9
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff ff30 	bl	8006a70 <ssd1306_WriteCommand>
 8006c10:	4603      	mov	r3, r0
 8006c12:	461a      	mov	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4413      	add	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8006c1a:	2122      	movs	r1, #34	@ 0x22
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff ff27 	bl	8006a70 <ssd1306_WriteCommand>
 8006c22:	4603      	mov	r3, r0
 8006c24:	461a      	mov	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4413      	add	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8006c2c:	21da      	movs	r1, #218	@ 0xda
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff ff1e 	bl	8006a70 <ssd1306_WriteCommand>
 8006c34:	4603      	mov	r3, r0
 8006c36:	461a      	mov	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8006c3e:	2112      	movs	r1, #18
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7ff ff15 	bl	8006a70 <ssd1306_WriteCommand>
 8006c46:	4603      	mov	r3, r0
 8006c48:	461a      	mov	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8006c50:	21db      	movs	r1, #219	@ 0xdb
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff ff0c 	bl	8006a70 <ssd1306_WriteCommand>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8006c62:	2120      	movs	r1, #32
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff ff03 	bl	8006a70 <ssd1306_WriteCommand>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4413      	add	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8006c74:	218d      	movs	r1, #141	@ 0x8d
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7ff fefa 	bl	8006a70 <ssd1306_WriteCommand>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	461a      	mov	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8006c86:	2114      	movs	r1, #20
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff fef1 	bl	8006a70 <ssd1306_WriteCommand>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	461a      	mov	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4413      	add	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8006c98:	21af      	movs	r1, #175	@ 0xaf
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff fee8 	bl	8006a70 <ssd1306_WriteCommand>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <ssd1306_Init+0x214>
        return 1;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e00f      	b.n	8006cd4 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	f000 f813 	bl	8006ce0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f834 	bl	8006d28 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8006cc0:	4b06      	ldr	r3, [pc, #24]	@ (8006cdc <ssd1306_Init+0x23c>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006cc6:	4b05      	ldr	r3, [pc, #20]	@ (8006cdc <ssd1306_Init+0x23c>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8006ccc:	4b03      	ldr	r3, [pc, #12]	@ (8006cdc <ssd1306_Init+0x23c>)
 8006cce:	2201      	movs	r2, #1
 8006cd0:	715a      	strb	r2, [r3, #5]

    return 0;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	20001abc 	.word	0x20001abc

08006ce0 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	e00d      	b.n	8006d0c <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <ssd1306_Fill+0x1a>
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	e000      	b.n	8006cfc <ssd1306_Fill+0x1c>
 8006cfa:	21ff      	movs	r1, #255	@ 0xff
 8006cfc:	4a09      	ldr	r2, [pc, #36]	@ (8006d24 <ssd1306_Fill+0x44>)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4413      	add	r3, r2
 8006d02:	460a      	mov	r2, r1
 8006d04:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d12:	d3ed      	bcc.n	8006cf0 <ssd1306_Fill+0x10>
    }
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	200016bc 	.word	0x200016bc

08006d28 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af04      	add	r7, sp, #16
 8006d2e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8006d30:	2300      	movs	r3, #0
 8006d32:	73fb      	strb	r3, [r7, #15]
 8006d34:	e020      	b.n	8006d78 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
 8006d38:	3b50      	subs	r3, #80	@ 0x50
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff fe96 	bl	8006a70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8006d44:	2100      	movs	r1, #0
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff fe92 	bl	8006a70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8006d4c:	2110      	movs	r1, #16
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7ff fe8e 	bl	8006a70 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	01db      	lsls	r3, r3, #7
 8006d58:	4a0b      	ldr	r2, [pc, #44]	@ (8006d88 <ssd1306_UpdateScreen+0x60>)
 8006d5a:	4413      	add	r3, r2
 8006d5c:	2264      	movs	r2, #100	@ 0x64
 8006d5e:	9202      	str	r2, [sp, #8]
 8006d60:	2280      	movs	r2, #128	@ 0x80
 8006d62:	9201      	str	r2, [sp, #4]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	2301      	movs	r3, #1
 8006d68:	2240      	movs	r2, #64	@ 0x40
 8006d6a:	2178      	movs	r1, #120	@ 0x78
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7fc fa09 	bl	8003184 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	3301      	adds	r3, #1
 8006d76:	73fb      	strb	r3, [r7, #15]
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	2b07      	cmp	r3, #7
 8006d7c:	d9db      	bls.n	8006d36 <ssd1306_UpdateScreen+0xe>
    }
}
 8006d7e:	bf00      	nop
 8006d80:	bf00      	nop
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	200016bc 	.word	0x200016bc

08006d8c <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	4603      	mov	r3, r0
 8006d94:	71fb      	strb	r3, [r7, #7]
 8006d96:	460b      	mov	r3, r1
 8006d98:	71bb      	strb	r3, [r7, #6]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8006d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	db48      	blt.n	8006e38 <ssd1306_DrawPixel+0xac>
 8006da6:	79bb      	ldrb	r3, [r7, #6]
 8006da8:	2b3f      	cmp	r3, #63	@ 0x3f
 8006daa:	d845      	bhi.n	8006e38 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8006dac:	4b25      	ldr	r3, [pc, #148]	@ (8006e44 <ssd1306_DrawPixel+0xb8>)
 8006dae:	791b      	ldrb	r3, [r3, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d006      	beq.n	8006dc2 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8006db4:	797b      	ldrb	r3, [r7, #5]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	bf0c      	ite	eq
 8006dba:	2301      	moveq	r3, #1
 8006dbc:	2300      	movne	r3, #0
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8006dc2:	797b      	ldrb	r3, [r7, #5]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d11a      	bne.n	8006dfe <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006dc8:	79fa      	ldrb	r2, [r7, #7]
 8006dca:	79bb      	ldrb	r3, [r7, #6]
 8006dcc:	08db      	lsrs	r3, r3, #3
 8006dce:	b2d8      	uxtb	r0, r3
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	01db      	lsls	r3, r3, #7
 8006dd4:	4413      	add	r3, r2
 8006dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8006e48 <ssd1306_DrawPixel+0xbc>)
 8006dd8:	5cd3      	ldrb	r3, [r2, r3]
 8006dda:	b25a      	sxtb	r2, r3
 8006ddc:	79bb      	ldrb	r3, [r7, #6]
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	2101      	movs	r1, #1
 8006de4:	fa01 f303 	lsl.w	r3, r1, r3
 8006de8:	b25b      	sxtb	r3, r3
 8006dea:	4313      	orrs	r3, r2
 8006dec:	b259      	sxtb	r1, r3
 8006dee:	79fa      	ldrb	r2, [r7, #7]
 8006df0:	4603      	mov	r3, r0
 8006df2:	01db      	lsls	r3, r3, #7
 8006df4:	4413      	add	r3, r2
 8006df6:	b2c9      	uxtb	r1, r1
 8006df8:	4a13      	ldr	r2, [pc, #76]	@ (8006e48 <ssd1306_DrawPixel+0xbc>)
 8006dfa:	54d1      	strb	r1, [r2, r3]
 8006dfc:	e01d      	b.n	8006e3a <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006dfe:	79fa      	ldrb	r2, [r7, #7]
 8006e00:	79bb      	ldrb	r3, [r7, #6]
 8006e02:	08db      	lsrs	r3, r3, #3
 8006e04:	b2d8      	uxtb	r0, r3
 8006e06:	4603      	mov	r3, r0
 8006e08:	01db      	lsls	r3, r3, #7
 8006e0a:	4413      	add	r3, r2
 8006e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8006e48 <ssd1306_DrawPixel+0xbc>)
 8006e0e:	5cd3      	ldrb	r3, [r2, r3]
 8006e10:	b25a      	sxtb	r2, r3
 8006e12:	79bb      	ldrb	r3, [r7, #6]
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	2101      	movs	r1, #1
 8006e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1e:	b25b      	sxtb	r3, r3
 8006e20:	43db      	mvns	r3, r3
 8006e22:	b25b      	sxtb	r3, r3
 8006e24:	4013      	ands	r3, r2
 8006e26:	b259      	sxtb	r1, r3
 8006e28:	79fa      	ldrb	r2, [r7, #7]
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	01db      	lsls	r3, r3, #7
 8006e2e:	4413      	add	r3, r2
 8006e30:	b2c9      	uxtb	r1, r1
 8006e32:	4a05      	ldr	r2, [pc, #20]	@ (8006e48 <ssd1306_DrawPixel+0xbc>)
 8006e34:	54d1      	strb	r1, [r2, r3]
 8006e36:	e000      	b.n	8006e3a <ssd1306_DrawPixel+0xae>
        return;
 8006e38:	bf00      	nop
    }
}
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	20001abc 	.word	0x20001abc
 8006e48:	200016bc 	.word	0x200016bc

08006e4c <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8006e4c:	b590      	push	{r4, r7, lr}
 8006e4e:	b08d      	sub	sp, #52	@ 0x34
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4604      	mov	r4, r0
 8006e54:	1d38      	adds	r0, r7, #4
 8006e56:	e880 0006 	stmia.w	r0, {r1, r2}
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	4623      	mov	r3, r4
 8006e5e:	73fb      	strb	r3, [r7, #15]
 8006e60:	4613      	mov	r3, r2
 8006e62:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8006e64:	4b72      	ldr	r3, [pc, #456]	@ (8007030 <ssd1306_WriteChar+0x1e4>)
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	793b      	ldrb	r3, [r7, #4]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e70:	dc06      	bgt.n	8006e80 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8006e72:	4b6f      	ldr	r3, [pc, #444]	@ (8007030 <ssd1306_WriteChar+0x1e4>)
 8006e74:	885b      	ldrh	r3, [r3, #2]
 8006e76:	461a      	mov	r2, r3
 8006e78:	797b      	ldrb	r3, [r7, #5]
 8006e7a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8006e7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8006e7e:	dd01      	ble.n	8006e84 <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 8006e80:	2300      	movs	r3, #0
 8006e82:	e0d1      	b.n	8007028 <ssd1306_WriteChar+0x1dc>


    if (Font.FontWidth == Font_5x7.FontWidth)
 8006e84:	793a      	ldrb	r2, [r7, #4]
 8006e86:	4b6b      	ldr	r3, [pc, #428]	@ (8007034 <ssd1306_WriteChar+0x1e8>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d16f      	bne.n	8006f6e <ssd1306_WriteChar+0x122>
    {
    	uint8_t *pdata = (uint8_t *) Font.data;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	617b      	str	r3, [r7, #20]
		for (int x = 0; x < Font.FontWidth; x++)
 8006e92:	2300      	movs	r3, #0
 8006e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e96:	e064      	b.n	8006f62 <ssd1306_WriteChar+0x116>
		{
			uint8_t b = (ch < 0x80) ?
 8006e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	db13      	blt.n	8006ec8 <ssd1306_WriteChar+0x7c>
					(x < Font.FontWidth - 1) ? pdata[(ch - 32) * (Font.FontWidth - 1) + x] : 0 :
 8006ea0:	793b      	ldrb	r3, [r7, #4]
 8006ea2:	3b01      	subs	r3, #1
			uint8_t b = (ch < 0x80) ?
 8006ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	da0c      	bge.n	8006ec4 <ssd1306_WriteChar+0x78>
					(x < Font.FontWidth - 1) ? pdata[(ch - 32) * (Font.FontWidth - 1) + x] : 0 :
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	3b20      	subs	r3, #32
 8006eae:	793a      	ldrb	r2, [r7, #4]
 8006eb0:	3a01      	subs	r2, #1
 8006eb2:	fb03 f202 	mul.w	r2, r3, r2
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb8:	4413      	add	r3, r2
 8006eba:	461a      	mov	r2, r3
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	4413      	add	r3, r2
			uint8_t b = (ch < 0x80) ?
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	e009      	b.n	8006ed8 <ssd1306_WriteChar+0x8c>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	e007      	b.n	8006ed8 <ssd1306_WriteChar+0x8c>
					(x < Font.FontWidth - 1) ? 0x7f : 0;
 8006ec8:	793b      	ldrb	r3, [r7, #4]
 8006eca:	3b01      	subs	r3, #1
			uint8_t b = (ch < 0x80) ?
 8006ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	da01      	bge.n	8006ed6 <ssd1306_WriteChar+0x8a>
 8006ed2:	237f      	movs	r3, #127	@ 0x7f
 8006ed4:	e000      	b.n	8006ed8 <ssd1306_WriteChar+0x8c>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			for (int y = 0; y < Font.FontHeight; y++)
 8006edc:	2300      	movs	r3, #0
 8006ede:	61fb      	str	r3, [r7, #28]
 8006ee0:	e037      	b.n	8006f52 <ssd1306_WriteChar+0x106>
			{
				if (b & 1)
 8006ee2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d012      	beq.n	8006f14 <ssd1306_WriteChar+0xc8>
					ssd1306_DrawPixel(SSD1306.CurrentX+x, (SSD1306.CurrentY+y), (SSD1306_COLOR) color);
 8006eee:	4b50      	ldr	r3, [pc, #320]	@ (8007030 <ssd1306_WriteChar+0x1e4>)
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	4413      	add	r3, r2
 8006efa:	b2d8      	uxtb	r0, r3
 8006efc:	4b4c      	ldr	r3, [pc, #304]	@ (8007030 <ssd1306_WriteChar+0x1e4>)
 8006efe:	885b      	ldrh	r3, [r3, #2]
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	4413      	add	r3, r2
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	7bba      	ldrb	r2, [r7, #14]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	f7ff ff3d 	bl	8006d8c <ssd1306_DrawPixel>
 8006f12:	e016      	b.n	8006f42 <ssd1306_WriteChar+0xf6>
				else
					ssd1306_DrawPixel(SSD1306.CurrentX+x, (SSD1306.CurrentY+y), (SSD1306_COLOR)!color);
 8006f14:	4b46      	ldr	r3, [pc, #280]	@ (8007030 <ssd1306_WriteChar+0x1e4>)
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	4413      	add	r3, r2
 8006f20:	b2d8      	uxtb	r0, r3
 8006f22:	4b43      	ldr	r3, [pc, #268]	@ (8007030 <ssd1306_WriteChar+0x1e4>)
 8006f24:	885b      	ldrh	r3, [r3, #2]
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	4413      	add	r3, r2
 8006f2e:	b2d9      	uxtb	r1, r3
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	bf0c      	ite	eq
 8006f36:	2301      	moveq	r3, #1
 8006f38:	2300      	movne	r3, #0
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f7ff ff25 	bl	8006d8c <ssd1306_DrawPixel>
				b >>= 1;
 8006f42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f46:	085b      	lsrs	r3, r3, #1
 8006f48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			for (int y = 0; y < Font.FontHeight; y++)
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	61fb      	str	r3, [r7, #28]
 8006f52:	797b      	ldrb	r3, [r7, #5]
 8006f54:	461a      	mov	r2, r3
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	dbc2      	blt.n	8006ee2 <ssd1306_WriteChar+0x96>
		for (int x = 0; x < Font.FontWidth; x++)
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5e:	3301      	adds	r3, #1
 8006f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f62:	793b      	ldrb	r3, [r7, #4]
 8006f64:	461a      	mov	r2, r3
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	db95      	blt.n	8006e98 <ssd1306_WriteChar+0x4c>
 8006f6c:	e054      	b.n	8007018 <ssd1306_WriteChar+0x1cc>
			}
		}
    }
    else
    {
    	   for (i = 0; i < Font.FontHeight; i++)
 8006f6e:	2300      	movs	r3, #0
 8006f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f72:	e04c      	b.n	800700e <ssd1306_WriteChar+0x1c2>
    	    {
    	        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	3b20      	subs	r3, #32
 8006f7a:	7979      	ldrb	r1, [r7, #5]
 8006f7c:	fb01 f303 	mul.w	r3, r1, r3
 8006f80:	4619      	mov	r1, r3
 8006f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f84:	440b      	add	r3, r1
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	4413      	add	r3, r2
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	61bb      	str	r3, [r7, #24]
    	        for (j = 0; j < Font.FontWidth; j++)
 8006f8e:	2300      	movs	r3, #0
 8006f90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f92:	e034      	b.n	8006ffe <ssd1306_WriteChar+0x1b2>
    	        {
    	            if ((b << j) & 0x8000)
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f98:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d012      	beq.n	8006fca <ssd1306_WriteChar+0x17e>
    	            {
    	                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8006fa4:	4b22      	ldr	r3, [pc, #136]	@ (8007030 <ssd1306_WriteChar+0x1e4>)
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	4413      	add	r3, r2
 8006fb0:	b2d8      	uxtb	r0, r3
 8006fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8007030 <ssd1306_WriteChar+0x1e4>)
 8006fb4:	885b      	ldrh	r3, [r3, #2]
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	4413      	add	r3, r2
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	7bba      	ldrb	r2, [r7, #14]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	f7ff fee2 	bl	8006d8c <ssd1306_DrawPixel>
 8006fc8:	e016      	b.n	8006ff8 <ssd1306_WriteChar+0x1ac>
    	            }
    	            else
    	            {
    	                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006fca:	4b19      	ldr	r3, [pc, #100]	@ (8007030 <ssd1306_WriteChar+0x1e4>)
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	4413      	add	r3, r2
 8006fd6:	b2d8      	uxtb	r0, r3
 8006fd8:	4b15      	ldr	r3, [pc, #84]	@ (8007030 <ssd1306_WriteChar+0x1e4>)
 8006fda:	885b      	ldrh	r3, [r3, #2]
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	4413      	add	r3, r2
 8006fe4:	b2d9      	uxtb	r1, r3
 8006fe6:	7bbb      	ldrb	r3, [r7, #14]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	bf0c      	ite	eq
 8006fec:	2301      	moveq	r3, #1
 8006fee:	2300      	movne	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f7ff feca 	bl	8006d8c <ssd1306_DrawPixel>
    	        for (j = 0; j < Font.FontWidth; j++)
 8006ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ffe:	793b      	ldrb	r3, [r7, #4]
 8007000:	461a      	mov	r2, r3
 8007002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007004:	4293      	cmp	r3, r2
 8007006:	d3c5      	bcc.n	8006f94 <ssd1306_WriteChar+0x148>
    	   for (i = 0; i < Font.FontHeight; i++)
 8007008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700a:	3301      	adds	r3, #1
 800700c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800700e:	797b      	ldrb	r3, [r7, #5]
 8007010:	461a      	mov	r2, r3
 8007012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007014:	4293      	cmp	r3, r2
 8007016:	d3ad      	bcc.n	8006f74 <ssd1306_WriteChar+0x128>

    // Translate font to screenbuffer


    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8007018:	4b05      	ldr	r3, [pc, #20]	@ (8007030 <ssd1306_WriteChar+0x1e4>)
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	793a      	ldrb	r2, [r7, #4]
 800701e:	4413      	add	r3, r2
 8007020:	b29a      	uxth	r2, r3
 8007022:	4b03      	ldr	r3, [pc, #12]	@ (8007030 <ssd1306_WriteChar+0x1e4>)
 8007024:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8007026:	7bfb      	ldrb	r3, [r7, #15]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3734      	adds	r7, #52	@ 0x34
 800702c:	46bd      	mov	sp, r7
 800702e:	bd90      	pop	{r4, r7, pc}
 8007030:	20001abc 	.word	0x20001abc
 8007034:	20000014 	.word	0x20000014

08007038 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	460a      	mov	r2, r1
 8007042:	71fb      	strb	r3, [r7, #7]
 8007044:	4613      	mov	r3, r2
 8007046:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8007048:	79fb      	ldrb	r3, [r7, #7]
 800704a:	b29a      	uxth	r2, r3
 800704c:	4b05      	ldr	r3, [pc, #20]	@ (8007064 <ssd1306_SetCursor+0x2c>)
 800704e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8007050:	79bb      	ldrb	r3, [r7, #6]
 8007052:	b29a      	uxth	r2, r3
 8007054:	4b03      	ldr	r3, [pc, #12]	@ (8007064 <ssd1306_SetCursor+0x2c>)
 8007056:	805a      	strh	r2, [r3, #2]
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	20001abc 	.word	0x20001abc

08007068 <ssd1306_printf>:


void ssd1306_printf(FontDef Font, SSD1306_COLOR color, const char *format, ...){
 8007068:	b408      	push	{r3}
 800706a:	b480      	push	{r7}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	f107 0308 	add.w	r3, r7, #8
 8007074:	e883 0003 	stmia.w	r3, {r0, r1}
 8007078:	4613      	mov	r3, r2
 800707a:	71fb      	strb	r3, [r7, #7]

}
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	b001      	add	sp, #4
 8007088:	4770      	bx	lr
	...

0800708c <std>:
 800708c:	2300      	movs	r3, #0
 800708e:	b510      	push	{r4, lr}
 8007090:	4604      	mov	r4, r0
 8007092:	e9c0 3300 	strd	r3, r3, [r0]
 8007096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800709a:	6083      	str	r3, [r0, #8]
 800709c:	8181      	strh	r1, [r0, #12]
 800709e:	6643      	str	r3, [r0, #100]	@ 0x64
 80070a0:	81c2      	strh	r2, [r0, #14]
 80070a2:	6183      	str	r3, [r0, #24]
 80070a4:	4619      	mov	r1, r3
 80070a6:	2208      	movs	r2, #8
 80070a8:	305c      	adds	r0, #92	@ 0x5c
 80070aa:	f000 f921 	bl	80072f0 <memset>
 80070ae:	4b0d      	ldr	r3, [pc, #52]	@ (80070e4 <std+0x58>)
 80070b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80070b2:	4b0d      	ldr	r3, [pc, #52]	@ (80070e8 <std+0x5c>)
 80070b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070b6:	4b0d      	ldr	r3, [pc, #52]	@ (80070ec <std+0x60>)
 80070b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070ba:	4b0d      	ldr	r3, [pc, #52]	@ (80070f0 <std+0x64>)
 80070bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80070be:	4b0d      	ldr	r3, [pc, #52]	@ (80070f4 <std+0x68>)
 80070c0:	6224      	str	r4, [r4, #32]
 80070c2:	429c      	cmp	r4, r3
 80070c4:	d006      	beq.n	80070d4 <std+0x48>
 80070c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070ca:	4294      	cmp	r4, r2
 80070cc:	d002      	beq.n	80070d4 <std+0x48>
 80070ce:	33d0      	adds	r3, #208	@ 0xd0
 80070d0:	429c      	cmp	r4, r3
 80070d2:	d105      	bne.n	80070e0 <std+0x54>
 80070d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070dc:	f000 b93a 	b.w	8007354 <__retarget_lock_init_recursive>
 80070e0:	bd10      	pop	{r4, pc}
 80070e2:	bf00      	nop
 80070e4:	08007bad 	.word	0x08007bad
 80070e8:	08007bcf 	.word	0x08007bcf
 80070ec:	08007c07 	.word	0x08007c07
 80070f0:	08007c2b 	.word	0x08007c2b
 80070f4:	20001ac4 	.word	0x20001ac4

080070f8 <stdio_exit_handler>:
 80070f8:	4a02      	ldr	r2, [pc, #8]	@ (8007104 <stdio_exit_handler+0xc>)
 80070fa:	4903      	ldr	r1, [pc, #12]	@ (8007108 <stdio_exit_handler+0x10>)
 80070fc:	4803      	ldr	r0, [pc, #12]	@ (800710c <stdio_exit_handler+0x14>)
 80070fe:	f000 b869 	b.w	80071d4 <_fwalk_sglue>
 8007102:	bf00      	nop
 8007104:	2000001c 	.word	0x2000001c
 8007108:	08007b45 	.word	0x08007b45
 800710c:	2000002c 	.word	0x2000002c

08007110 <cleanup_stdio>:
 8007110:	6841      	ldr	r1, [r0, #4]
 8007112:	4b0c      	ldr	r3, [pc, #48]	@ (8007144 <cleanup_stdio+0x34>)
 8007114:	4299      	cmp	r1, r3
 8007116:	b510      	push	{r4, lr}
 8007118:	4604      	mov	r4, r0
 800711a:	d001      	beq.n	8007120 <cleanup_stdio+0x10>
 800711c:	f000 fd12 	bl	8007b44 <_fflush_r>
 8007120:	68a1      	ldr	r1, [r4, #8]
 8007122:	4b09      	ldr	r3, [pc, #36]	@ (8007148 <cleanup_stdio+0x38>)
 8007124:	4299      	cmp	r1, r3
 8007126:	d002      	beq.n	800712e <cleanup_stdio+0x1e>
 8007128:	4620      	mov	r0, r4
 800712a:	f000 fd0b 	bl	8007b44 <_fflush_r>
 800712e:	68e1      	ldr	r1, [r4, #12]
 8007130:	4b06      	ldr	r3, [pc, #24]	@ (800714c <cleanup_stdio+0x3c>)
 8007132:	4299      	cmp	r1, r3
 8007134:	d004      	beq.n	8007140 <cleanup_stdio+0x30>
 8007136:	4620      	mov	r0, r4
 8007138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800713c:	f000 bd02 	b.w	8007b44 <_fflush_r>
 8007140:	bd10      	pop	{r4, pc}
 8007142:	bf00      	nop
 8007144:	20001ac4 	.word	0x20001ac4
 8007148:	20001b2c 	.word	0x20001b2c
 800714c:	20001b94 	.word	0x20001b94

08007150 <global_stdio_init.part.0>:
 8007150:	b510      	push	{r4, lr}
 8007152:	4b0b      	ldr	r3, [pc, #44]	@ (8007180 <global_stdio_init.part.0+0x30>)
 8007154:	4c0b      	ldr	r4, [pc, #44]	@ (8007184 <global_stdio_init.part.0+0x34>)
 8007156:	4a0c      	ldr	r2, [pc, #48]	@ (8007188 <global_stdio_init.part.0+0x38>)
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	4620      	mov	r0, r4
 800715c:	2200      	movs	r2, #0
 800715e:	2104      	movs	r1, #4
 8007160:	f7ff ff94 	bl	800708c <std>
 8007164:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007168:	2201      	movs	r2, #1
 800716a:	2109      	movs	r1, #9
 800716c:	f7ff ff8e 	bl	800708c <std>
 8007170:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007174:	2202      	movs	r2, #2
 8007176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800717a:	2112      	movs	r1, #18
 800717c:	f7ff bf86 	b.w	800708c <std>
 8007180:	20001bfc 	.word	0x20001bfc
 8007184:	20001ac4 	.word	0x20001ac4
 8007188:	080070f9 	.word	0x080070f9

0800718c <__sfp_lock_acquire>:
 800718c:	4801      	ldr	r0, [pc, #4]	@ (8007194 <__sfp_lock_acquire+0x8>)
 800718e:	f000 b8e2 	b.w	8007356 <__retarget_lock_acquire_recursive>
 8007192:	bf00      	nop
 8007194:	20001c01 	.word	0x20001c01

08007198 <__sfp_lock_release>:
 8007198:	4801      	ldr	r0, [pc, #4]	@ (80071a0 <__sfp_lock_release+0x8>)
 800719a:	f000 b8dd 	b.w	8007358 <__retarget_lock_release_recursive>
 800719e:	bf00      	nop
 80071a0:	20001c01 	.word	0x20001c01

080071a4 <__sinit>:
 80071a4:	b510      	push	{r4, lr}
 80071a6:	4604      	mov	r4, r0
 80071a8:	f7ff fff0 	bl	800718c <__sfp_lock_acquire>
 80071ac:	6a23      	ldr	r3, [r4, #32]
 80071ae:	b11b      	cbz	r3, 80071b8 <__sinit+0x14>
 80071b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071b4:	f7ff bff0 	b.w	8007198 <__sfp_lock_release>
 80071b8:	4b04      	ldr	r3, [pc, #16]	@ (80071cc <__sinit+0x28>)
 80071ba:	6223      	str	r3, [r4, #32]
 80071bc:	4b04      	ldr	r3, [pc, #16]	@ (80071d0 <__sinit+0x2c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1f5      	bne.n	80071b0 <__sinit+0xc>
 80071c4:	f7ff ffc4 	bl	8007150 <global_stdio_init.part.0>
 80071c8:	e7f2      	b.n	80071b0 <__sinit+0xc>
 80071ca:	bf00      	nop
 80071cc:	08007111 	.word	0x08007111
 80071d0:	20001bfc 	.word	0x20001bfc

080071d4 <_fwalk_sglue>:
 80071d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d8:	4607      	mov	r7, r0
 80071da:	4688      	mov	r8, r1
 80071dc:	4614      	mov	r4, r2
 80071de:	2600      	movs	r6, #0
 80071e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071e4:	f1b9 0901 	subs.w	r9, r9, #1
 80071e8:	d505      	bpl.n	80071f6 <_fwalk_sglue+0x22>
 80071ea:	6824      	ldr	r4, [r4, #0]
 80071ec:	2c00      	cmp	r4, #0
 80071ee:	d1f7      	bne.n	80071e0 <_fwalk_sglue+0xc>
 80071f0:	4630      	mov	r0, r6
 80071f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071f6:	89ab      	ldrh	r3, [r5, #12]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d907      	bls.n	800720c <_fwalk_sglue+0x38>
 80071fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007200:	3301      	adds	r3, #1
 8007202:	d003      	beq.n	800720c <_fwalk_sglue+0x38>
 8007204:	4629      	mov	r1, r5
 8007206:	4638      	mov	r0, r7
 8007208:	47c0      	blx	r8
 800720a:	4306      	orrs	r6, r0
 800720c:	3568      	adds	r5, #104	@ 0x68
 800720e:	e7e9      	b.n	80071e4 <_fwalk_sglue+0x10>

08007210 <iprintf>:
 8007210:	b40f      	push	{r0, r1, r2, r3}
 8007212:	b507      	push	{r0, r1, r2, lr}
 8007214:	4906      	ldr	r1, [pc, #24]	@ (8007230 <iprintf+0x20>)
 8007216:	ab04      	add	r3, sp, #16
 8007218:	6808      	ldr	r0, [r1, #0]
 800721a:	f853 2b04 	ldr.w	r2, [r3], #4
 800721e:	6881      	ldr	r1, [r0, #8]
 8007220:	9301      	str	r3, [sp, #4]
 8007222:	f000 f8c3 	bl	80073ac <_vfiprintf_r>
 8007226:	b003      	add	sp, #12
 8007228:	f85d eb04 	ldr.w	lr, [sp], #4
 800722c:	b004      	add	sp, #16
 800722e:	4770      	bx	lr
 8007230:	20000028 	.word	0x20000028

08007234 <_puts_r>:
 8007234:	6a03      	ldr	r3, [r0, #32]
 8007236:	b570      	push	{r4, r5, r6, lr}
 8007238:	6884      	ldr	r4, [r0, #8]
 800723a:	4605      	mov	r5, r0
 800723c:	460e      	mov	r6, r1
 800723e:	b90b      	cbnz	r3, 8007244 <_puts_r+0x10>
 8007240:	f7ff ffb0 	bl	80071a4 <__sinit>
 8007244:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007246:	07db      	lsls	r3, r3, #31
 8007248:	d405      	bmi.n	8007256 <_puts_r+0x22>
 800724a:	89a3      	ldrh	r3, [r4, #12]
 800724c:	0598      	lsls	r0, r3, #22
 800724e:	d402      	bmi.n	8007256 <_puts_r+0x22>
 8007250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007252:	f000 f880 	bl	8007356 <__retarget_lock_acquire_recursive>
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	0719      	lsls	r1, r3, #28
 800725a:	d502      	bpl.n	8007262 <_puts_r+0x2e>
 800725c:	6923      	ldr	r3, [r4, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d135      	bne.n	80072ce <_puts_r+0x9a>
 8007262:	4621      	mov	r1, r4
 8007264:	4628      	mov	r0, r5
 8007266:	f000 fd23 	bl	8007cb0 <__swsetup_r>
 800726a:	b380      	cbz	r0, 80072ce <_puts_r+0x9a>
 800726c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007270:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007272:	07da      	lsls	r2, r3, #31
 8007274:	d405      	bmi.n	8007282 <_puts_r+0x4e>
 8007276:	89a3      	ldrh	r3, [r4, #12]
 8007278:	059b      	lsls	r3, r3, #22
 800727a:	d402      	bmi.n	8007282 <_puts_r+0x4e>
 800727c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800727e:	f000 f86b 	bl	8007358 <__retarget_lock_release_recursive>
 8007282:	4628      	mov	r0, r5
 8007284:	bd70      	pop	{r4, r5, r6, pc}
 8007286:	2b00      	cmp	r3, #0
 8007288:	da04      	bge.n	8007294 <_puts_r+0x60>
 800728a:	69a2      	ldr	r2, [r4, #24]
 800728c:	429a      	cmp	r2, r3
 800728e:	dc17      	bgt.n	80072c0 <_puts_r+0x8c>
 8007290:	290a      	cmp	r1, #10
 8007292:	d015      	beq.n	80072c0 <_puts_r+0x8c>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	6022      	str	r2, [r4, #0]
 800729a:	7019      	strb	r1, [r3, #0]
 800729c:	68a3      	ldr	r3, [r4, #8]
 800729e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072a2:	3b01      	subs	r3, #1
 80072a4:	60a3      	str	r3, [r4, #8]
 80072a6:	2900      	cmp	r1, #0
 80072a8:	d1ed      	bne.n	8007286 <_puts_r+0x52>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	da11      	bge.n	80072d2 <_puts_r+0x9e>
 80072ae:	4622      	mov	r2, r4
 80072b0:	210a      	movs	r1, #10
 80072b2:	4628      	mov	r0, r5
 80072b4:	f000 fcbd 	bl	8007c32 <__swbuf_r>
 80072b8:	3001      	adds	r0, #1
 80072ba:	d0d7      	beq.n	800726c <_puts_r+0x38>
 80072bc:	250a      	movs	r5, #10
 80072be:	e7d7      	b.n	8007270 <_puts_r+0x3c>
 80072c0:	4622      	mov	r2, r4
 80072c2:	4628      	mov	r0, r5
 80072c4:	f000 fcb5 	bl	8007c32 <__swbuf_r>
 80072c8:	3001      	adds	r0, #1
 80072ca:	d1e7      	bne.n	800729c <_puts_r+0x68>
 80072cc:	e7ce      	b.n	800726c <_puts_r+0x38>
 80072ce:	3e01      	subs	r6, #1
 80072d0:	e7e4      	b.n	800729c <_puts_r+0x68>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	6022      	str	r2, [r4, #0]
 80072d8:	220a      	movs	r2, #10
 80072da:	701a      	strb	r2, [r3, #0]
 80072dc:	e7ee      	b.n	80072bc <_puts_r+0x88>
	...

080072e0 <puts>:
 80072e0:	4b02      	ldr	r3, [pc, #8]	@ (80072ec <puts+0xc>)
 80072e2:	4601      	mov	r1, r0
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	f7ff bfa5 	b.w	8007234 <_puts_r>
 80072ea:	bf00      	nop
 80072ec:	20000028 	.word	0x20000028

080072f0 <memset>:
 80072f0:	4402      	add	r2, r0
 80072f2:	4603      	mov	r3, r0
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d100      	bne.n	80072fa <memset+0xa>
 80072f8:	4770      	bx	lr
 80072fa:	f803 1b01 	strb.w	r1, [r3], #1
 80072fe:	e7f9      	b.n	80072f4 <memset+0x4>

08007300 <__errno>:
 8007300:	4b01      	ldr	r3, [pc, #4]	@ (8007308 <__errno+0x8>)
 8007302:	6818      	ldr	r0, [r3, #0]
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	20000028 	.word	0x20000028

0800730c <__libc_init_array>:
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	4d0d      	ldr	r5, [pc, #52]	@ (8007344 <__libc_init_array+0x38>)
 8007310:	4c0d      	ldr	r4, [pc, #52]	@ (8007348 <__libc_init_array+0x3c>)
 8007312:	1b64      	subs	r4, r4, r5
 8007314:	10a4      	asrs	r4, r4, #2
 8007316:	2600      	movs	r6, #0
 8007318:	42a6      	cmp	r6, r4
 800731a:	d109      	bne.n	8007330 <__libc_init_array+0x24>
 800731c:	4d0b      	ldr	r5, [pc, #44]	@ (800734c <__libc_init_array+0x40>)
 800731e:	4c0c      	ldr	r4, [pc, #48]	@ (8007350 <__libc_init_array+0x44>)
 8007320:	f000 fe40 	bl	8007fa4 <_init>
 8007324:	1b64      	subs	r4, r4, r5
 8007326:	10a4      	asrs	r4, r4, #2
 8007328:	2600      	movs	r6, #0
 800732a:	42a6      	cmp	r6, r4
 800732c:	d105      	bne.n	800733a <__libc_init_array+0x2e>
 800732e:	bd70      	pop	{r4, r5, r6, pc}
 8007330:	f855 3b04 	ldr.w	r3, [r5], #4
 8007334:	4798      	blx	r3
 8007336:	3601      	adds	r6, #1
 8007338:	e7ee      	b.n	8007318 <__libc_init_array+0xc>
 800733a:	f855 3b04 	ldr.w	r3, [r5], #4
 800733e:	4798      	blx	r3
 8007340:	3601      	adds	r6, #1
 8007342:	e7f2      	b.n	800732a <__libc_init_array+0x1e>
 8007344:	08008db4 	.word	0x08008db4
 8007348:	08008db4 	.word	0x08008db4
 800734c:	08008db4 	.word	0x08008db4
 8007350:	08008dc0 	.word	0x08008dc0

08007354 <__retarget_lock_init_recursive>:
 8007354:	4770      	bx	lr

08007356 <__retarget_lock_acquire_recursive>:
 8007356:	4770      	bx	lr

08007358 <__retarget_lock_release_recursive>:
 8007358:	4770      	bx	lr

0800735a <__sfputc_r>:
 800735a:	6893      	ldr	r3, [r2, #8]
 800735c:	3b01      	subs	r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	b410      	push	{r4}
 8007362:	6093      	str	r3, [r2, #8]
 8007364:	da08      	bge.n	8007378 <__sfputc_r+0x1e>
 8007366:	6994      	ldr	r4, [r2, #24]
 8007368:	42a3      	cmp	r3, r4
 800736a:	db01      	blt.n	8007370 <__sfputc_r+0x16>
 800736c:	290a      	cmp	r1, #10
 800736e:	d103      	bne.n	8007378 <__sfputc_r+0x1e>
 8007370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007374:	f000 bc5d 	b.w	8007c32 <__swbuf_r>
 8007378:	6813      	ldr	r3, [r2, #0]
 800737a:	1c58      	adds	r0, r3, #1
 800737c:	6010      	str	r0, [r2, #0]
 800737e:	7019      	strb	r1, [r3, #0]
 8007380:	4608      	mov	r0, r1
 8007382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007386:	4770      	bx	lr

08007388 <__sfputs_r>:
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738a:	4606      	mov	r6, r0
 800738c:	460f      	mov	r7, r1
 800738e:	4614      	mov	r4, r2
 8007390:	18d5      	adds	r5, r2, r3
 8007392:	42ac      	cmp	r4, r5
 8007394:	d101      	bne.n	800739a <__sfputs_r+0x12>
 8007396:	2000      	movs	r0, #0
 8007398:	e007      	b.n	80073aa <__sfputs_r+0x22>
 800739a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800739e:	463a      	mov	r2, r7
 80073a0:	4630      	mov	r0, r6
 80073a2:	f7ff ffda 	bl	800735a <__sfputc_r>
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	d1f3      	bne.n	8007392 <__sfputs_r+0xa>
 80073aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080073ac <_vfiprintf_r>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	460d      	mov	r5, r1
 80073b2:	b09d      	sub	sp, #116	@ 0x74
 80073b4:	4614      	mov	r4, r2
 80073b6:	4698      	mov	r8, r3
 80073b8:	4606      	mov	r6, r0
 80073ba:	b118      	cbz	r0, 80073c4 <_vfiprintf_r+0x18>
 80073bc:	6a03      	ldr	r3, [r0, #32]
 80073be:	b90b      	cbnz	r3, 80073c4 <_vfiprintf_r+0x18>
 80073c0:	f7ff fef0 	bl	80071a4 <__sinit>
 80073c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073c6:	07d9      	lsls	r1, r3, #31
 80073c8:	d405      	bmi.n	80073d6 <_vfiprintf_r+0x2a>
 80073ca:	89ab      	ldrh	r3, [r5, #12]
 80073cc:	059a      	lsls	r2, r3, #22
 80073ce:	d402      	bmi.n	80073d6 <_vfiprintf_r+0x2a>
 80073d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073d2:	f7ff ffc0 	bl	8007356 <__retarget_lock_acquire_recursive>
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	071b      	lsls	r3, r3, #28
 80073da:	d501      	bpl.n	80073e0 <_vfiprintf_r+0x34>
 80073dc:	692b      	ldr	r3, [r5, #16]
 80073de:	b99b      	cbnz	r3, 8007408 <_vfiprintf_r+0x5c>
 80073e0:	4629      	mov	r1, r5
 80073e2:	4630      	mov	r0, r6
 80073e4:	f000 fc64 	bl	8007cb0 <__swsetup_r>
 80073e8:	b170      	cbz	r0, 8007408 <_vfiprintf_r+0x5c>
 80073ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073ec:	07dc      	lsls	r4, r3, #31
 80073ee:	d504      	bpl.n	80073fa <_vfiprintf_r+0x4e>
 80073f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073f4:	b01d      	add	sp, #116	@ 0x74
 80073f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fa:	89ab      	ldrh	r3, [r5, #12]
 80073fc:	0598      	lsls	r0, r3, #22
 80073fe:	d4f7      	bmi.n	80073f0 <_vfiprintf_r+0x44>
 8007400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007402:	f7ff ffa9 	bl	8007358 <__retarget_lock_release_recursive>
 8007406:	e7f3      	b.n	80073f0 <_vfiprintf_r+0x44>
 8007408:	2300      	movs	r3, #0
 800740a:	9309      	str	r3, [sp, #36]	@ 0x24
 800740c:	2320      	movs	r3, #32
 800740e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007412:	f8cd 800c 	str.w	r8, [sp, #12]
 8007416:	2330      	movs	r3, #48	@ 0x30
 8007418:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80075c8 <_vfiprintf_r+0x21c>
 800741c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007420:	f04f 0901 	mov.w	r9, #1
 8007424:	4623      	mov	r3, r4
 8007426:	469a      	mov	sl, r3
 8007428:	f813 2b01 	ldrb.w	r2, [r3], #1
 800742c:	b10a      	cbz	r2, 8007432 <_vfiprintf_r+0x86>
 800742e:	2a25      	cmp	r2, #37	@ 0x25
 8007430:	d1f9      	bne.n	8007426 <_vfiprintf_r+0x7a>
 8007432:	ebba 0b04 	subs.w	fp, sl, r4
 8007436:	d00b      	beq.n	8007450 <_vfiprintf_r+0xa4>
 8007438:	465b      	mov	r3, fp
 800743a:	4622      	mov	r2, r4
 800743c:	4629      	mov	r1, r5
 800743e:	4630      	mov	r0, r6
 8007440:	f7ff ffa2 	bl	8007388 <__sfputs_r>
 8007444:	3001      	adds	r0, #1
 8007446:	f000 80a7 	beq.w	8007598 <_vfiprintf_r+0x1ec>
 800744a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800744c:	445a      	add	r2, fp
 800744e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007450:	f89a 3000 	ldrb.w	r3, [sl]
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 809f 	beq.w	8007598 <_vfiprintf_r+0x1ec>
 800745a:	2300      	movs	r3, #0
 800745c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007460:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007464:	f10a 0a01 	add.w	sl, sl, #1
 8007468:	9304      	str	r3, [sp, #16]
 800746a:	9307      	str	r3, [sp, #28]
 800746c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007470:	931a      	str	r3, [sp, #104]	@ 0x68
 8007472:	4654      	mov	r4, sl
 8007474:	2205      	movs	r2, #5
 8007476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800747a:	4853      	ldr	r0, [pc, #332]	@ (80075c8 <_vfiprintf_r+0x21c>)
 800747c:	f7f8 fec8 	bl	8000210 <memchr>
 8007480:	9a04      	ldr	r2, [sp, #16]
 8007482:	b9d8      	cbnz	r0, 80074bc <_vfiprintf_r+0x110>
 8007484:	06d1      	lsls	r1, r2, #27
 8007486:	bf44      	itt	mi
 8007488:	2320      	movmi	r3, #32
 800748a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800748e:	0713      	lsls	r3, r2, #28
 8007490:	bf44      	itt	mi
 8007492:	232b      	movmi	r3, #43	@ 0x2b
 8007494:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007498:	f89a 3000 	ldrb.w	r3, [sl]
 800749c:	2b2a      	cmp	r3, #42	@ 0x2a
 800749e:	d015      	beq.n	80074cc <_vfiprintf_r+0x120>
 80074a0:	9a07      	ldr	r2, [sp, #28]
 80074a2:	4654      	mov	r4, sl
 80074a4:	2000      	movs	r0, #0
 80074a6:	f04f 0c0a 	mov.w	ip, #10
 80074aa:	4621      	mov	r1, r4
 80074ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074b0:	3b30      	subs	r3, #48	@ 0x30
 80074b2:	2b09      	cmp	r3, #9
 80074b4:	d94b      	bls.n	800754e <_vfiprintf_r+0x1a2>
 80074b6:	b1b0      	cbz	r0, 80074e6 <_vfiprintf_r+0x13a>
 80074b8:	9207      	str	r2, [sp, #28]
 80074ba:	e014      	b.n	80074e6 <_vfiprintf_r+0x13a>
 80074bc:	eba0 0308 	sub.w	r3, r0, r8
 80074c0:	fa09 f303 	lsl.w	r3, r9, r3
 80074c4:	4313      	orrs	r3, r2
 80074c6:	9304      	str	r3, [sp, #16]
 80074c8:	46a2      	mov	sl, r4
 80074ca:	e7d2      	b.n	8007472 <_vfiprintf_r+0xc6>
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	1d19      	adds	r1, r3, #4
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	9103      	str	r1, [sp, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	bfbb      	ittet	lt
 80074d8:	425b      	neglt	r3, r3
 80074da:	f042 0202 	orrlt.w	r2, r2, #2
 80074de:	9307      	strge	r3, [sp, #28]
 80074e0:	9307      	strlt	r3, [sp, #28]
 80074e2:	bfb8      	it	lt
 80074e4:	9204      	strlt	r2, [sp, #16]
 80074e6:	7823      	ldrb	r3, [r4, #0]
 80074e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80074ea:	d10a      	bne.n	8007502 <_vfiprintf_r+0x156>
 80074ec:	7863      	ldrb	r3, [r4, #1]
 80074ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80074f0:	d132      	bne.n	8007558 <_vfiprintf_r+0x1ac>
 80074f2:	9b03      	ldr	r3, [sp, #12]
 80074f4:	1d1a      	adds	r2, r3, #4
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	9203      	str	r2, [sp, #12]
 80074fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074fe:	3402      	adds	r4, #2
 8007500:	9305      	str	r3, [sp, #20]
 8007502:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80075d8 <_vfiprintf_r+0x22c>
 8007506:	7821      	ldrb	r1, [r4, #0]
 8007508:	2203      	movs	r2, #3
 800750a:	4650      	mov	r0, sl
 800750c:	f7f8 fe80 	bl	8000210 <memchr>
 8007510:	b138      	cbz	r0, 8007522 <_vfiprintf_r+0x176>
 8007512:	9b04      	ldr	r3, [sp, #16]
 8007514:	eba0 000a 	sub.w	r0, r0, sl
 8007518:	2240      	movs	r2, #64	@ 0x40
 800751a:	4082      	lsls	r2, r0
 800751c:	4313      	orrs	r3, r2
 800751e:	3401      	adds	r4, #1
 8007520:	9304      	str	r3, [sp, #16]
 8007522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007526:	4829      	ldr	r0, [pc, #164]	@ (80075cc <_vfiprintf_r+0x220>)
 8007528:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800752c:	2206      	movs	r2, #6
 800752e:	f7f8 fe6f 	bl	8000210 <memchr>
 8007532:	2800      	cmp	r0, #0
 8007534:	d03f      	beq.n	80075b6 <_vfiprintf_r+0x20a>
 8007536:	4b26      	ldr	r3, [pc, #152]	@ (80075d0 <_vfiprintf_r+0x224>)
 8007538:	bb1b      	cbnz	r3, 8007582 <_vfiprintf_r+0x1d6>
 800753a:	9b03      	ldr	r3, [sp, #12]
 800753c:	3307      	adds	r3, #7
 800753e:	f023 0307 	bic.w	r3, r3, #7
 8007542:	3308      	adds	r3, #8
 8007544:	9303      	str	r3, [sp, #12]
 8007546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007548:	443b      	add	r3, r7
 800754a:	9309      	str	r3, [sp, #36]	@ 0x24
 800754c:	e76a      	b.n	8007424 <_vfiprintf_r+0x78>
 800754e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007552:	460c      	mov	r4, r1
 8007554:	2001      	movs	r0, #1
 8007556:	e7a8      	b.n	80074aa <_vfiprintf_r+0xfe>
 8007558:	2300      	movs	r3, #0
 800755a:	3401      	adds	r4, #1
 800755c:	9305      	str	r3, [sp, #20]
 800755e:	4619      	mov	r1, r3
 8007560:	f04f 0c0a 	mov.w	ip, #10
 8007564:	4620      	mov	r0, r4
 8007566:	f810 2b01 	ldrb.w	r2, [r0], #1
 800756a:	3a30      	subs	r2, #48	@ 0x30
 800756c:	2a09      	cmp	r2, #9
 800756e:	d903      	bls.n	8007578 <_vfiprintf_r+0x1cc>
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0c6      	beq.n	8007502 <_vfiprintf_r+0x156>
 8007574:	9105      	str	r1, [sp, #20]
 8007576:	e7c4      	b.n	8007502 <_vfiprintf_r+0x156>
 8007578:	fb0c 2101 	mla	r1, ip, r1, r2
 800757c:	4604      	mov	r4, r0
 800757e:	2301      	movs	r3, #1
 8007580:	e7f0      	b.n	8007564 <_vfiprintf_r+0x1b8>
 8007582:	ab03      	add	r3, sp, #12
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	462a      	mov	r2, r5
 8007588:	4b12      	ldr	r3, [pc, #72]	@ (80075d4 <_vfiprintf_r+0x228>)
 800758a:	a904      	add	r1, sp, #16
 800758c:	4630      	mov	r0, r6
 800758e:	f3af 8000 	nop.w
 8007592:	4607      	mov	r7, r0
 8007594:	1c78      	adds	r0, r7, #1
 8007596:	d1d6      	bne.n	8007546 <_vfiprintf_r+0x19a>
 8007598:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800759a:	07d9      	lsls	r1, r3, #31
 800759c:	d405      	bmi.n	80075aa <_vfiprintf_r+0x1fe>
 800759e:	89ab      	ldrh	r3, [r5, #12]
 80075a0:	059a      	lsls	r2, r3, #22
 80075a2:	d402      	bmi.n	80075aa <_vfiprintf_r+0x1fe>
 80075a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075a6:	f7ff fed7 	bl	8007358 <__retarget_lock_release_recursive>
 80075aa:	89ab      	ldrh	r3, [r5, #12]
 80075ac:	065b      	lsls	r3, r3, #25
 80075ae:	f53f af1f 	bmi.w	80073f0 <_vfiprintf_r+0x44>
 80075b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075b4:	e71e      	b.n	80073f4 <_vfiprintf_r+0x48>
 80075b6:	ab03      	add	r3, sp, #12
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	462a      	mov	r2, r5
 80075bc:	4b05      	ldr	r3, [pc, #20]	@ (80075d4 <_vfiprintf_r+0x228>)
 80075be:	a904      	add	r1, sp, #16
 80075c0:	4630      	mov	r0, r6
 80075c2:	f000 f91b 	bl	80077fc <_printf_i>
 80075c6:	e7e4      	b.n	8007592 <_vfiprintf_r+0x1e6>
 80075c8:	08008d78 	.word	0x08008d78
 80075cc:	08008d82 	.word	0x08008d82
 80075d0:	00000000 	.word	0x00000000
 80075d4:	08007389 	.word	0x08007389
 80075d8:	08008d7e 	.word	0x08008d7e

080075dc <sbrk_aligned>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	4e0f      	ldr	r6, [pc, #60]	@ (800761c <sbrk_aligned+0x40>)
 80075e0:	460c      	mov	r4, r1
 80075e2:	6831      	ldr	r1, [r6, #0]
 80075e4:	4605      	mov	r5, r0
 80075e6:	b911      	cbnz	r1, 80075ee <sbrk_aligned+0x12>
 80075e8:	f000 fc70 	bl	8007ecc <_sbrk_r>
 80075ec:	6030      	str	r0, [r6, #0]
 80075ee:	4621      	mov	r1, r4
 80075f0:	4628      	mov	r0, r5
 80075f2:	f000 fc6b 	bl	8007ecc <_sbrk_r>
 80075f6:	1c43      	adds	r3, r0, #1
 80075f8:	d103      	bne.n	8007602 <sbrk_aligned+0x26>
 80075fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80075fe:	4620      	mov	r0, r4
 8007600:	bd70      	pop	{r4, r5, r6, pc}
 8007602:	1cc4      	adds	r4, r0, #3
 8007604:	f024 0403 	bic.w	r4, r4, #3
 8007608:	42a0      	cmp	r0, r4
 800760a:	d0f8      	beq.n	80075fe <sbrk_aligned+0x22>
 800760c:	1a21      	subs	r1, r4, r0
 800760e:	4628      	mov	r0, r5
 8007610:	f000 fc5c 	bl	8007ecc <_sbrk_r>
 8007614:	3001      	adds	r0, #1
 8007616:	d1f2      	bne.n	80075fe <sbrk_aligned+0x22>
 8007618:	e7ef      	b.n	80075fa <sbrk_aligned+0x1e>
 800761a:	bf00      	nop
 800761c:	20001c04 	.word	0x20001c04

08007620 <_malloc_r>:
 8007620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007624:	1ccd      	adds	r5, r1, #3
 8007626:	f025 0503 	bic.w	r5, r5, #3
 800762a:	3508      	adds	r5, #8
 800762c:	2d0c      	cmp	r5, #12
 800762e:	bf38      	it	cc
 8007630:	250c      	movcc	r5, #12
 8007632:	2d00      	cmp	r5, #0
 8007634:	4606      	mov	r6, r0
 8007636:	db01      	blt.n	800763c <_malloc_r+0x1c>
 8007638:	42a9      	cmp	r1, r5
 800763a:	d904      	bls.n	8007646 <_malloc_r+0x26>
 800763c:	230c      	movs	r3, #12
 800763e:	6033      	str	r3, [r6, #0]
 8007640:	2000      	movs	r0, #0
 8007642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007646:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800771c <_malloc_r+0xfc>
 800764a:	f000 faa3 	bl	8007b94 <__malloc_lock>
 800764e:	f8d8 3000 	ldr.w	r3, [r8]
 8007652:	461c      	mov	r4, r3
 8007654:	bb44      	cbnz	r4, 80076a8 <_malloc_r+0x88>
 8007656:	4629      	mov	r1, r5
 8007658:	4630      	mov	r0, r6
 800765a:	f7ff ffbf 	bl	80075dc <sbrk_aligned>
 800765e:	1c43      	adds	r3, r0, #1
 8007660:	4604      	mov	r4, r0
 8007662:	d158      	bne.n	8007716 <_malloc_r+0xf6>
 8007664:	f8d8 4000 	ldr.w	r4, [r8]
 8007668:	4627      	mov	r7, r4
 800766a:	2f00      	cmp	r7, #0
 800766c:	d143      	bne.n	80076f6 <_malloc_r+0xd6>
 800766e:	2c00      	cmp	r4, #0
 8007670:	d04b      	beq.n	800770a <_malloc_r+0xea>
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	4639      	mov	r1, r7
 8007676:	4630      	mov	r0, r6
 8007678:	eb04 0903 	add.w	r9, r4, r3
 800767c:	f000 fc26 	bl	8007ecc <_sbrk_r>
 8007680:	4581      	cmp	r9, r0
 8007682:	d142      	bne.n	800770a <_malloc_r+0xea>
 8007684:	6821      	ldr	r1, [r4, #0]
 8007686:	1a6d      	subs	r5, r5, r1
 8007688:	4629      	mov	r1, r5
 800768a:	4630      	mov	r0, r6
 800768c:	f7ff ffa6 	bl	80075dc <sbrk_aligned>
 8007690:	3001      	adds	r0, #1
 8007692:	d03a      	beq.n	800770a <_malloc_r+0xea>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	442b      	add	r3, r5
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	f8d8 3000 	ldr.w	r3, [r8]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	bb62      	cbnz	r2, 80076fc <_malloc_r+0xdc>
 80076a2:	f8c8 7000 	str.w	r7, [r8]
 80076a6:	e00f      	b.n	80076c8 <_malloc_r+0xa8>
 80076a8:	6822      	ldr	r2, [r4, #0]
 80076aa:	1b52      	subs	r2, r2, r5
 80076ac:	d420      	bmi.n	80076f0 <_malloc_r+0xd0>
 80076ae:	2a0b      	cmp	r2, #11
 80076b0:	d917      	bls.n	80076e2 <_malloc_r+0xc2>
 80076b2:	1961      	adds	r1, r4, r5
 80076b4:	42a3      	cmp	r3, r4
 80076b6:	6025      	str	r5, [r4, #0]
 80076b8:	bf18      	it	ne
 80076ba:	6059      	strne	r1, [r3, #4]
 80076bc:	6863      	ldr	r3, [r4, #4]
 80076be:	bf08      	it	eq
 80076c0:	f8c8 1000 	streq.w	r1, [r8]
 80076c4:	5162      	str	r2, [r4, r5]
 80076c6:	604b      	str	r3, [r1, #4]
 80076c8:	4630      	mov	r0, r6
 80076ca:	f000 fa69 	bl	8007ba0 <__malloc_unlock>
 80076ce:	f104 000b 	add.w	r0, r4, #11
 80076d2:	1d23      	adds	r3, r4, #4
 80076d4:	f020 0007 	bic.w	r0, r0, #7
 80076d8:	1ac2      	subs	r2, r0, r3
 80076da:	bf1c      	itt	ne
 80076dc:	1a1b      	subne	r3, r3, r0
 80076de:	50a3      	strne	r3, [r4, r2]
 80076e0:	e7af      	b.n	8007642 <_malloc_r+0x22>
 80076e2:	6862      	ldr	r2, [r4, #4]
 80076e4:	42a3      	cmp	r3, r4
 80076e6:	bf0c      	ite	eq
 80076e8:	f8c8 2000 	streq.w	r2, [r8]
 80076ec:	605a      	strne	r2, [r3, #4]
 80076ee:	e7eb      	b.n	80076c8 <_malloc_r+0xa8>
 80076f0:	4623      	mov	r3, r4
 80076f2:	6864      	ldr	r4, [r4, #4]
 80076f4:	e7ae      	b.n	8007654 <_malloc_r+0x34>
 80076f6:	463c      	mov	r4, r7
 80076f8:	687f      	ldr	r7, [r7, #4]
 80076fa:	e7b6      	b.n	800766a <_malloc_r+0x4a>
 80076fc:	461a      	mov	r2, r3
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	42a3      	cmp	r3, r4
 8007702:	d1fb      	bne.n	80076fc <_malloc_r+0xdc>
 8007704:	2300      	movs	r3, #0
 8007706:	6053      	str	r3, [r2, #4]
 8007708:	e7de      	b.n	80076c8 <_malloc_r+0xa8>
 800770a:	230c      	movs	r3, #12
 800770c:	6033      	str	r3, [r6, #0]
 800770e:	4630      	mov	r0, r6
 8007710:	f000 fa46 	bl	8007ba0 <__malloc_unlock>
 8007714:	e794      	b.n	8007640 <_malloc_r+0x20>
 8007716:	6005      	str	r5, [r0, #0]
 8007718:	e7d6      	b.n	80076c8 <_malloc_r+0xa8>
 800771a:	bf00      	nop
 800771c:	20001c08 	.word	0x20001c08

08007720 <_printf_common>:
 8007720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007724:	4616      	mov	r6, r2
 8007726:	4698      	mov	r8, r3
 8007728:	688a      	ldr	r2, [r1, #8]
 800772a:	690b      	ldr	r3, [r1, #16]
 800772c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007730:	4293      	cmp	r3, r2
 8007732:	bfb8      	it	lt
 8007734:	4613      	movlt	r3, r2
 8007736:	6033      	str	r3, [r6, #0]
 8007738:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800773c:	4607      	mov	r7, r0
 800773e:	460c      	mov	r4, r1
 8007740:	b10a      	cbz	r2, 8007746 <_printf_common+0x26>
 8007742:	3301      	adds	r3, #1
 8007744:	6033      	str	r3, [r6, #0]
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	0699      	lsls	r1, r3, #26
 800774a:	bf42      	ittt	mi
 800774c:	6833      	ldrmi	r3, [r6, #0]
 800774e:	3302      	addmi	r3, #2
 8007750:	6033      	strmi	r3, [r6, #0]
 8007752:	6825      	ldr	r5, [r4, #0]
 8007754:	f015 0506 	ands.w	r5, r5, #6
 8007758:	d106      	bne.n	8007768 <_printf_common+0x48>
 800775a:	f104 0a19 	add.w	sl, r4, #25
 800775e:	68e3      	ldr	r3, [r4, #12]
 8007760:	6832      	ldr	r2, [r6, #0]
 8007762:	1a9b      	subs	r3, r3, r2
 8007764:	42ab      	cmp	r3, r5
 8007766:	dc26      	bgt.n	80077b6 <_printf_common+0x96>
 8007768:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800776c:	6822      	ldr	r2, [r4, #0]
 800776e:	3b00      	subs	r3, #0
 8007770:	bf18      	it	ne
 8007772:	2301      	movne	r3, #1
 8007774:	0692      	lsls	r2, r2, #26
 8007776:	d42b      	bmi.n	80077d0 <_printf_common+0xb0>
 8007778:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800777c:	4641      	mov	r1, r8
 800777e:	4638      	mov	r0, r7
 8007780:	47c8      	blx	r9
 8007782:	3001      	adds	r0, #1
 8007784:	d01e      	beq.n	80077c4 <_printf_common+0xa4>
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	6922      	ldr	r2, [r4, #16]
 800778a:	f003 0306 	and.w	r3, r3, #6
 800778e:	2b04      	cmp	r3, #4
 8007790:	bf02      	ittt	eq
 8007792:	68e5      	ldreq	r5, [r4, #12]
 8007794:	6833      	ldreq	r3, [r6, #0]
 8007796:	1aed      	subeq	r5, r5, r3
 8007798:	68a3      	ldr	r3, [r4, #8]
 800779a:	bf0c      	ite	eq
 800779c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077a0:	2500      	movne	r5, #0
 80077a2:	4293      	cmp	r3, r2
 80077a4:	bfc4      	itt	gt
 80077a6:	1a9b      	subgt	r3, r3, r2
 80077a8:	18ed      	addgt	r5, r5, r3
 80077aa:	2600      	movs	r6, #0
 80077ac:	341a      	adds	r4, #26
 80077ae:	42b5      	cmp	r5, r6
 80077b0:	d11a      	bne.n	80077e8 <_printf_common+0xc8>
 80077b2:	2000      	movs	r0, #0
 80077b4:	e008      	b.n	80077c8 <_printf_common+0xa8>
 80077b6:	2301      	movs	r3, #1
 80077b8:	4652      	mov	r2, sl
 80077ba:	4641      	mov	r1, r8
 80077bc:	4638      	mov	r0, r7
 80077be:	47c8      	blx	r9
 80077c0:	3001      	adds	r0, #1
 80077c2:	d103      	bne.n	80077cc <_printf_common+0xac>
 80077c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077cc:	3501      	adds	r5, #1
 80077ce:	e7c6      	b.n	800775e <_printf_common+0x3e>
 80077d0:	18e1      	adds	r1, r4, r3
 80077d2:	1c5a      	adds	r2, r3, #1
 80077d4:	2030      	movs	r0, #48	@ 0x30
 80077d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077da:	4422      	add	r2, r4
 80077dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077e4:	3302      	adds	r3, #2
 80077e6:	e7c7      	b.n	8007778 <_printf_common+0x58>
 80077e8:	2301      	movs	r3, #1
 80077ea:	4622      	mov	r2, r4
 80077ec:	4641      	mov	r1, r8
 80077ee:	4638      	mov	r0, r7
 80077f0:	47c8      	blx	r9
 80077f2:	3001      	adds	r0, #1
 80077f4:	d0e6      	beq.n	80077c4 <_printf_common+0xa4>
 80077f6:	3601      	adds	r6, #1
 80077f8:	e7d9      	b.n	80077ae <_printf_common+0x8e>
	...

080077fc <_printf_i>:
 80077fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007800:	7e0f      	ldrb	r7, [r1, #24]
 8007802:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007804:	2f78      	cmp	r7, #120	@ 0x78
 8007806:	4691      	mov	r9, r2
 8007808:	4680      	mov	r8, r0
 800780a:	460c      	mov	r4, r1
 800780c:	469a      	mov	sl, r3
 800780e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007812:	d807      	bhi.n	8007824 <_printf_i+0x28>
 8007814:	2f62      	cmp	r7, #98	@ 0x62
 8007816:	d80a      	bhi.n	800782e <_printf_i+0x32>
 8007818:	2f00      	cmp	r7, #0
 800781a:	f000 80d2 	beq.w	80079c2 <_printf_i+0x1c6>
 800781e:	2f58      	cmp	r7, #88	@ 0x58
 8007820:	f000 80b9 	beq.w	8007996 <_printf_i+0x19a>
 8007824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007828:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800782c:	e03a      	b.n	80078a4 <_printf_i+0xa8>
 800782e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007832:	2b15      	cmp	r3, #21
 8007834:	d8f6      	bhi.n	8007824 <_printf_i+0x28>
 8007836:	a101      	add	r1, pc, #4	@ (adr r1, 800783c <_printf_i+0x40>)
 8007838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800783c:	08007895 	.word	0x08007895
 8007840:	080078a9 	.word	0x080078a9
 8007844:	08007825 	.word	0x08007825
 8007848:	08007825 	.word	0x08007825
 800784c:	08007825 	.word	0x08007825
 8007850:	08007825 	.word	0x08007825
 8007854:	080078a9 	.word	0x080078a9
 8007858:	08007825 	.word	0x08007825
 800785c:	08007825 	.word	0x08007825
 8007860:	08007825 	.word	0x08007825
 8007864:	08007825 	.word	0x08007825
 8007868:	080079a9 	.word	0x080079a9
 800786c:	080078d3 	.word	0x080078d3
 8007870:	08007963 	.word	0x08007963
 8007874:	08007825 	.word	0x08007825
 8007878:	08007825 	.word	0x08007825
 800787c:	080079cb 	.word	0x080079cb
 8007880:	08007825 	.word	0x08007825
 8007884:	080078d3 	.word	0x080078d3
 8007888:	08007825 	.word	0x08007825
 800788c:	08007825 	.word	0x08007825
 8007890:	0800796b 	.word	0x0800796b
 8007894:	6833      	ldr	r3, [r6, #0]
 8007896:	1d1a      	adds	r2, r3, #4
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6032      	str	r2, [r6, #0]
 800789c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078a4:	2301      	movs	r3, #1
 80078a6:	e09d      	b.n	80079e4 <_printf_i+0x1e8>
 80078a8:	6833      	ldr	r3, [r6, #0]
 80078aa:	6820      	ldr	r0, [r4, #0]
 80078ac:	1d19      	adds	r1, r3, #4
 80078ae:	6031      	str	r1, [r6, #0]
 80078b0:	0606      	lsls	r6, r0, #24
 80078b2:	d501      	bpl.n	80078b8 <_printf_i+0xbc>
 80078b4:	681d      	ldr	r5, [r3, #0]
 80078b6:	e003      	b.n	80078c0 <_printf_i+0xc4>
 80078b8:	0645      	lsls	r5, r0, #25
 80078ba:	d5fb      	bpl.n	80078b4 <_printf_i+0xb8>
 80078bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078c0:	2d00      	cmp	r5, #0
 80078c2:	da03      	bge.n	80078cc <_printf_i+0xd0>
 80078c4:	232d      	movs	r3, #45	@ 0x2d
 80078c6:	426d      	negs	r5, r5
 80078c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078cc:	4859      	ldr	r0, [pc, #356]	@ (8007a34 <_printf_i+0x238>)
 80078ce:	230a      	movs	r3, #10
 80078d0:	e011      	b.n	80078f6 <_printf_i+0xfa>
 80078d2:	6821      	ldr	r1, [r4, #0]
 80078d4:	6833      	ldr	r3, [r6, #0]
 80078d6:	0608      	lsls	r0, r1, #24
 80078d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80078dc:	d402      	bmi.n	80078e4 <_printf_i+0xe8>
 80078de:	0649      	lsls	r1, r1, #25
 80078e0:	bf48      	it	mi
 80078e2:	b2ad      	uxthmi	r5, r5
 80078e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80078e6:	4853      	ldr	r0, [pc, #332]	@ (8007a34 <_printf_i+0x238>)
 80078e8:	6033      	str	r3, [r6, #0]
 80078ea:	bf14      	ite	ne
 80078ec:	230a      	movne	r3, #10
 80078ee:	2308      	moveq	r3, #8
 80078f0:	2100      	movs	r1, #0
 80078f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078f6:	6866      	ldr	r6, [r4, #4]
 80078f8:	60a6      	str	r6, [r4, #8]
 80078fa:	2e00      	cmp	r6, #0
 80078fc:	bfa2      	ittt	ge
 80078fe:	6821      	ldrge	r1, [r4, #0]
 8007900:	f021 0104 	bicge.w	r1, r1, #4
 8007904:	6021      	strge	r1, [r4, #0]
 8007906:	b90d      	cbnz	r5, 800790c <_printf_i+0x110>
 8007908:	2e00      	cmp	r6, #0
 800790a:	d04b      	beq.n	80079a4 <_printf_i+0x1a8>
 800790c:	4616      	mov	r6, r2
 800790e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007912:	fb03 5711 	mls	r7, r3, r1, r5
 8007916:	5dc7      	ldrb	r7, [r0, r7]
 8007918:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800791c:	462f      	mov	r7, r5
 800791e:	42bb      	cmp	r3, r7
 8007920:	460d      	mov	r5, r1
 8007922:	d9f4      	bls.n	800790e <_printf_i+0x112>
 8007924:	2b08      	cmp	r3, #8
 8007926:	d10b      	bne.n	8007940 <_printf_i+0x144>
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	07df      	lsls	r7, r3, #31
 800792c:	d508      	bpl.n	8007940 <_printf_i+0x144>
 800792e:	6923      	ldr	r3, [r4, #16]
 8007930:	6861      	ldr	r1, [r4, #4]
 8007932:	4299      	cmp	r1, r3
 8007934:	bfde      	ittt	le
 8007936:	2330      	movle	r3, #48	@ 0x30
 8007938:	f806 3c01 	strble.w	r3, [r6, #-1]
 800793c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007940:	1b92      	subs	r2, r2, r6
 8007942:	6122      	str	r2, [r4, #16]
 8007944:	f8cd a000 	str.w	sl, [sp]
 8007948:	464b      	mov	r3, r9
 800794a:	aa03      	add	r2, sp, #12
 800794c:	4621      	mov	r1, r4
 800794e:	4640      	mov	r0, r8
 8007950:	f7ff fee6 	bl	8007720 <_printf_common>
 8007954:	3001      	adds	r0, #1
 8007956:	d14a      	bne.n	80079ee <_printf_i+0x1f2>
 8007958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800795c:	b004      	add	sp, #16
 800795e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	f043 0320 	orr.w	r3, r3, #32
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	4833      	ldr	r0, [pc, #204]	@ (8007a38 <_printf_i+0x23c>)
 800796c:	2778      	movs	r7, #120	@ 0x78
 800796e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	6831      	ldr	r1, [r6, #0]
 8007976:	061f      	lsls	r7, r3, #24
 8007978:	f851 5b04 	ldr.w	r5, [r1], #4
 800797c:	d402      	bmi.n	8007984 <_printf_i+0x188>
 800797e:	065f      	lsls	r7, r3, #25
 8007980:	bf48      	it	mi
 8007982:	b2ad      	uxthmi	r5, r5
 8007984:	6031      	str	r1, [r6, #0]
 8007986:	07d9      	lsls	r1, r3, #31
 8007988:	bf44      	itt	mi
 800798a:	f043 0320 	orrmi.w	r3, r3, #32
 800798e:	6023      	strmi	r3, [r4, #0]
 8007990:	b11d      	cbz	r5, 800799a <_printf_i+0x19e>
 8007992:	2310      	movs	r3, #16
 8007994:	e7ac      	b.n	80078f0 <_printf_i+0xf4>
 8007996:	4827      	ldr	r0, [pc, #156]	@ (8007a34 <_printf_i+0x238>)
 8007998:	e7e9      	b.n	800796e <_printf_i+0x172>
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	f023 0320 	bic.w	r3, r3, #32
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	e7f6      	b.n	8007992 <_printf_i+0x196>
 80079a4:	4616      	mov	r6, r2
 80079a6:	e7bd      	b.n	8007924 <_printf_i+0x128>
 80079a8:	6833      	ldr	r3, [r6, #0]
 80079aa:	6825      	ldr	r5, [r4, #0]
 80079ac:	6961      	ldr	r1, [r4, #20]
 80079ae:	1d18      	adds	r0, r3, #4
 80079b0:	6030      	str	r0, [r6, #0]
 80079b2:	062e      	lsls	r6, r5, #24
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	d501      	bpl.n	80079bc <_printf_i+0x1c0>
 80079b8:	6019      	str	r1, [r3, #0]
 80079ba:	e002      	b.n	80079c2 <_printf_i+0x1c6>
 80079bc:	0668      	lsls	r0, r5, #25
 80079be:	d5fb      	bpl.n	80079b8 <_printf_i+0x1bc>
 80079c0:	8019      	strh	r1, [r3, #0]
 80079c2:	2300      	movs	r3, #0
 80079c4:	6123      	str	r3, [r4, #16]
 80079c6:	4616      	mov	r6, r2
 80079c8:	e7bc      	b.n	8007944 <_printf_i+0x148>
 80079ca:	6833      	ldr	r3, [r6, #0]
 80079cc:	1d1a      	adds	r2, r3, #4
 80079ce:	6032      	str	r2, [r6, #0]
 80079d0:	681e      	ldr	r6, [r3, #0]
 80079d2:	6862      	ldr	r2, [r4, #4]
 80079d4:	2100      	movs	r1, #0
 80079d6:	4630      	mov	r0, r6
 80079d8:	f7f8 fc1a 	bl	8000210 <memchr>
 80079dc:	b108      	cbz	r0, 80079e2 <_printf_i+0x1e6>
 80079de:	1b80      	subs	r0, r0, r6
 80079e0:	6060      	str	r0, [r4, #4]
 80079e2:	6863      	ldr	r3, [r4, #4]
 80079e4:	6123      	str	r3, [r4, #16]
 80079e6:	2300      	movs	r3, #0
 80079e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079ec:	e7aa      	b.n	8007944 <_printf_i+0x148>
 80079ee:	6923      	ldr	r3, [r4, #16]
 80079f0:	4632      	mov	r2, r6
 80079f2:	4649      	mov	r1, r9
 80079f4:	4640      	mov	r0, r8
 80079f6:	47d0      	blx	sl
 80079f8:	3001      	adds	r0, #1
 80079fa:	d0ad      	beq.n	8007958 <_printf_i+0x15c>
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	079b      	lsls	r3, r3, #30
 8007a00:	d413      	bmi.n	8007a2a <_printf_i+0x22e>
 8007a02:	68e0      	ldr	r0, [r4, #12]
 8007a04:	9b03      	ldr	r3, [sp, #12]
 8007a06:	4298      	cmp	r0, r3
 8007a08:	bfb8      	it	lt
 8007a0a:	4618      	movlt	r0, r3
 8007a0c:	e7a6      	b.n	800795c <_printf_i+0x160>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4632      	mov	r2, r6
 8007a12:	4649      	mov	r1, r9
 8007a14:	4640      	mov	r0, r8
 8007a16:	47d0      	blx	sl
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d09d      	beq.n	8007958 <_printf_i+0x15c>
 8007a1c:	3501      	adds	r5, #1
 8007a1e:	68e3      	ldr	r3, [r4, #12]
 8007a20:	9903      	ldr	r1, [sp, #12]
 8007a22:	1a5b      	subs	r3, r3, r1
 8007a24:	42ab      	cmp	r3, r5
 8007a26:	dcf2      	bgt.n	8007a0e <_printf_i+0x212>
 8007a28:	e7eb      	b.n	8007a02 <_printf_i+0x206>
 8007a2a:	2500      	movs	r5, #0
 8007a2c:	f104 0619 	add.w	r6, r4, #25
 8007a30:	e7f5      	b.n	8007a1e <_printf_i+0x222>
 8007a32:	bf00      	nop
 8007a34:	08008d89 	.word	0x08008d89
 8007a38:	08008d9a 	.word	0x08008d9a

08007a3c <__sflush_r>:
 8007a3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a44:	0716      	lsls	r6, r2, #28
 8007a46:	4605      	mov	r5, r0
 8007a48:	460c      	mov	r4, r1
 8007a4a:	d454      	bmi.n	8007af6 <__sflush_r+0xba>
 8007a4c:	684b      	ldr	r3, [r1, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	dc02      	bgt.n	8007a58 <__sflush_r+0x1c>
 8007a52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	dd48      	ble.n	8007aea <__sflush_r+0xae>
 8007a58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a5a:	2e00      	cmp	r6, #0
 8007a5c:	d045      	beq.n	8007aea <__sflush_r+0xae>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a64:	682f      	ldr	r7, [r5, #0]
 8007a66:	6a21      	ldr	r1, [r4, #32]
 8007a68:	602b      	str	r3, [r5, #0]
 8007a6a:	d030      	beq.n	8007ace <__sflush_r+0x92>
 8007a6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	0759      	lsls	r1, r3, #29
 8007a72:	d505      	bpl.n	8007a80 <__sflush_r+0x44>
 8007a74:	6863      	ldr	r3, [r4, #4]
 8007a76:	1ad2      	subs	r2, r2, r3
 8007a78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a7a:	b10b      	cbz	r3, 8007a80 <__sflush_r+0x44>
 8007a7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a7e:	1ad2      	subs	r2, r2, r3
 8007a80:	2300      	movs	r3, #0
 8007a82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a84:	6a21      	ldr	r1, [r4, #32]
 8007a86:	4628      	mov	r0, r5
 8007a88:	47b0      	blx	r6
 8007a8a:	1c43      	adds	r3, r0, #1
 8007a8c:	89a3      	ldrh	r3, [r4, #12]
 8007a8e:	d106      	bne.n	8007a9e <__sflush_r+0x62>
 8007a90:	6829      	ldr	r1, [r5, #0]
 8007a92:	291d      	cmp	r1, #29
 8007a94:	d82b      	bhi.n	8007aee <__sflush_r+0xb2>
 8007a96:	4a2a      	ldr	r2, [pc, #168]	@ (8007b40 <__sflush_r+0x104>)
 8007a98:	410a      	asrs	r2, r1
 8007a9a:	07d6      	lsls	r6, r2, #31
 8007a9c:	d427      	bmi.n	8007aee <__sflush_r+0xb2>
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	6062      	str	r2, [r4, #4]
 8007aa2:	04d9      	lsls	r1, r3, #19
 8007aa4:	6922      	ldr	r2, [r4, #16]
 8007aa6:	6022      	str	r2, [r4, #0]
 8007aa8:	d504      	bpl.n	8007ab4 <__sflush_r+0x78>
 8007aaa:	1c42      	adds	r2, r0, #1
 8007aac:	d101      	bne.n	8007ab2 <__sflush_r+0x76>
 8007aae:	682b      	ldr	r3, [r5, #0]
 8007ab0:	b903      	cbnz	r3, 8007ab4 <__sflush_r+0x78>
 8007ab2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ab6:	602f      	str	r7, [r5, #0]
 8007ab8:	b1b9      	cbz	r1, 8007aea <__sflush_r+0xae>
 8007aba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007abe:	4299      	cmp	r1, r3
 8007ac0:	d002      	beq.n	8007ac8 <__sflush_r+0x8c>
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f000 fa24 	bl	8007f10 <_free_r>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	6363      	str	r3, [r4, #52]	@ 0x34
 8007acc:	e00d      	b.n	8007aea <__sflush_r+0xae>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	47b0      	blx	r6
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	1c50      	adds	r0, r2, #1
 8007ad8:	d1c9      	bne.n	8007a6e <__sflush_r+0x32>
 8007ada:	682b      	ldr	r3, [r5, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d0c6      	beq.n	8007a6e <__sflush_r+0x32>
 8007ae0:	2b1d      	cmp	r3, #29
 8007ae2:	d001      	beq.n	8007ae8 <__sflush_r+0xac>
 8007ae4:	2b16      	cmp	r3, #22
 8007ae6:	d11e      	bne.n	8007b26 <__sflush_r+0xea>
 8007ae8:	602f      	str	r7, [r5, #0]
 8007aea:	2000      	movs	r0, #0
 8007aec:	e022      	b.n	8007b34 <__sflush_r+0xf8>
 8007aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007af2:	b21b      	sxth	r3, r3
 8007af4:	e01b      	b.n	8007b2e <__sflush_r+0xf2>
 8007af6:	690f      	ldr	r7, [r1, #16]
 8007af8:	2f00      	cmp	r7, #0
 8007afa:	d0f6      	beq.n	8007aea <__sflush_r+0xae>
 8007afc:	0793      	lsls	r3, r2, #30
 8007afe:	680e      	ldr	r6, [r1, #0]
 8007b00:	bf08      	it	eq
 8007b02:	694b      	ldreq	r3, [r1, #20]
 8007b04:	600f      	str	r7, [r1, #0]
 8007b06:	bf18      	it	ne
 8007b08:	2300      	movne	r3, #0
 8007b0a:	eba6 0807 	sub.w	r8, r6, r7
 8007b0e:	608b      	str	r3, [r1, #8]
 8007b10:	f1b8 0f00 	cmp.w	r8, #0
 8007b14:	dde9      	ble.n	8007aea <__sflush_r+0xae>
 8007b16:	6a21      	ldr	r1, [r4, #32]
 8007b18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b1a:	4643      	mov	r3, r8
 8007b1c:	463a      	mov	r2, r7
 8007b1e:	4628      	mov	r0, r5
 8007b20:	47b0      	blx	r6
 8007b22:	2800      	cmp	r0, #0
 8007b24:	dc08      	bgt.n	8007b38 <__sflush_r+0xfc>
 8007b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b2e:	81a3      	strh	r3, [r4, #12]
 8007b30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b38:	4407      	add	r7, r0
 8007b3a:	eba8 0800 	sub.w	r8, r8, r0
 8007b3e:	e7e7      	b.n	8007b10 <__sflush_r+0xd4>
 8007b40:	dfbffffe 	.word	0xdfbffffe

08007b44 <_fflush_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	690b      	ldr	r3, [r1, #16]
 8007b48:	4605      	mov	r5, r0
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	b913      	cbnz	r3, 8007b54 <_fflush_r+0x10>
 8007b4e:	2500      	movs	r5, #0
 8007b50:	4628      	mov	r0, r5
 8007b52:	bd38      	pop	{r3, r4, r5, pc}
 8007b54:	b118      	cbz	r0, 8007b5e <_fflush_r+0x1a>
 8007b56:	6a03      	ldr	r3, [r0, #32]
 8007b58:	b90b      	cbnz	r3, 8007b5e <_fflush_r+0x1a>
 8007b5a:	f7ff fb23 	bl	80071a4 <__sinit>
 8007b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0f3      	beq.n	8007b4e <_fflush_r+0xa>
 8007b66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b68:	07d0      	lsls	r0, r2, #31
 8007b6a:	d404      	bmi.n	8007b76 <_fflush_r+0x32>
 8007b6c:	0599      	lsls	r1, r3, #22
 8007b6e:	d402      	bmi.n	8007b76 <_fflush_r+0x32>
 8007b70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b72:	f7ff fbf0 	bl	8007356 <__retarget_lock_acquire_recursive>
 8007b76:	4628      	mov	r0, r5
 8007b78:	4621      	mov	r1, r4
 8007b7a:	f7ff ff5f 	bl	8007a3c <__sflush_r>
 8007b7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b80:	07da      	lsls	r2, r3, #31
 8007b82:	4605      	mov	r5, r0
 8007b84:	d4e4      	bmi.n	8007b50 <_fflush_r+0xc>
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	059b      	lsls	r3, r3, #22
 8007b8a:	d4e1      	bmi.n	8007b50 <_fflush_r+0xc>
 8007b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b8e:	f7ff fbe3 	bl	8007358 <__retarget_lock_release_recursive>
 8007b92:	e7dd      	b.n	8007b50 <_fflush_r+0xc>

08007b94 <__malloc_lock>:
 8007b94:	4801      	ldr	r0, [pc, #4]	@ (8007b9c <__malloc_lock+0x8>)
 8007b96:	f7ff bbde 	b.w	8007356 <__retarget_lock_acquire_recursive>
 8007b9a:	bf00      	nop
 8007b9c:	20001c00 	.word	0x20001c00

08007ba0 <__malloc_unlock>:
 8007ba0:	4801      	ldr	r0, [pc, #4]	@ (8007ba8 <__malloc_unlock+0x8>)
 8007ba2:	f7ff bbd9 	b.w	8007358 <__retarget_lock_release_recursive>
 8007ba6:	bf00      	nop
 8007ba8:	20001c00 	.word	0x20001c00

08007bac <__sread>:
 8007bac:	b510      	push	{r4, lr}
 8007bae:	460c      	mov	r4, r1
 8007bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb4:	f000 f978 	bl	8007ea8 <_read_r>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	bfab      	itete	ge
 8007bbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8007bc0:	181b      	addge	r3, r3, r0
 8007bc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bc6:	bfac      	ite	ge
 8007bc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bca:	81a3      	strhlt	r3, [r4, #12]
 8007bcc:	bd10      	pop	{r4, pc}

08007bce <__swrite>:
 8007bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd2:	461f      	mov	r7, r3
 8007bd4:	898b      	ldrh	r3, [r1, #12]
 8007bd6:	05db      	lsls	r3, r3, #23
 8007bd8:	4605      	mov	r5, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	4616      	mov	r6, r2
 8007bde:	d505      	bpl.n	8007bec <__swrite+0x1e>
 8007be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be4:	2302      	movs	r3, #2
 8007be6:	2200      	movs	r2, #0
 8007be8:	f000 f94c 	bl	8007e84 <_lseek_r>
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bf2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bf6:	81a3      	strh	r3, [r4, #12]
 8007bf8:	4632      	mov	r2, r6
 8007bfa:	463b      	mov	r3, r7
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c02:	f000 b973 	b.w	8007eec <_write_r>

08007c06 <__sseek>:
 8007c06:	b510      	push	{r4, lr}
 8007c08:	460c      	mov	r4, r1
 8007c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0e:	f000 f939 	bl	8007e84 <_lseek_r>
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	bf15      	itete	ne
 8007c18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c22:	81a3      	strheq	r3, [r4, #12]
 8007c24:	bf18      	it	ne
 8007c26:	81a3      	strhne	r3, [r4, #12]
 8007c28:	bd10      	pop	{r4, pc}

08007c2a <__sclose>:
 8007c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c2e:	f000 b8f7 	b.w	8007e20 <_close_r>

08007c32 <__swbuf_r>:
 8007c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c34:	460e      	mov	r6, r1
 8007c36:	4614      	mov	r4, r2
 8007c38:	4605      	mov	r5, r0
 8007c3a:	b118      	cbz	r0, 8007c44 <__swbuf_r+0x12>
 8007c3c:	6a03      	ldr	r3, [r0, #32]
 8007c3e:	b90b      	cbnz	r3, 8007c44 <__swbuf_r+0x12>
 8007c40:	f7ff fab0 	bl	80071a4 <__sinit>
 8007c44:	69a3      	ldr	r3, [r4, #24]
 8007c46:	60a3      	str	r3, [r4, #8]
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	071a      	lsls	r2, r3, #28
 8007c4c:	d501      	bpl.n	8007c52 <__swbuf_r+0x20>
 8007c4e:	6923      	ldr	r3, [r4, #16]
 8007c50:	b943      	cbnz	r3, 8007c64 <__swbuf_r+0x32>
 8007c52:	4621      	mov	r1, r4
 8007c54:	4628      	mov	r0, r5
 8007c56:	f000 f82b 	bl	8007cb0 <__swsetup_r>
 8007c5a:	b118      	cbz	r0, 8007c64 <__swbuf_r+0x32>
 8007c5c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007c60:	4638      	mov	r0, r7
 8007c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	6922      	ldr	r2, [r4, #16]
 8007c68:	1a98      	subs	r0, r3, r2
 8007c6a:	6963      	ldr	r3, [r4, #20]
 8007c6c:	b2f6      	uxtb	r6, r6
 8007c6e:	4283      	cmp	r3, r0
 8007c70:	4637      	mov	r7, r6
 8007c72:	dc05      	bgt.n	8007c80 <__swbuf_r+0x4e>
 8007c74:	4621      	mov	r1, r4
 8007c76:	4628      	mov	r0, r5
 8007c78:	f7ff ff64 	bl	8007b44 <_fflush_r>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	d1ed      	bne.n	8007c5c <__swbuf_r+0x2a>
 8007c80:	68a3      	ldr	r3, [r4, #8]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	60a3      	str	r3, [r4, #8]
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	1c5a      	adds	r2, r3, #1
 8007c8a:	6022      	str	r2, [r4, #0]
 8007c8c:	701e      	strb	r6, [r3, #0]
 8007c8e:	6962      	ldr	r2, [r4, #20]
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d004      	beq.n	8007ca0 <__swbuf_r+0x6e>
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	07db      	lsls	r3, r3, #31
 8007c9a:	d5e1      	bpl.n	8007c60 <__swbuf_r+0x2e>
 8007c9c:	2e0a      	cmp	r6, #10
 8007c9e:	d1df      	bne.n	8007c60 <__swbuf_r+0x2e>
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f7ff ff4e 	bl	8007b44 <_fflush_r>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d0d9      	beq.n	8007c60 <__swbuf_r+0x2e>
 8007cac:	e7d6      	b.n	8007c5c <__swbuf_r+0x2a>
	...

08007cb0 <__swsetup_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4b29      	ldr	r3, [pc, #164]	@ (8007d58 <__swsetup_r+0xa8>)
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	6818      	ldr	r0, [r3, #0]
 8007cb8:	460c      	mov	r4, r1
 8007cba:	b118      	cbz	r0, 8007cc4 <__swsetup_r+0x14>
 8007cbc:	6a03      	ldr	r3, [r0, #32]
 8007cbe:	b90b      	cbnz	r3, 8007cc4 <__swsetup_r+0x14>
 8007cc0:	f7ff fa70 	bl	80071a4 <__sinit>
 8007cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cc8:	0719      	lsls	r1, r3, #28
 8007cca:	d422      	bmi.n	8007d12 <__swsetup_r+0x62>
 8007ccc:	06da      	lsls	r2, r3, #27
 8007cce:	d407      	bmi.n	8007ce0 <__swsetup_r+0x30>
 8007cd0:	2209      	movs	r2, #9
 8007cd2:	602a      	str	r2, [r5, #0]
 8007cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cd8:	81a3      	strh	r3, [r4, #12]
 8007cda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cde:	e033      	b.n	8007d48 <__swsetup_r+0x98>
 8007ce0:	0758      	lsls	r0, r3, #29
 8007ce2:	d512      	bpl.n	8007d0a <__swsetup_r+0x5a>
 8007ce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ce6:	b141      	cbz	r1, 8007cfa <__swsetup_r+0x4a>
 8007ce8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cec:	4299      	cmp	r1, r3
 8007cee:	d002      	beq.n	8007cf6 <__swsetup_r+0x46>
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	f000 f90d 	bl	8007f10 <_free_r>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d00:	81a3      	strh	r3, [r4, #12]
 8007d02:	2300      	movs	r3, #0
 8007d04:	6063      	str	r3, [r4, #4]
 8007d06:	6923      	ldr	r3, [r4, #16]
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	f043 0308 	orr.w	r3, r3, #8
 8007d10:	81a3      	strh	r3, [r4, #12]
 8007d12:	6923      	ldr	r3, [r4, #16]
 8007d14:	b94b      	cbnz	r3, 8007d2a <__swsetup_r+0x7a>
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d20:	d003      	beq.n	8007d2a <__swsetup_r+0x7a>
 8007d22:	4621      	mov	r1, r4
 8007d24:	4628      	mov	r0, r5
 8007d26:	f000 f83f 	bl	8007da8 <__smakebuf_r>
 8007d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d2e:	f013 0201 	ands.w	r2, r3, #1
 8007d32:	d00a      	beq.n	8007d4a <__swsetup_r+0x9a>
 8007d34:	2200      	movs	r2, #0
 8007d36:	60a2      	str	r2, [r4, #8]
 8007d38:	6962      	ldr	r2, [r4, #20]
 8007d3a:	4252      	negs	r2, r2
 8007d3c:	61a2      	str	r2, [r4, #24]
 8007d3e:	6922      	ldr	r2, [r4, #16]
 8007d40:	b942      	cbnz	r2, 8007d54 <__swsetup_r+0xa4>
 8007d42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d46:	d1c5      	bne.n	8007cd4 <__swsetup_r+0x24>
 8007d48:	bd38      	pop	{r3, r4, r5, pc}
 8007d4a:	0799      	lsls	r1, r3, #30
 8007d4c:	bf58      	it	pl
 8007d4e:	6962      	ldrpl	r2, [r4, #20]
 8007d50:	60a2      	str	r2, [r4, #8]
 8007d52:	e7f4      	b.n	8007d3e <__swsetup_r+0x8e>
 8007d54:	2000      	movs	r0, #0
 8007d56:	e7f7      	b.n	8007d48 <__swsetup_r+0x98>
 8007d58:	20000028 	.word	0x20000028

08007d5c <__swhatbuf_r>:
 8007d5c:	b570      	push	{r4, r5, r6, lr}
 8007d5e:	460c      	mov	r4, r1
 8007d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d64:	2900      	cmp	r1, #0
 8007d66:	b096      	sub	sp, #88	@ 0x58
 8007d68:	4615      	mov	r5, r2
 8007d6a:	461e      	mov	r6, r3
 8007d6c:	da0d      	bge.n	8007d8a <__swhatbuf_r+0x2e>
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d74:	f04f 0100 	mov.w	r1, #0
 8007d78:	bf14      	ite	ne
 8007d7a:	2340      	movne	r3, #64	@ 0x40
 8007d7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d80:	2000      	movs	r0, #0
 8007d82:	6031      	str	r1, [r6, #0]
 8007d84:	602b      	str	r3, [r5, #0]
 8007d86:	b016      	add	sp, #88	@ 0x58
 8007d88:	bd70      	pop	{r4, r5, r6, pc}
 8007d8a:	466a      	mov	r2, sp
 8007d8c:	f000 f858 	bl	8007e40 <_fstat_r>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	dbec      	blt.n	8007d6e <__swhatbuf_r+0x12>
 8007d94:	9901      	ldr	r1, [sp, #4]
 8007d96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d9e:	4259      	negs	r1, r3
 8007da0:	4159      	adcs	r1, r3
 8007da2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007da6:	e7eb      	b.n	8007d80 <__swhatbuf_r+0x24>

08007da8 <__smakebuf_r>:
 8007da8:	898b      	ldrh	r3, [r1, #12]
 8007daa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dac:	079d      	lsls	r5, r3, #30
 8007dae:	4606      	mov	r6, r0
 8007db0:	460c      	mov	r4, r1
 8007db2:	d507      	bpl.n	8007dc4 <__smakebuf_r+0x1c>
 8007db4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	6123      	str	r3, [r4, #16]
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	6163      	str	r3, [r4, #20]
 8007dc0:	b003      	add	sp, #12
 8007dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dc4:	ab01      	add	r3, sp, #4
 8007dc6:	466a      	mov	r2, sp
 8007dc8:	f7ff ffc8 	bl	8007d5c <__swhatbuf_r>
 8007dcc:	9f00      	ldr	r7, [sp, #0]
 8007dce:	4605      	mov	r5, r0
 8007dd0:	4639      	mov	r1, r7
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	f7ff fc24 	bl	8007620 <_malloc_r>
 8007dd8:	b948      	cbnz	r0, 8007dee <__smakebuf_r+0x46>
 8007dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dde:	059a      	lsls	r2, r3, #22
 8007de0:	d4ee      	bmi.n	8007dc0 <__smakebuf_r+0x18>
 8007de2:	f023 0303 	bic.w	r3, r3, #3
 8007de6:	f043 0302 	orr.w	r3, r3, #2
 8007dea:	81a3      	strh	r3, [r4, #12]
 8007dec:	e7e2      	b.n	8007db4 <__smakebuf_r+0xc>
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	6020      	str	r0, [r4, #0]
 8007df2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007df6:	81a3      	strh	r3, [r4, #12]
 8007df8:	9b01      	ldr	r3, [sp, #4]
 8007dfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007dfe:	b15b      	cbz	r3, 8007e18 <__smakebuf_r+0x70>
 8007e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e04:	4630      	mov	r0, r6
 8007e06:	f000 f82d 	bl	8007e64 <_isatty_r>
 8007e0a:	b128      	cbz	r0, 8007e18 <__smakebuf_r+0x70>
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	f023 0303 	bic.w	r3, r3, #3
 8007e12:	f043 0301 	orr.w	r3, r3, #1
 8007e16:	81a3      	strh	r3, [r4, #12]
 8007e18:	89a3      	ldrh	r3, [r4, #12]
 8007e1a:	431d      	orrs	r5, r3
 8007e1c:	81a5      	strh	r5, [r4, #12]
 8007e1e:	e7cf      	b.n	8007dc0 <__smakebuf_r+0x18>

08007e20 <_close_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4d06      	ldr	r5, [pc, #24]	@ (8007e3c <_close_r+0x1c>)
 8007e24:	2300      	movs	r3, #0
 8007e26:	4604      	mov	r4, r0
 8007e28:	4608      	mov	r0, r1
 8007e2a:	602b      	str	r3, [r5, #0]
 8007e2c:	f7f8 ff4f 	bl	8000cce <_close>
 8007e30:	1c43      	adds	r3, r0, #1
 8007e32:	d102      	bne.n	8007e3a <_close_r+0x1a>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	b103      	cbz	r3, 8007e3a <_close_r+0x1a>
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	20001c0c 	.word	0x20001c0c

08007e40 <_fstat_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	4d07      	ldr	r5, [pc, #28]	@ (8007e60 <_fstat_r+0x20>)
 8007e44:	2300      	movs	r3, #0
 8007e46:	4604      	mov	r4, r0
 8007e48:	4608      	mov	r0, r1
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	602b      	str	r3, [r5, #0]
 8007e4e:	f7f8 ff4a 	bl	8000ce6 <_fstat>
 8007e52:	1c43      	adds	r3, r0, #1
 8007e54:	d102      	bne.n	8007e5c <_fstat_r+0x1c>
 8007e56:	682b      	ldr	r3, [r5, #0]
 8007e58:	b103      	cbz	r3, 8007e5c <_fstat_r+0x1c>
 8007e5a:	6023      	str	r3, [r4, #0]
 8007e5c:	bd38      	pop	{r3, r4, r5, pc}
 8007e5e:	bf00      	nop
 8007e60:	20001c0c 	.word	0x20001c0c

08007e64 <_isatty_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	4d06      	ldr	r5, [pc, #24]	@ (8007e80 <_isatty_r+0x1c>)
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	602b      	str	r3, [r5, #0]
 8007e70:	f7f8 ff49 	bl	8000d06 <_isatty>
 8007e74:	1c43      	adds	r3, r0, #1
 8007e76:	d102      	bne.n	8007e7e <_isatty_r+0x1a>
 8007e78:	682b      	ldr	r3, [r5, #0]
 8007e7a:	b103      	cbz	r3, 8007e7e <_isatty_r+0x1a>
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	bd38      	pop	{r3, r4, r5, pc}
 8007e80:	20001c0c 	.word	0x20001c0c

08007e84 <_lseek_r>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	4d07      	ldr	r5, [pc, #28]	@ (8007ea4 <_lseek_r+0x20>)
 8007e88:	4604      	mov	r4, r0
 8007e8a:	4608      	mov	r0, r1
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	2200      	movs	r2, #0
 8007e90:	602a      	str	r2, [r5, #0]
 8007e92:	461a      	mov	r2, r3
 8007e94:	f7f8 ff42 	bl	8000d1c <_lseek>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	d102      	bne.n	8007ea2 <_lseek_r+0x1e>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	b103      	cbz	r3, 8007ea2 <_lseek_r+0x1e>
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}
 8007ea4:	20001c0c 	.word	0x20001c0c

08007ea8 <_read_r>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	4d07      	ldr	r5, [pc, #28]	@ (8007ec8 <_read_r+0x20>)
 8007eac:	4604      	mov	r4, r0
 8007eae:	4608      	mov	r0, r1
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	602a      	str	r2, [r5, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f7f8 fed0 	bl	8000c5c <_read>
 8007ebc:	1c43      	adds	r3, r0, #1
 8007ebe:	d102      	bne.n	8007ec6 <_read_r+0x1e>
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	b103      	cbz	r3, 8007ec6 <_read_r+0x1e>
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
 8007ec8:	20001c0c 	.word	0x20001c0c

08007ecc <_sbrk_r>:
 8007ecc:	b538      	push	{r3, r4, r5, lr}
 8007ece:	4d06      	ldr	r5, [pc, #24]	@ (8007ee8 <_sbrk_r+0x1c>)
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	4608      	mov	r0, r1
 8007ed6:	602b      	str	r3, [r5, #0]
 8007ed8:	f7f8 ff2e 	bl	8000d38 <_sbrk>
 8007edc:	1c43      	adds	r3, r0, #1
 8007ede:	d102      	bne.n	8007ee6 <_sbrk_r+0x1a>
 8007ee0:	682b      	ldr	r3, [r5, #0]
 8007ee2:	b103      	cbz	r3, 8007ee6 <_sbrk_r+0x1a>
 8007ee4:	6023      	str	r3, [r4, #0]
 8007ee6:	bd38      	pop	{r3, r4, r5, pc}
 8007ee8:	20001c0c 	.word	0x20001c0c

08007eec <_write_r>:
 8007eec:	b538      	push	{r3, r4, r5, lr}
 8007eee:	4d07      	ldr	r5, [pc, #28]	@ (8007f0c <_write_r+0x20>)
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	4608      	mov	r0, r1
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	602a      	str	r2, [r5, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	f7f8 fecb 	bl	8000c96 <_write>
 8007f00:	1c43      	adds	r3, r0, #1
 8007f02:	d102      	bne.n	8007f0a <_write_r+0x1e>
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	b103      	cbz	r3, 8007f0a <_write_r+0x1e>
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	bd38      	pop	{r3, r4, r5, pc}
 8007f0c:	20001c0c 	.word	0x20001c0c

08007f10 <_free_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4605      	mov	r5, r0
 8007f14:	2900      	cmp	r1, #0
 8007f16:	d041      	beq.n	8007f9c <_free_r+0x8c>
 8007f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f1c:	1f0c      	subs	r4, r1, #4
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	bfb8      	it	lt
 8007f22:	18e4      	addlt	r4, r4, r3
 8007f24:	f7ff fe36 	bl	8007b94 <__malloc_lock>
 8007f28:	4a1d      	ldr	r2, [pc, #116]	@ (8007fa0 <_free_r+0x90>)
 8007f2a:	6813      	ldr	r3, [r2, #0]
 8007f2c:	b933      	cbnz	r3, 8007f3c <_free_r+0x2c>
 8007f2e:	6063      	str	r3, [r4, #4]
 8007f30:	6014      	str	r4, [r2, #0]
 8007f32:	4628      	mov	r0, r5
 8007f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f38:	f7ff be32 	b.w	8007ba0 <__malloc_unlock>
 8007f3c:	42a3      	cmp	r3, r4
 8007f3e:	d908      	bls.n	8007f52 <_free_r+0x42>
 8007f40:	6820      	ldr	r0, [r4, #0]
 8007f42:	1821      	adds	r1, r4, r0
 8007f44:	428b      	cmp	r3, r1
 8007f46:	bf01      	itttt	eq
 8007f48:	6819      	ldreq	r1, [r3, #0]
 8007f4a:	685b      	ldreq	r3, [r3, #4]
 8007f4c:	1809      	addeq	r1, r1, r0
 8007f4e:	6021      	streq	r1, [r4, #0]
 8007f50:	e7ed      	b.n	8007f2e <_free_r+0x1e>
 8007f52:	461a      	mov	r2, r3
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	b10b      	cbz	r3, 8007f5c <_free_r+0x4c>
 8007f58:	42a3      	cmp	r3, r4
 8007f5a:	d9fa      	bls.n	8007f52 <_free_r+0x42>
 8007f5c:	6811      	ldr	r1, [r2, #0]
 8007f5e:	1850      	adds	r0, r2, r1
 8007f60:	42a0      	cmp	r0, r4
 8007f62:	d10b      	bne.n	8007f7c <_free_r+0x6c>
 8007f64:	6820      	ldr	r0, [r4, #0]
 8007f66:	4401      	add	r1, r0
 8007f68:	1850      	adds	r0, r2, r1
 8007f6a:	4283      	cmp	r3, r0
 8007f6c:	6011      	str	r1, [r2, #0]
 8007f6e:	d1e0      	bne.n	8007f32 <_free_r+0x22>
 8007f70:	6818      	ldr	r0, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	6053      	str	r3, [r2, #4]
 8007f76:	4408      	add	r0, r1
 8007f78:	6010      	str	r0, [r2, #0]
 8007f7a:	e7da      	b.n	8007f32 <_free_r+0x22>
 8007f7c:	d902      	bls.n	8007f84 <_free_r+0x74>
 8007f7e:	230c      	movs	r3, #12
 8007f80:	602b      	str	r3, [r5, #0]
 8007f82:	e7d6      	b.n	8007f32 <_free_r+0x22>
 8007f84:	6820      	ldr	r0, [r4, #0]
 8007f86:	1821      	adds	r1, r4, r0
 8007f88:	428b      	cmp	r3, r1
 8007f8a:	bf04      	itt	eq
 8007f8c:	6819      	ldreq	r1, [r3, #0]
 8007f8e:	685b      	ldreq	r3, [r3, #4]
 8007f90:	6063      	str	r3, [r4, #4]
 8007f92:	bf04      	itt	eq
 8007f94:	1809      	addeq	r1, r1, r0
 8007f96:	6021      	streq	r1, [r4, #0]
 8007f98:	6054      	str	r4, [r2, #4]
 8007f9a:	e7ca      	b.n	8007f32 <_free_r+0x22>
 8007f9c:	bd38      	pop	{r3, r4, r5, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20001c08 	.word	0x20001c08

08007fa4 <_init>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	bf00      	nop
 8007fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007faa:	bc08      	pop	{r3}
 8007fac:	469e      	mov	lr, r3
 8007fae:	4770      	bx	lr

08007fb0 <_fini>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr
