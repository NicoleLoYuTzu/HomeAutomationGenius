
1126104.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a80  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016a8  08006c50  08006c50  00007c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082f8  080082f8  0000a1b8  2**0
                  CONTENTS
  4 .ARM          00000008  080082f8  080082f8  000092f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008300  08008300  0000a1b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008300  08008300  00009300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008308  08008308  00009308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800830c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000078  08008384  0000a078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000118  08008424  0000a118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000fd8  200001b8  080084c4  0000a1b8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20001190  080084c4  0000b190  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000a1b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cd3e  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000042a1  00000000  00000000  00026f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001778  00000000  00000000  0002b1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001218  00000000  00000000  0002c940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e3da  00000000  00000000  0002db58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f7d1  00000000  00000000  0005bf32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001017f6  00000000  00000000  0007b703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017cef9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000697c  00000000  00000000  0017cf3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000054  00000000  00000000  001838b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b8 	.word	0x200001b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c38 	.word	0x08006c38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001bc 	.word	0x200001bc
 800020c:	08006c38 	.word	0x08006c38

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <MX_ETH_Init+0x84>)
 80005a6:	4a20      	ldr	r2, [pc, #128]	@ (8000628 <MX_ETH_Init+0x88>)
 80005a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005aa:	4b20      	ldr	r3, [pc, #128]	@ (800062c <MX_ETH_Init+0x8c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005b0:	4b1e      	ldr	r3, [pc, #120]	@ (800062c <MX_ETH_Init+0x8c>)
 80005b2:	2280      	movs	r2, #128	@ 0x80
 80005b4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005b6:	4b1d      	ldr	r3, [pc, #116]	@ (800062c <MX_ETH_Init+0x8c>)
 80005b8:	22e1      	movs	r2, #225	@ 0xe1
 80005ba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005bc:	4b1b      	ldr	r3, [pc, #108]	@ (800062c <MX_ETH_Init+0x8c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005c2:	4b1a      	ldr	r3, [pc, #104]	@ (800062c <MX_ETH_Init+0x8c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005c8:	4b18      	ldr	r3, [pc, #96]	@ (800062c <MX_ETH_Init+0x8c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005ce:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <MX_ETH_Init+0x84>)
 80005d0:	4a16      	ldr	r2, [pc, #88]	@ (800062c <MX_ETH_Init+0x8c>)
 80005d2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <MX_ETH_Init+0x84>)
 80005d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80005da:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <MX_ETH_Init+0x84>)
 80005de:	4a14      	ldr	r2, [pc, #80]	@ (8000630 <MX_ETH_Init+0x90>)
 80005e0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <MX_ETH_Init+0x84>)
 80005e4:	4a13      	ldr	r2, [pc, #76]	@ (8000634 <MX_ETH_Init+0x94>)
 80005e6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80005e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <MX_ETH_Init+0x84>)
 80005ea:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80005ee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80005f0:	480c      	ldr	r0, [pc, #48]	@ (8000624 <MX_ETH_Init+0x84>)
 80005f2:	f001 f92d 	bl	8001850 <HAL_ETH_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80005fc:	f000 fac2 	bl	8000b84 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000600:	2238      	movs	r2, #56	@ 0x38
 8000602:	2100      	movs	r1, #0
 8000604:	480c      	ldr	r0, [pc, #48]	@ (8000638 <MX_ETH_Init+0x98>)
 8000606:	f005 fcbd 	bl	8005f84 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800060a:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <MX_ETH_Init+0x98>)
 800060c:	2221      	movs	r2, #33	@ 0x21
 800060e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <MX_ETH_Init+0x98>)
 8000612:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000616:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000618:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <MX_ETH_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000020c 	.word	0x2000020c
 8000628:	40028000 	.word	0x40028000
 800062c:	200002bc 	.word	0x200002bc
 8000630:	20000118 	.word	0x20000118
 8000634:	20000078 	.word	0x20000078
 8000638:	200001d4 	.word	0x200001d4

0800063c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08e      	sub	sp, #56	@ 0x38
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a4e      	ldr	r2, [pc, #312]	@ (8000794 <HAL_ETH_MspInit+0x158>)
 800065a:	4293      	cmp	r3, r2
 800065c:	f040 8096 	bne.w	800078c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000660:	4b4d      	ldr	r3, [pc, #308]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000664:	4a4c      	ldr	r2, [pc, #304]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 8000666:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800066a:	6313      	str	r3, [r2, #48]	@ 0x30
 800066c:	4b4a      	ldr	r3, [pc, #296]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000674:	623b      	str	r3, [r7, #32]
 8000676:	6a3b      	ldr	r3, [r7, #32]
 8000678:	4b47      	ldr	r3, [pc, #284]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067c:	4a46      	ldr	r2, [pc, #280]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 800067e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000682:	6313      	str	r3, [r2, #48]	@ 0x30
 8000684:	4b44      	ldr	r3, [pc, #272]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000688:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800068c:	61fb      	str	r3, [r7, #28]
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	4b41      	ldr	r3, [pc, #260]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000694:	4a40      	ldr	r2, [pc, #256]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 8000696:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800069a:	6313      	str	r3, [r2, #48]	@ 0x30
 800069c:	4b3e      	ldr	r3, [pc, #248]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a8:	4b3b      	ldr	r3, [pc, #236]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ac:	4a3a      	ldr	r2, [pc, #232]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b4:	4b38      	ldr	r3, [pc, #224]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c0:	4b35      	ldr	r3, [pc, #212]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c4:	4a34      	ldr	r2, [pc, #208]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80006cc:	4b32      	ldr	r3, [pc, #200]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006dc:	4a2e      	ldr	r2, [pc, #184]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e8:	f003 0302 	and.w	r3, r3, #2
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f0:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f4:	4a28      	ldr	r2, [pc, #160]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fc:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <HAL_ETH_MspInit+0x15c>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000708:	2332      	movs	r3, #50	@ 0x32
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000718:	230b      	movs	r3, #11
 800071a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000720:	4619      	mov	r1, r3
 8000722:	481e      	ldr	r0, [pc, #120]	@ (800079c <HAL_ETH_MspInit+0x160>)
 8000724:	f001 fbba 	bl	8001e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000728:	2386      	movs	r3, #134	@ 0x86
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000738:	230b      	movs	r3, #11
 800073a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000740:	4619      	mov	r1, r3
 8000742:	4817      	ldr	r0, [pc, #92]	@ (80007a0 <HAL_ETH_MspInit+0x164>)
 8000744:	f001 fbaa 	bl	8001e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000748:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	2302      	movs	r3, #2
 8000750:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000756:	2303      	movs	r3, #3
 8000758:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800075a:	230b      	movs	r3, #11
 800075c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000762:	4619      	mov	r1, r3
 8000764:	480f      	ldr	r0, [pc, #60]	@ (80007a4 <HAL_ETH_MspInit+0x168>)
 8000766:	f001 fb99 	bl	8001e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800076a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800077c:	230b      	movs	r3, #11
 800077e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000784:	4619      	mov	r1, r3
 8000786:	4808      	ldr	r0, [pc, #32]	@ (80007a8 <HAL_ETH_MspInit+0x16c>)
 8000788:	f001 fb88 	bl	8001e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800078c:	bf00      	nop
 800078e:	3738      	adds	r7, #56	@ 0x38
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40028000 	.word	0x40028000
 8000798:	40023800 	.word	0x40023800
 800079c:	40020800 	.word	0x40020800
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40021800 	.word	0x40021800

080007ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	@ 0x30
 80007b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b51      	ldr	r3, [pc, #324]	@ (8000908 <MX_GPIO_Init+0x15c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a50      	ldr	r2, [pc, #320]	@ (8000908 <MX_GPIO_Init+0x15c>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b4e      	ldr	r3, [pc, #312]	@ (8000908 <MX_GPIO_Init+0x15c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	4b4b      	ldr	r3, [pc, #300]	@ (8000908 <MX_GPIO_Init+0x15c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a4a      	ldr	r2, [pc, #296]	@ (8000908 <MX_GPIO_Init+0x15c>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b48      	ldr	r3, [pc, #288]	@ (8000908 <MX_GPIO_Init+0x15c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b45      	ldr	r3, [pc, #276]	@ (8000908 <MX_GPIO_Init+0x15c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a44      	ldr	r2, [pc, #272]	@ (8000908 <MX_GPIO_Init+0x15c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b42      	ldr	r3, [pc, #264]	@ (8000908 <MX_GPIO_Init+0x15c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b3f      	ldr	r3, [pc, #252]	@ (8000908 <MX_GPIO_Init+0x15c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a3e      	ldr	r2, [pc, #248]	@ (8000908 <MX_GPIO_Init+0x15c>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b3c      	ldr	r3, [pc, #240]	@ (8000908 <MX_GPIO_Init+0x15c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000822:	4b39      	ldr	r3, [pc, #228]	@ (8000908 <MX_GPIO_Init+0x15c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a38      	ldr	r2, [pc, #224]	@ (8000908 <MX_GPIO_Init+0x15c>)
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b36      	ldr	r3, [pc, #216]	@ (8000908 <MX_GPIO_Init+0x15c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0308 	and.w	r3, r3, #8
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083a:	4b33      	ldr	r3, [pc, #204]	@ (8000908 <MX_GPIO_Init+0x15c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a32      	ldr	r2, [pc, #200]	@ (8000908 <MX_GPIO_Init+0x15c>)
 8000840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b30      	ldr	r3, [pc, #192]	@ (8000908 <MX_GPIO_Init+0x15c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000858:	482c      	ldr	r0, [pc, #176]	@ (800090c <MX_GPIO_Init+0x160>)
 800085a:	f001 fce3 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2140      	movs	r1, #64	@ 0x40
 8000862:	482b      	ldr	r0, [pc, #172]	@ (8000910 <MX_GPIO_Init+0x164>)
 8000864:	f001 fcde 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000868:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4825      	ldr	r0, [pc, #148]	@ (8000914 <MX_GPIO_Init+0x168>)
 8000880:	f001 fb0c 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000884:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	481b      	ldr	r0, [pc, #108]	@ (800090c <MX_GPIO_Init+0x160>)
 800089e:	f001 fafd 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRDA_Pin;
 80008a2:	2304      	movs	r3, #4
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008a6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(IRDA_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4816      	ldr	r0, [pc, #88]	@ (8000910 <MX_GPIO_Init+0x164>)
 80008b8:	f001 faf0 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008bc:	2340      	movs	r3, #64	@ 0x40
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	480f      	ldr	r0, [pc, #60]	@ (8000910 <MX_GPIO_Init+0x164>)
 80008d4:	f001 fae2 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d8:	2380      	movs	r3, #128	@ 0x80
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4809      	ldr	r0, [pc, #36]	@ (8000910 <MX_GPIO_Init+0x164>)
 80008ec:	f001 fad6 	bl	8001e9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	2008      	movs	r0, #8
 80008f6:	f000 ff74 	bl	80017e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80008fa:	2008      	movs	r0, #8
 80008fc:	f000 ff8d 	bl	800181a <HAL_NVIC_EnableIRQ>

}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	@ 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40020400 	.word	0x40020400
 8000910:	40021800 	.word	0x40021800
 8000914:	40020800 	.word	0x40020800

08000918 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800091c:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <MX_I2C1_Init+0x74>)
 800091e:	4a1c      	ldr	r2, [pc, #112]	@ (8000990 <MX_I2C1_Init+0x78>)
 8000920:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000922:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <MX_I2C1_Init+0x74>)
 8000924:	4a1b      	ldr	r2, [pc, #108]	@ (8000994 <MX_I2C1_Init+0x7c>)
 8000926:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000928:	4b18      	ldr	r3, [pc, #96]	@ (800098c <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092e:	4b17      	ldr	r3, [pc, #92]	@ (800098c <MX_I2C1_Init+0x74>)
 8000930:	2201      	movs	r2, #1
 8000932:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800093a:	4b14      	ldr	r3, [pc, #80]	@ (800098c <MX_I2C1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000946:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_I2C1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000952:	480e      	ldr	r0, [pc, #56]	@ (800098c <MX_I2C1_Init+0x74>)
 8000954:	f001 fcb2 	bl	80022bc <HAL_I2C_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800095e:	f000 f911 	bl	8000b84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000962:	2100      	movs	r1, #0
 8000964:	4809      	ldr	r0, [pc, #36]	@ (800098c <MX_I2C1_Init+0x74>)
 8000966:	f002 f893 	bl	8002a90 <HAL_I2CEx_ConfigAnalogFilter>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000970:	f000 f908 	bl	8000b84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000974:	2100      	movs	r1, #0
 8000976:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_I2C1_Init+0x74>)
 8000978:	f002 f8d5 	bl	8002b26 <HAL_I2CEx_ConfigDigitalFilter>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000982:	f000 f8ff 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200002c4 	.word	0x200002c4
 8000990:	40005400 	.word	0x40005400
 8000994:	00808cd2 	.word	0x00808cd2

08000998 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b0aa      	sub	sp, #168	@ 0xa8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	2284      	movs	r2, #132	@ 0x84
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f005 fae3 	bl	8005f84 <memset>
  if(i2cHandle->Instance==I2C1)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a22      	ldr	r2, [pc, #136]	@ (8000a4c <HAL_I2C_MspInit+0xb4>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d13c      	bne.n	8000a42 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 ff14 	bl	8003804 <HAL_RCCEx_PeriphCLKConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009e2:	f000 f8cf 	bl	8000b84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a50 <HAL_I2C_MspInit+0xb8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a19      	ldr	r2, [pc, #100]	@ (8000a50 <HAL_I2C_MspInit+0xb8>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <HAL_I2C_MspInit+0xb8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80009fe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a06:	2312      	movs	r3, #18
 8000a08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a22:	4619      	mov	r1, r3
 8000a24:	480b      	ldr	r0, [pc, #44]	@ (8000a54 <HAL_I2C_MspInit+0xbc>)
 8000a26:	f001 fa39 	bl	8001e9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <HAL_I2C_MspInit+0xb8>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <HAL_I2C_MspInit+0xb8>)
 8000a30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_I2C_MspInit+0xb8>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a42:	bf00      	nop
 8000a44:	37a8      	adds	r7, #168	@ 0xa8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020400 	.word	0x40020400

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5e:	f000 fd63 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a62:	f000 f827 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a66:	f7ff fea1 	bl	80007ac <MX_GPIO_Init>
  MX_ETH_Init();
 8000a6a:	f7ff fd99 	bl	80005a0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a6e:	f000 fa05 	bl	8000e7c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a72:	f000 fa93 	bl	8000f9c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000a76:	f000 f9a5 	bl	8000dc4 <MX_TIM6_Init>
  MX_I2C1_Init();
 8000a7a:	f7ff ff4d 	bl	8000918 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Call usermain function
  usermain();
 8000a7e:	f000 fc35 	bl	80012ec <usermain>

  GPIO_PinState ldState = GPIO_PIN_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	71fb      	strb	r3, [r7, #7]

  while (1)
  {
	 HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, ldState);
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a8e:	4808      	ldr	r0, [pc, #32]	@ (8000ab0 <main+0x58>)
 8000a90:	f001 fbc8 	bl	8002224 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_Delay(500L);
 8000a94:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a98:	f000 fda4 	bl	80015e4 <HAL_Delay>
	 ldState = !ldState;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2301      	moveq	r3, #1
 8000aa4:	2300      	movne	r3, #0
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	71fb      	strb	r3, [r7, #7]
	 HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, ldState);
 8000aaa:	bf00      	nop
 8000aac:	e7eb      	b.n	8000a86 <main+0x2e>
 8000aae:	bf00      	nop
 8000ab0:	40020400 	.word	0x40020400

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	@ 0x50
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	2230      	movs	r2, #48	@ 0x30
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f005 fa5e 	bl	8005f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ad8:	f002 f9ba 	bl	8002e50 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000adc:	4b27      	ldr	r3, [pc, #156]	@ (8000b7c <SystemClock_Config+0xc8>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae0:	4a26      	ldr	r2, [pc, #152]	@ (8000b7c <SystemClock_Config+0xc8>)
 8000ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae8:	4b24      	ldr	r3, [pc, #144]	@ (8000b7c <SystemClock_Config+0xc8>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000af4:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <SystemClock_Config+0xcc>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000afc:	4a20      	ldr	r2, [pc, #128]	@ (8000b80 <SystemClock_Config+0xcc>)
 8000afe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <SystemClock_Config+0xcc>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b14:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b24:	2304      	movs	r3, #4
 8000b26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b28:	2348      	movs	r3, #72	@ 0x48
 8000b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b30:	2303      	movs	r3, #3
 8000b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0320 	add.w	r3, r7, #32
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f002 f999 	bl	8002e70 <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b44:	f000 f81e 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	230f      	movs	r3, #15
 8000b4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	2102      	movs	r1, #2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f002 fc27 	bl	80033b8 <HAL_RCC_ClockConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b70:	f000 f808 	bl	8000b84 <Error_Handler>
  }
}
 8000b74:	bf00      	nop
 8000b76:	3750      	adds	r7, #80	@ 0x50
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40007000 	.word	0x40007000

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <Error_Handler+0x8>

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	4a08      	ldr	r2, [pc, #32]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <NMI_Handler+0x4>

08000be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <MemManage_Handler+0x4>

08000bf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <UsageFault_Handler+0x4>

08000c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2e:	f000 fcb9 	bl	80015a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRDA_Pin);
 8000c3a:	2004      	movs	r0, #4
 8000c3c:	f001 fb26 	bl	800228c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <TIM6_DAC_IRQHandler+0x10>)
 8000c4a:	f003 fa9b 	bl	8004184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000031c 	.word	0x2000031c

08000c58 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	e00a      	b.n	8000c80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c6a:	f000 fb1b 	bl	80012a4 <__io_getchar>
 8000c6e:	4601      	mov	r1, r0
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	1c5a      	adds	r2, r3, #1
 8000c74:	60ba      	str	r2, [r7, #8]
 8000c76:	b2ca      	uxtb	r2, r1
 8000c78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dbf0      	blt.n	8000c6a <_read+0x12>
  }

  return len;
 8000c88:	687b      	ldr	r3, [r7, #4]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	e009      	b.n	8000cb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60ba      	str	r2, [r7, #8]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 fbeb 	bl	8001488 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbf1      	blt.n	8000ca4 <_write+0x12>
  }
  return len;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_close>:

int _close(int file)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cf2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_isatty>:

int _isatty(int file)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	@ (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	@ (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d64:	f005 f916 	bl	8005f94 <__errno>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d72:	e009      	b.n	8000d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a05      	ldr	r2, [pc, #20]	@ (8000d98 <_sbrk+0x64>)
 8000d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20050000 	.word	0x20050000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	20000318 	.word	0x20000318
 8000d9c:	20001190 	.word	0x20001190

08000da0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	@ (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000dd4:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <MX_TIM6_Init+0x64>)
 8000dd6:	4a15      	ldr	r2, [pc, #84]	@ (8000e2c <MX_TIM6_Init+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8000dda:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <MX_TIM6_Init+0x64>)
 8000ddc:	2247      	movs	r2, #71	@ 0x47
 8000dde:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <MX_TIM6_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <MX_TIM6_Init+0x64>)
 8000de8:	2209      	movs	r2, #9
 8000dea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dec:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <MX_TIM6_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000df2:	480d      	ldr	r0, [pc, #52]	@ (8000e28 <MX_TIM6_Init+0x64>)
 8000df4:	f003 f8f6 	bl	8003fe4 <HAL_TIM_Base_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000dfe:	f7ff fec1 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4806      	ldr	r0, [pc, #24]	@ (8000e28 <MX_TIM6_Init+0x64>)
 8000e10:	f003 fba0 	bl	8004554 <HAL_TIMEx_MasterConfigSynchronization>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000e1a:	f7ff feb3 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2000031c 	.word	0x2000031c
 8000e2c:	40001000 	.word	0x40001000

08000e30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <HAL_TIM_Base_MspInit+0x44>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d113      	bne.n	8000e6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e42:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <HAL_TIM_Base_MspInit+0x48>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	4a0c      	ldr	r2, [pc, #48]	@ (8000e78 <HAL_TIM_Base_MspInit+0x48>)
 8000e48:	f043 0310 	orr.w	r3, r3, #16
 8000e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <HAL_TIM_Base_MspInit+0x48>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2036      	movs	r0, #54	@ 0x36
 8000e60:	f000 fcbf 	bl	80017e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e64:	2036      	movs	r0, #54	@ 0x36
 8000e66:	f000 fcd8 	bl	800181a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40001000 	.word	0x40001000
 8000e78:	40023800 	.word	0x40023800

08000e7c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <MX_USART3_UART_Init+0x58>)
 8000e82:	4a15      	ldr	r2, [pc, #84]	@ (8000ed8 <MX_USART3_UART_Init+0x5c>)
 8000e84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e86:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <MX_USART3_UART_Init+0x58>)
 8000e88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <MX_USART3_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <MX_USART3_UART_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <MX_USART3_UART_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <MX_USART3_UART_Init+0x58>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <MX_USART3_UART_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <MX_USART3_UART_Init+0x58>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <MX_USART3_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <MX_USART3_UART_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <MX_USART3_UART_Init+0x58>)
 8000ec0:	f003 fbf4 	bl	80046ac <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000eca:	f7ff fe5b 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000368 	.word	0x20000368
 8000ed8:	40004800 	.word	0x40004800

08000edc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0aa      	sub	sp, #168	@ 0xa8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	2284      	movs	r2, #132	@ 0x84
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f005 f841 	bl	8005f84 <memset>
  if(uartHandle->Instance==USART3)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a22      	ldr	r2, [pc, #136]	@ (8000f90 <HAL_UART_MspInit+0xb4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d13c      	bne.n	8000f86 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f10:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f16:	f107 0310 	add.w	r3, r7, #16
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 fc72 	bl	8003804 <HAL_RCCEx_PeriphCLKConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f26:	f7ff fe2d 	bl	8000b84 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <HAL_UART_MspInit+0xb8>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	4a19      	ldr	r2, [pc, #100]	@ (8000f94 <HAL_UART_MspInit+0xb8>)
 8000f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f36:	4b17      	ldr	r3, [pc, #92]	@ (8000f94 <HAL_UART_MspInit+0xb8>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f42:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <HAL_UART_MspInit+0xb8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a13      	ldr	r2, [pc, #76]	@ (8000f94 <HAL_UART_MspInit+0xb8>)
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <HAL_UART_MspInit+0xb8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f74:	2307      	movs	r3, #7
 8000f76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <HAL_UART_MspInit+0xbc>)
 8000f82:	f000 ff8b 	bl	8001e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f86:	bf00      	nop
 8000f88:	37a8      	adds	r7, #168	@ 0xa8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40004800 	.word	0x40004800
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020c00 	.word	0x40020c00

08000f9c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fa6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000faa:	2206      	movs	r2, #6
 8000fac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe0:	f001 fded 	bl	8002bbe <HAL_PCD_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fea:	f7ff fdcb 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200003f0 	.word	0x200003f0

08000ff8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0ac      	sub	sp, #176	@ 0xb0
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001010:	f107 0318 	add.w	r3, r7, #24
 8001014:	2284      	movs	r2, #132	@ 0x84
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f004 ffb3 	bl	8005f84 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001026:	d159      	bne.n	80010dc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001028:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800102c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001034:	f107 0318 	add.w	r3, r7, #24
 8001038:	4618      	mov	r0, r3
 800103a:	f002 fbe3 	bl	8003804 <HAL_RCCEx_PeriphCLKConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001044:	f7ff fd9e 	bl	8000b84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	4b26      	ldr	r3, [pc, #152]	@ (80010e4 <HAL_PCD_MspInit+0xec>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104c:	4a25      	ldr	r2, [pc, #148]	@ (80010e4 <HAL_PCD_MspInit+0xec>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6313      	str	r3, [r2, #48]	@ 0x30
 8001054:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <HAL_PCD_MspInit+0xec>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001060:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001064:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800107a:	230a      	movs	r3, #10
 800107c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001084:	4619      	mov	r1, r3
 8001086:	4818      	ldr	r0, [pc, #96]	@ (80010e8 <HAL_PCD_MspInit+0xf0>)
 8001088:	f000 ff08 	bl	8001e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800108c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001090:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010a4:	4619      	mov	r1, r3
 80010a6:	4810      	ldr	r0, [pc, #64]	@ (80010e8 <HAL_PCD_MspInit+0xf0>)
 80010a8:	f000 fef8 	bl	8001e9c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010ac:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <HAL_PCD_MspInit+0xec>)
 80010ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b0:	4a0c      	ldr	r2, [pc, #48]	@ (80010e4 <HAL_PCD_MspInit+0xec>)
 80010b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010b6:	6353      	str	r3, [r2, #52]	@ 0x34
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_PCD_MspInit+0xec>)
 80010ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <HAL_PCD_MspInit+0xec>)
 80010c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c8:	4a06      	ldr	r2, [pc, #24]	@ (80010e4 <HAL_PCD_MspInit+0xec>)
 80010ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d0:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <HAL_PCD_MspInit+0xec>)
 80010d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80010dc:	bf00      	nop
 80010de:	37b0      	adds	r7, #176	@ 0xb0
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000

080010ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001124 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f0:	480d      	ldr	r0, [pc, #52]	@ (8001128 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010f2:	490e      	ldr	r1, [pc, #56]	@ (800112c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001130 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f8:	e002      	b.n	8001100 <LoopCopyDataInit>

080010fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fe:	3304      	adds	r3, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001104:	d3f9      	bcc.n	80010fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001106:	4a0b      	ldr	r2, [pc, #44]	@ (8001134 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001108:	4c0b      	ldr	r4, [pc, #44]	@ (8001138 <LoopFillZerobss+0x26>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800110c:	e001      	b.n	8001112 <LoopFillZerobss>

0800110e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001110:	3204      	adds	r2, #4

08001112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001114:	d3fb      	bcc.n	800110e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001116:	f7ff fe43 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111a:	f004 ff41 	bl	8005fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111e:	f7ff fc9b 	bl	8000a58 <main>
  bx  lr    
 8001122:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001124:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001130:	0800830c 	.word	0x0800830c
  ldr r2, =_sbss
 8001134:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8001138:	20001190 	.word	0x20001190

0800113c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC_IRQHandler>

0800113e <_ZN8IrTimingC1Ev>:
uint32_t sys_tick_10us = 0;

/**	\brief Constructor.
 *
 */
IrTiming::IrTiming()
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
{
	m_head = 0;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
	m_tail = 0;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
	m_size = 0;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
}
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <_ZN8IrTiming3putE8IR_STATE>:
/**	\brief	Save state and time in queue.
 *
 *	called by ISR only.
 */
void IrTiming::put(IR_STATE state)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
	if (m_size >= IR_TIME_NO)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2b63      	cmp	r3, #99	@ 0x63
 800117a:	dd01      	ble.n	8001180 <_ZN8IrTiming3putE8IR_STATE+0x18>
		Error_Handler();
 800117c:	f7ff fd02 	bl	8000b84 <Error_Handler>

	m_timing[m_tail].time = sys_tick_10us;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4a14      	ldr	r2, [pc, #80]	@ (80011d8 <_ZN8IrTiming3putE8IR_STATE+0x70>)
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	3301      	adds	r3, #1
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	440b      	add	r3, r1
 8001190:	605a      	str	r2, [r3, #4]
	m_timing[m_tail].state = state;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	3301      	adds	r3, #1
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	78fa      	ldrb	r2, [r7, #3]
 80011a0:	721a      	strb	r2, [r3, #8]

//	__disable_irq();
	m_size++;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	609a      	str	r2, [r3, #8]
	if (++m_tail >= IR_TIME_NO)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b63      	cmp	r3, #99	@ 0x63
 80011bc:	bfcc      	ite	gt
 80011be:	2301      	movgt	r3, #1
 80011c0:	2300      	movle	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <_ZN8IrTiming3putE8IR_STATE+0x66>
		m_tail = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
//	__enable_irq();
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200008f8 	.word	0x200008f8

080011dc <_ZN8IrTiming3getEv>:

/**	\brief	Get state and time from queue.
 *
 */
IR_EVENT IrTiming::get()
{
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
	const IR_EVENT nul = {0, SPACE};
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	2300      	movs	r3, #0
 80011ec:	753b      	strb	r3, [r7, #20]

	if (m_size == 0)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d108      	bne.n	8001208 <_ZN8IrTiming3getEv+0x2c>
		return nul;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	461a      	mov	r2, r3
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001202:	e882 0003 	stmia.w	r2, {r0, r1}
 8001206:	e02e      	b.n	8001266 <_ZN8IrTiming3getEv+0x8a>

	IR_EVENT time = m_timing[m_head];
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4413      	add	r3, r2
 8001214:	f107 0208 	add.w	r2, r7, #8
 8001218:	3304      	adds	r3, #4
 800121a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800121e:	e882 0003 	stmia.w	r2, {r0, r1}
  __ASM volatile ("cpsid i" : : : "memory");
 8001222:	b672      	cpsid	i
}
 8001224:	bf00      	nop

	__disable_irq();
	m_size--;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	1e5a      	subs	r2, r3, #1
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	609a      	str	r2, [r3, #8]
	if (++m_head >= IR_TIME_NO)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b63      	cmp	r3, #99	@ 0x63
 8001240:	bfcc      	ite	gt
 8001242:	2301      	movgt	r3, #1
 8001244:	2300      	movle	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d002      	beq.n	8001252 <_ZN8IrTiming3getEv+0x76>
		m_head = 0;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001252:	b662      	cpsie	i
}
 8001254:	bf00      	nop
	__enable_irq();

	return time;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	461a      	mov	r2, r3
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001262:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	371c      	adds	r7, #28
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <HAL_TIM_PeriodElapsedCallback>:

/**	\brief	Timer period elapsed callback function.
 *
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	if (htim == &htim6)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a07      	ldr	r2, [pc, #28]	@ (800129c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d104      	bne.n	800128e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		sys_tick_10us++;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	4a05      	ldr	r2, [pc, #20]	@ (80012a0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800128c:	6013      	str	r3, [r2, #0]
	}
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	2000031c 	.word	0x2000031c
 80012a0:	200008f8 	.word	0x200008f8

080012a4 <__io_getchar>:
//    return ch;
//}

// Placeholder for __io_getchar function if USE_READ_WRITE is not defined
int __io_getchar(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
    uint8_t ch;
    HAL_UART_Receive(g_huart, &ch, 1, HAL_MAX_DELAY);
 80012aa:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <__io_getchar+0x20>)
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	1df9      	adds	r1, r7, #7
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012b4:	2201      	movs	r2, #1
 80012b6:	f003 faca 	bl	800484e <HAL_UART_Receive>
    return ch;
 80012ba:	79fb      	ldrb	r3, [r7, #7]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200008fc 	.word	0x200008fc

080012c8 <_ZN8IrTiming8hasEventEv>:
public:
	IrTiming();

	void	put(IR_STATE state);
	IR_EVENT	get();
	bool	hasEvent() {return m_size > 0;}
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bfcc      	ite	gt
 80012d8:	2301      	movgt	r3, #1
 80012da:	2300      	movle	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <usermain>:

/**	usermain() in c++.
 *
 */
extern "C" void usermain()
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
    // start timer with 10us interrupt interval.
    HAL_TIM_Base_Start_IT(&htim6);
 80012f2:	4854      	ldr	r0, [pc, #336]	@ (8001444 <usermain+0x158>)
 80012f4:	f002 fece 	bl	8004094 <HAL_TIM_Base_Start_IT>

    // initial next wait state
    waitState = (HAL_GPIO_ReadPin(IRDA_GPIO_Port, IRDA_Pin) == GPIO_PIN_SET) ? MARK : SPACE;
 80012f8:	2104      	movs	r1, #4
 80012fa:	4853      	ldr	r0, [pc, #332]	@ (8001448 <usermain+0x15c>)
 80012fc:	f000 ff7a 	bl	80021f4 <HAL_GPIO_ReadPin>
 8001300:	4603      	mov	r3, r0
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <usermain+0x1e>
 8001306:	2201      	movs	r2, #1
 8001308:	e000      	b.n	800130c <usermain+0x20>
 800130a:	2200      	movs	r2, #0
 800130c:	4b4f      	ldr	r3, [pc, #316]	@ (800144c <usermain+0x160>)
 800130e:	701a      	strb	r2, [r3, #0]


    //4/27add 從example 範例的main加進來的
    // Init lcd using one of the stm32HAL i2c typedefs
      if (ssd1306_Init(&hi2c1) != 0) {
 8001310:	484f      	ldr	r0, [pc, #316]	@ (8001450 <usermain+0x164>)
 8001312:	f004 fa71 	bl	80057f8 <ssd1306_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	bf14      	ite	ne
 800131c:	2301      	movne	r3, #1
 800131e:	2300      	moveq	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <usermain+0x3e>
        Error_Handler();
 8001326:	f7ff fc2d 	bl	8000b84 <Error_Handler>
      }
      HAL_Delay(1000);
 800132a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800132e:	f000 f959 	bl	80015e4 <HAL_Delay>

      ssd1306_Fill(Black);
 8001332:	2000      	movs	r0, #0
 8001334:	f004 fb80 	bl	8005a38 <ssd1306_Fill>
      ssd1306_UpdateScreen(&hi2c1);
 8001338:	4845      	ldr	r0, [pc, #276]	@ (8001450 <usermain+0x164>)
 800133a:	f004 fba1 	bl	8005a80 <ssd1306_UpdateScreen>

      HAL_Delay(1000);
 800133e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001342:	f000 f94f 	bl	80015e4 <HAL_Delay>

//      // Write data to local screenbuffer
//      ssd1306_SetCursor(0, 0);
      ssd1306_WriteString("Nicole in", Font_11x18, White);
 8001346:	4a43      	ldr	r2, [pc, #268]	@ (8001454 <usermain+0x168>)
 8001348:	2301      	movs	r3, #1
 800134a:	ca06      	ldmia	r2, {r1, r2}
 800134c:	4842      	ldr	r0, [pc, #264]	@ (8001458 <usermain+0x16c>)
 800134e:	f004 fca9 	bl	8005ca4 <ssd1306_WriteString>
//
//      ssd1306_SetCursor(0, 36);
//      ssd1306_WriteString("Embedded system class", Font_11x18, White);
      // Write data to local screenbuffer
      ssd1306_SetCursor(0, 16);
 8001352:	2110      	movs	r1, #16
 8001354:	2000      	movs	r0, #0
 8001356:	f004 fccb 	bl	8005cf0 <ssd1306_SetCursor>
      ssd1306_WriteString("Embedded", Font_7x10, White);
 800135a:	4a40      	ldr	r2, [pc, #256]	@ (800145c <usermain+0x170>)
 800135c:	2301      	movs	r3, #1
 800135e:	ca06      	ldmia	r2, {r1, r2}
 8001360:	483f      	ldr	r0, [pc, #252]	@ (8001460 <usermain+0x174>)
 8001362:	f004 fc9f 	bl	8005ca4 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 26);
 8001366:	211a      	movs	r1, #26
 8001368:	2000      	movs	r0, #0
 800136a:	f004 fcc1 	bl	8005cf0 <ssd1306_SetCursor>
      ssd1306_WriteString("system", Font_7x10, White);
 800136e:	4a3b      	ldr	r2, [pc, #236]	@ (800145c <usermain+0x170>)
 8001370:	2301      	movs	r3, #1
 8001372:	ca06      	ldmia	r2, {r1, r2}
 8001374:	483b      	ldr	r0, [pc, #236]	@ (8001464 <usermain+0x178>)
 8001376:	f004 fc95 	bl	8005ca4 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 36);
 800137a:	2124      	movs	r1, #36	@ 0x24
 800137c:	2000      	movs	r0, #0
 800137e:	f004 fcb7 	bl	8005cf0 <ssd1306_SetCursor>
      ssd1306_WriteString("class", Font_7x10, White);
 8001382:	4a36      	ldr	r2, [pc, #216]	@ (800145c <usermain+0x170>)
 8001384:	2301      	movs	r3, #1
 8001386:	ca06      	ldmia	r2, {r1, r2}
 8001388:	4837      	ldr	r0, [pc, #220]	@ (8001468 <usermain+0x17c>)
 800138a:	f004 fc8b 	bl	8005ca4 <ssd1306_WriteString>


      // Draw rectangle on screen
      for (uint8_t i=0; i<28; i++) {
 800138e:	2300      	movs	r3, #0
 8001390:	75fb      	strb	r3, [r7, #23]
 8001392:	e013      	b.n	80013bc <usermain+0xd0>
          for (uint8_t j=0; j<64; j++) {
 8001394:	2300      	movs	r3, #0
 8001396:	75bb      	strb	r3, [r7, #22]
 8001398:	e00a      	b.n	80013b0 <usermain+0xc4>
              ssd1306_DrawPixel(100+i, 0+j, White);
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	3364      	adds	r3, #100	@ 0x64
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	7db9      	ldrb	r1, [r7, #22]
 80013a2:	2201      	movs	r2, #1
 80013a4:	4618      	mov	r0, r3
 80013a6:	f004 fb9d 	bl	8005ae4 <ssd1306_DrawPixel>
          for (uint8_t j=0; j<64; j++) {
 80013aa:	7dbb      	ldrb	r3, [r7, #22]
 80013ac:	3301      	adds	r3, #1
 80013ae:	75bb      	strb	r3, [r7, #22]
 80013b0:	7dbb      	ldrb	r3, [r7, #22]
 80013b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80013b4:	d9f1      	bls.n	800139a <usermain+0xae>
      for (uint8_t i=0; i<28; i++) {
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
 80013b8:	3301      	adds	r3, #1
 80013ba:	75fb      	strb	r3, [r7, #23]
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	2b1b      	cmp	r3, #27
 80013c0:	d9e8      	bls.n	8001394 <usermain+0xa8>
          }
      }

      // Copy all data from local screenbuffer to the screen
      ssd1306_UpdateScreen(&hi2c1);
 80013c2:	4823      	ldr	r0, [pc, #140]	@ (8001450 <usermain+0x164>)
 80013c4:	f004 fb5c 	bl	8005a80 <ssd1306_UpdateScreen>
        // Flashing LD1 in 1 Hz
#if 0
        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
        HAL_Delay(500L);
#else
        uint32_t sysTick = HAL_GetTick();
 80013c8:	f000 f900 	bl	80015cc <HAL_GetTick>
 80013cc:	60f8      	str	r0, [r7, #12]
        if ((sysTick - lastLedToggleTime) >= 500L)
 80013ce:	4b27      	ldr	r3, [pc, #156]	@ (800146c <usermain+0x180>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013da:	d306      	bcc.n	80013ea <usermain+0xfe>
        {
            HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80013dc:	2101      	movs	r1, #1
 80013de:	4824      	ldr	r0, [pc, #144]	@ (8001470 <usermain+0x184>)
 80013e0:	f000 ff39 	bl	8002256 <HAL_GPIO_TogglePin>
            lastLedToggleTime = sysTick;
 80013e4:	4a21      	ldr	r2, [pc, #132]	@ (800146c <usermain+0x180>)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6013      	str	r3, [r2, #0]
        }
#endif

        //	process signal from remote controller
        if (irTiming.hasEvent())
 80013ea:	4822      	ldr	r0, [pc, #136]	@ (8001474 <usermain+0x188>)
 80013ec:	f7ff ff6c 	bl	80012c8 <_ZN8IrTiming8hasEventEv>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0e8      	beq.n	80013c8 <usermain+0xdc>
        {
            // toggle LD2
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013f6:	2180      	movs	r1, #128	@ 0x80
 80013f8:	481d      	ldr	r0, [pc, #116]	@ (8001470 <usermain+0x184>)
 80013fa:	f000 ff2c 	bl	8002256 <HAL_GPIO_TogglePin>

            IR_EVENT event = irTiming.get();
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	491c      	ldr	r1, [pc, #112]	@ (8001474 <usermain+0x188>)
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff feea 	bl	80011dc <_ZN8IrTiming3getEv>

            // if pulse width > 10 ms, it may mean a new code
            uint32_t pulseWidth = event.time - preSignalTick;
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <usermain+0x18c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	613b      	str	r3, [r7, #16]
            if (pulseWidth > MAX_STATE_TIME)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001418:	d904      	bls.n	8001424 <usermain+0x138>
            {
                pulseWidth = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
                printf("\r\n");
 800141e:	4817      	ldr	r0, [pc, #92]	@ (800147c <usermain+0x190>)
 8001420:	f004 fda8 	bl	8005f74 <puts>
            // falling edge = end of SPACE state
            // rising edge = end of MARK state
            // a line = 17 bytes, take about 1.62 ms for 115200 bps


            if (event.state == SPACE)
 8001424:	7a3b      	ldrb	r3, [r7, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d104      	bne.n	8001434 <usermain+0x148>
                printf("%3lu (M)\r\n", pulseWidth);
 800142a:	6939      	ldr	r1, [r7, #16]
 800142c:	4814      	ldr	r0, [pc, #80]	@ (8001480 <usermain+0x194>)
 800142e:	f004 fd39 	bl	8005ea4 <iprintf>
 8001432:	e003      	b.n	800143c <usermain+0x150>
            else
                printf("%3lu (S) ", pulseWidth);
 8001434:	6939      	ldr	r1, [r7, #16]
 8001436:	4813      	ldr	r0, [pc, #76]	@ (8001484 <usermain+0x198>)
 8001438:	f004 fd34 	bl	8005ea4 <iprintf>

            preSignalTick = event.time;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <usermain+0x18c>)
 8001440:	6013      	str	r3, [r2, #0]
        }
    }
 8001442:	e7c1      	b.n	80013c8 <usermain+0xdc>
 8001444:	2000031c 	.word	0x2000031c
 8001448:	40021800 	.word	0x40021800
 800144c:	20000904 	.word	0x20000904
 8001450:	200002c4 	.word	0x200002c4
 8001454:	20000014 	.word	0x20000014
 8001458:	08006c50 	.word	0x08006c50
 800145c:	2000000c 	.word	0x2000000c
 8001460:	08006c5c 	.word	0x08006c5c
 8001464:	08006c68 	.word	0x08006c68
 8001468:	08006c70 	.word	0x08006c70
 800146c:	20000900 	.word	0x20000900
 8001470:	40020400 	.word	0x40020400
 8001474:	2000090c 	.word	0x2000090c
 8001478:	20000908 	.word	0x20000908
 800147c:	08006c78 	.word	0x08006c78
 8001480:	08006c7c 	.word	0x08006c7c
 8001484:	08006c88 	.word	0x08006c88

08001488 <__io_putchar>:

/**	UART retarget.
 *
 */
extern "C" int __io_putchar(int ch)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8001490:	1d39      	adds	r1, r7, #4
 8001492:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001496:	2201      	movs	r2, #1
 8001498:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <__io_putchar+0x20>)
 800149a:	f003 f955 	bl	8004748 <HAL_UART_Transmit>
    return 0;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000368 	.word	0x20000368

080014ac <HAL_GPIO_EXTI_Callback>:

/**	\brief	EXTI handler for IR.
 *
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == IRDA_Pin)
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d10e      	bne.n	80014da <HAL_GPIO_EXTI_Callback+0x2e>
    {
        irTiming.put(waitState);
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <HAL_GPIO_EXTI_Callback+0x38>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4809      	ldr	r0, [pc, #36]	@ (80014e8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80014c4:	f7ff fe50 	bl	8001168 <_ZN8IrTiming3putE8IR_STATE>
        waitState = (waitState == SPACE) ? MARK : SPACE;
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_GPIO_EXTI_Callback+0x38>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_GPIO_EXTI_Callback+0x28>
 80014d0:	2201      	movs	r2, #1
 80014d2:	e000      	b.n	80014d6 <HAL_GPIO_EXTI_Callback+0x2a>
 80014d4:	2200      	movs	r2, #0
 80014d6:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_GPIO_EXTI_Callback+0x38>)
 80014d8:	701a      	strb	r2, [r3, #0]
//        irWaveform[irWaveformIndex++] = timestamp; // 將時間戳添加到波形陣列中
//
//        // 將時間戳以 log 的形式印出
//        printf("Timestamp: %lu\r\n", timestamp);
    }
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000904 	.word	0x20000904
 80014e8:	2000090c 	.word	0x2000090c

080014ec <_Z41__static_initialization_and_destruction_0ii>:
        }
    }
#endif

    printf("Done\r\n");
}
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d107      	bne.n	800150c <_Z41__static_initialization_and_destruction_0ii+0x20>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001502:	4293      	cmp	r3, r2
 8001504:	d102      	bne.n	800150c <_Z41__static_initialization_and_destruction_0ii+0x20>
IrTiming irTiming;
 8001506:	4803      	ldr	r0, [pc, #12]	@ (8001514 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001508:	f7ff fe19 	bl	800113e <_ZN8IrTimingC1Ev>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	2000090c 	.word	0x2000090c

08001518 <_GLOBAL__sub_I_lastLedToggleTime>:
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
 800151c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff ffe3 	bl	80014ec <_Z41__static_initialization_and_destruction_0ii>
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152c:	2003      	movs	r0, #3
 800152e:	f000 f94d 	bl	80017cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001532:	2000      	movs	r0, #0
 8001534:	f000 f806 	bl	8001544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001538:	f7ff fb2a 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <HAL_InitTick+0x54>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <HAL_InitTick+0x58>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800155a:	fbb3 f3f1 	udiv	r3, r3, r1
 800155e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f967 	bl	8001836 <HAL_SYSTICK_Config>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e00e      	b.n	8001590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d80a      	bhi.n	800158e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001580:	f000 f92f 	bl	80017e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001584:	4a06      	ldr	r2, [pc, #24]	@ (80015a0 <HAL_InitTick+0x5c>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	e000      	b.n	8001590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000000 	.word	0x20000000
 800159c:	20000008 	.word	0x20000008
 80015a0:	20000004 	.word	0x20000004

080015a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_IncTick+0x20>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_IncTick+0x24>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <HAL_IncTick+0x24>)
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000008 	.word	0x20000008
 80015c8:	20000c38 	.word	0x20000c38

080015cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return uwTick;
 80015d0:	4b03      	ldr	r3, [pc, #12]	@ (80015e0 <HAL_GetTick+0x14>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000c38 	.word	0x20000c38

080015e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ec:	f7ff ffee 	bl	80015cc <HAL_GetTick>
 80015f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015fc:	d005      	beq.n	800160a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <HAL_Delay+0x44>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160a:	bf00      	nop
 800160c:	f7ff ffde 	bl	80015cc <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	429a      	cmp	r2, r3
 800161a:	d8f7      	bhi.n	800160c <HAL_Delay+0x28>
  {
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000008 	.word	0x20000008

0800162c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800163c:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <__NVIC_SetPriorityGrouping+0x40>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001648:	4013      	ands	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 8001656:	4313      	orrs	r3, r2
 8001658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165a:	4a04      	ldr	r2, [pc, #16]	@ (800166c <__NVIC_SetPriorityGrouping+0x40>)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	60d3      	str	r3, [r2, #12]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00
 8001670:	05fa0000 	.word	0x05fa0000

08001674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001678:	4b04      	ldr	r3, [pc, #16]	@ (800168c <__NVIC_GetPriorityGrouping+0x18>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	f003 0307 	and.w	r3, r3, #7
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db0b      	blt.n	80016ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	f003 021f 	and.w	r2, r3, #31
 80016a8:	4907      	ldr	r1, [pc, #28]	@ (80016c8 <__NVIC_EnableIRQ+0x38>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	2001      	movs	r0, #1
 80016b2:	fa00 f202 	lsl.w	r2, r0, r2
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e100 	.word	0xe000e100

080016cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db0a      	blt.n	80016f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	490c      	ldr	r1, [pc, #48]	@ (8001718 <__NVIC_SetPriority+0x4c>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	0112      	lsls	r2, r2, #4
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	440b      	add	r3, r1
 80016f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f4:	e00a      	b.n	800170c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4908      	ldr	r1, [pc, #32]	@ (800171c <__NVIC_SetPriority+0x50>)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	3b04      	subs	r3, #4
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	440b      	add	r3, r1
 800170a:	761a      	strb	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000e100 	.word	0xe000e100
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	@ 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f1c3 0307 	rsb	r3, r3, #7
 800173a:	2b04      	cmp	r3, #4
 800173c:	bf28      	it	cs
 800173e:	2304      	movcs	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3304      	adds	r3, #4
 8001746:	2b06      	cmp	r3, #6
 8001748:	d902      	bls.n	8001750 <NVIC_EncodePriority+0x30>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3b03      	subs	r3, #3
 800174e:	e000      	b.n	8001752 <NVIC_EncodePriority+0x32>
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	401a      	ands	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001768:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43d9      	mvns	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	4313      	orrs	r3, r2
         );
}
 800177a:	4618      	mov	r0, r3
 800177c:	3724      	adds	r7, #36	@ 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001798:	d301      	bcc.n	800179e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179a:	2301      	movs	r3, #1
 800179c:	e00f      	b.n	80017be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179e:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <SysTick_Config+0x40>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a6:	210f      	movs	r1, #15
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017ac:	f7ff ff8e 	bl	80016cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b0:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <SysTick_Config+0x40>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b6:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <SysTick_Config+0x40>)
 80017b8:	2207      	movs	r2, #7
 80017ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	e000e010 	.word	0xe000e010

080017cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff29 	bl	800162c <__NVIC_SetPriorityGrouping>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f4:	f7ff ff3e 	bl	8001674 <__NVIC_GetPriorityGrouping>
 80017f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	6978      	ldr	r0, [r7, #20]
 8001800:	f7ff ff8e 	bl	8001720 <NVIC_EncodePriority>
 8001804:	4602      	mov	r2, r0
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff5d 	bl	80016cc <__NVIC_SetPriority>
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff31 	bl	8001690 <__NVIC_EnableIRQ>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ffa2 	bl	8001788 <SysTick_Config>
 8001844:	4603      	mov	r3, r0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06a      	b.n	8001938 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001868:	2b00      	cmp	r3, #0
 800186a:	d106      	bne.n	800187a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2223      	movs	r2, #35	@ 0x23
 8001870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7fe fee1 	bl	800063c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b31      	ldr	r3, [pc, #196]	@ (8001940 <HAL_ETH_Init+0xf0>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	4a30      	ldr	r2, [pc, #192]	@ (8001940 <HAL_ETH_Init+0xf0>)
 8001880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001884:	6453      	str	r3, [r2, #68]	@ 0x44
 8001886:	4b2e      	ldr	r3, [pc, #184]	@ (8001940 <HAL_ETH_Init+0xf0>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001892:	4b2c      	ldr	r3, [pc, #176]	@ (8001944 <HAL_ETH_Init+0xf4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4a2b      	ldr	r2, [pc, #172]	@ (8001944 <HAL_ETH_Init+0xf4>)
 8001898:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800189c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800189e:	4b29      	ldr	r3, [pc, #164]	@ (8001944 <HAL_ETH_Init+0xf4>)
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	4927      	ldr	r1, [pc, #156]	@ (8001944 <HAL_ETH_Init+0xf4>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80018ac:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <HAL_ETH_Init+0xf4>)
 80018ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018c8:	f7ff fe80 	bl	80015cc <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018ce:	e011      	b.n	80018f4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018d0:	f7ff fe7c 	bl	80015cc <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018de:	d909      	bls.n	80018f4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2204      	movs	r2, #4
 80018e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	22e0      	movs	r2, #224	@ 0xe0
 80018ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e021      	b.n	8001938 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1e4      	bne.n	80018d0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f958 	bl	8001bbc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f9ff 	bl	8001d10 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 fa55 	bl	8001dc2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	461a      	mov	r2, r3
 800191e:	2100      	movs	r1, #0
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f9bd 	bl	8001ca0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2210      	movs	r2, #16
 8001932:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	40013800 	.word	0x40013800

08001948 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4b51      	ldr	r3, [pc, #324]	@ (8001aa4 <ETH_SetMACConfig+0x15c>)
 800195e:	4013      	ands	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	7c1b      	ldrb	r3, [r3, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <ETH_SetMACConfig+0x28>
 800196a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800196e:	e000      	b.n	8001972 <ETH_SetMACConfig+0x2a>
 8001970:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	7c5b      	ldrb	r3, [r3, #17]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d102      	bne.n	8001980 <ETH_SetMACConfig+0x38>
 800197a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800197e:	e000      	b.n	8001982 <ETH_SetMACConfig+0x3a>
 8001980:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001982:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001988:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	7fdb      	ldrb	r3, [r3, #31]
 800198e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001990:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001996:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	7f92      	ldrb	r2, [r2, #30]
 800199c:	2a00      	cmp	r2, #0
 800199e:	d102      	bne.n	80019a6 <ETH_SetMACConfig+0x5e>
 80019a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019a4:	e000      	b.n	80019a8 <ETH_SetMACConfig+0x60>
 80019a6:	2200      	movs	r2, #0
                        macconf->Speed |
 80019a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	7f1b      	ldrb	r3, [r3, #28]
 80019ae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019b0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80019b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	791b      	ldrb	r3, [r3, #4]
 80019bc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80019be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019c6:	2a00      	cmp	r2, #0
 80019c8:	d102      	bne.n	80019d0 <ETH_SetMACConfig+0x88>
 80019ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ce:	e000      	b.n	80019d2 <ETH_SetMACConfig+0x8a>
 80019d0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	7bdb      	ldrb	r3, [r3, #15]
 80019d8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019da:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80019e8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019ea:	4313      	orrs	r3, r2
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a02:	2001      	movs	r0, #1
 8001a04:	f7ff fdee 	bl	80015e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001a1e:	4013      	ands	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a26:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001a2e:	2a00      	cmp	r2, #0
 8001a30:	d101      	bne.n	8001a36 <ETH_SetMACConfig+0xee>
 8001a32:	2280      	movs	r2, #128	@ 0x80
 8001a34:	e000      	b.n	8001a38 <ETH_SetMACConfig+0xf0>
 8001a36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a38:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001a46:	2a01      	cmp	r2, #1
 8001a48:	d101      	bne.n	8001a4e <ETH_SetMACConfig+0x106>
 8001a4a:	2208      	movs	r2, #8
 8001a4c:	e000      	b.n	8001a50 <ETH_SetMACConfig+0x108>
 8001a4e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001a50:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001a58:	2a01      	cmp	r2, #1
 8001a5a:	d101      	bne.n	8001a60 <ETH_SetMACConfig+0x118>
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	e000      	b.n	8001a62 <ETH_SetMACConfig+0x11a>
 8001a60:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001a6a:	2a01      	cmp	r2, #1
 8001a6c:	d101      	bne.n	8001a72 <ETH_SetMACConfig+0x12a>
 8001a6e:	2202      	movs	r2, #2
 8001a70:	e000      	b.n	8001a74 <ETH_SetMACConfig+0x12c>
 8001a72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a74:	4313      	orrs	r3, r2
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f7ff fda9 	bl	80015e4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	619a      	str	r2, [r3, #24]
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	ff20810f 	.word	0xff20810f

08001aa8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb8 <ETH_SetDMAConfig+0x110>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	7b1b      	ldrb	r3, [r3, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <ETH_SetDMAConfig+0x2c>
 8001ace:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ad2:	e000      	b.n	8001ad6 <ETH_SetDMAConfig+0x2e>
 8001ad4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	7b5b      	ldrb	r3, [r3, #13]
 8001ada:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001adc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	7f52      	ldrb	r2, [r2, #29]
 8001ae2:	2a00      	cmp	r2, #0
 8001ae4:	d102      	bne.n	8001aec <ETH_SetDMAConfig+0x44>
 8001ae6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001aea:	e000      	b.n	8001aee <ETH_SetDMAConfig+0x46>
 8001aec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001aee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	7b9b      	ldrb	r3, [r3, #14]
 8001af4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001af6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001afc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	7f1b      	ldrb	r3, [r3, #28]
 8001b02:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001b04:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	7f9b      	ldrb	r3, [r3, #30]
 8001b0a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b0c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b1a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f7ff fd50 	bl	80015e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	791b      	ldrb	r3, [r3, #4]
 8001b56:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b5c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001b62:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b68:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b70:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001b72:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b78:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b7a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b80:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b8e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7ff fd21 	bl	80015e4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	f8de3f23 	.word	0xf8de3f23

08001bbc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b0a6      	sub	sp, #152	@ 0x98
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001be6:	2301      	movs	r3, #1
 8001be8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c1e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c22:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c30:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fe86 	bl	8001948 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001c40:	2301      	movs	r3, #1
 8001c42:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001c44:	2301      	movs	r3, #1
 8001c46:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001c62:	2301      	movs	r3, #1
 8001c64:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c70:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c72:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c76:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c7c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c8c:	f107 0308 	add.w	r3, r7, #8
 8001c90:	4619      	mov	r1, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ff08 	bl	8001aa8 <ETH_SetDMAConfig>
}
 8001c98:	bf00      	nop
 8001c9a:	3798      	adds	r7, #152	@ 0x98
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3305      	adds	r3, #5
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	3204      	adds	r2, #4
 8001cb8:	7812      	ldrb	r2, [r2, #0]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <ETH_MACAddressConfig+0x68>)
 8001cc2:	4413      	add	r3, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3303      	adds	r3, #3
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	061a      	lsls	r2, r3, #24
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	041b      	lsls	r3, r3, #16
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	7812      	ldrb	r2, [r2, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <ETH_MACAddressConfig+0x6c>)
 8001cf2:	4413      	add	r3, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	6013      	str	r3, [r2, #0]
}
 8001cfa:	bf00      	nop
 8001cfc:	371c      	adds	r7, #28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40028040 	.word	0x40028040
 8001d0c:	40028044 	.word	0x40028044

08001d10 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	e03e      	b.n	8001d9c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68d9      	ldr	r1, [r3, #12]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	440b      	add	r3, r1
 8001d2e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	3206      	adds	r2, #6
 8001d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d80c      	bhi.n	8001d80 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68d9      	ldr	r1, [r3, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	461a      	mov	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	e004      	b.n	8001d8a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	461a      	mov	r2, r3
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d9bd      	bls.n	8001d1e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db4:	611a      	str	r2, [r3, #16]
}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	e046      	b.n	8001e5e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6919      	ldr	r1, [r3, #16]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2200      	movs	r2, #0
 8001dec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2200      	movs	r2, #0
 8001e04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001e0c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001e14:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	3212      	adds	r2, #18
 8001e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d80c      	bhi.n	8001e4e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6919      	ldr	r1, [r3, #16]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	461a      	mov	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	e004      	b.n	8001e58 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	461a      	mov	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d9b5      	bls.n	8001dd0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691a      	ldr	r2, [r3, #16]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e8e:	60da      	str	r2, [r3, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	@ 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e175      	b.n	80021a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f040 8164 	bne.w	80021a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d005      	beq.n	8001ef2 <HAL_GPIO_Init+0x56>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d130      	bne.n	8001f54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 0201 	and.w	r2, r3, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d017      	beq.n	8001f90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d123      	bne.n	8001fe4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80be 	beq.w	80021a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	4b66      	ldr	r3, [pc, #408]	@ (80021c0 <HAL_GPIO_Init+0x324>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202a:	4a65      	ldr	r2, [pc, #404]	@ (80021c0 <HAL_GPIO_Init+0x324>)
 800202c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002030:	6453      	str	r3, [r2, #68]	@ 0x44
 8002032:	4b63      	ldr	r3, [pc, #396]	@ (80021c0 <HAL_GPIO_Init+0x324>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800203e:	4a61      	ldr	r2, [pc, #388]	@ (80021c4 <HAL_GPIO_Init+0x328>)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a58      	ldr	r2, [pc, #352]	@ (80021c8 <HAL_GPIO_Init+0x32c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d037      	beq.n	80020da <HAL_GPIO_Init+0x23e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a57      	ldr	r2, [pc, #348]	@ (80021cc <HAL_GPIO_Init+0x330>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d031      	beq.n	80020d6 <HAL_GPIO_Init+0x23a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a56      	ldr	r2, [pc, #344]	@ (80021d0 <HAL_GPIO_Init+0x334>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d02b      	beq.n	80020d2 <HAL_GPIO_Init+0x236>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a55      	ldr	r2, [pc, #340]	@ (80021d4 <HAL_GPIO_Init+0x338>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d025      	beq.n	80020ce <HAL_GPIO_Init+0x232>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a54      	ldr	r2, [pc, #336]	@ (80021d8 <HAL_GPIO_Init+0x33c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01f      	beq.n	80020ca <HAL_GPIO_Init+0x22e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a53      	ldr	r2, [pc, #332]	@ (80021dc <HAL_GPIO_Init+0x340>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d019      	beq.n	80020c6 <HAL_GPIO_Init+0x22a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a52      	ldr	r2, [pc, #328]	@ (80021e0 <HAL_GPIO_Init+0x344>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <HAL_GPIO_Init+0x226>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a51      	ldr	r2, [pc, #324]	@ (80021e4 <HAL_GPIO_Init+0x348>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00d      	beq.n	80020be <HAL_GPIO_Init+0x222>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a50      	ldr	r2, [pc, #320]	@ (80021e8 <HAL_GPIO_Init+0x34c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d007      	beq.n	80020ba <HAL_GPIO_Init+0x21e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4f      	ldr	r2, [pc, #316]	@ (80021ec <HAL_GPIO_Init+0x350>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d101      	bne.n	80020b6 <HAL_GPIO_Init+0x21a>
 80020b2:	2309      	movs	r3, #9
 80020b4:	e012      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020b6:	230a      	movs	r3, #10
 80020b8:	e010      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020ba:	2308      	movs	r3, #8
 80020bc:	e00e      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020be:	2307      	movs	r3, #7
 80020c0:	e00c      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020c2:	2306      	movs	r3, #6
 80020c4:	e00a      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020c6:	2305      	movs	r3, #5
 80020c8:	e008      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e004      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020da:	2300      	movs	r3, #0
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f002 0203 	and.w	r2, r2, #3
 80020e2:	0092      	lsls	r2, r2, #2
 80020e4:	4093      	lsls	r3, r2
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020ec:	4935      	ldr	r1, [pc, #212]	@ (80021c4 <HAL_GPIO_Init+0x328>)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fa:	4b3d      	ldr	r3, [pc, #244]	@ (80021f0 <HAL_GPIO_Init+0x354>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211e:	4a34      	ldr	r2, [pc, #208]	@ (80021f0 <HAL_GPIO_Init+0x354>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002124:	4b32      	ldr	r3, [pc, #200]	@ (80021f0 <HAL_GPIO_Init+0x354>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002148:	4a29      	ldr	r2, [pc, #164]	@ (80021f0 <HAL_GPIO_Init+0x354>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800214e:	4b28      	ldr	r3, [pc, #160]	@ (80021f0 <HAL_GPIO_Init+0x354>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002172:	4a1f      	ldr	r2, [pc, #124]	@ (80021f0 <HAL_GPIO_Init+0x354>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002178:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <HAL_GPIO_Init+0x354>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800219c:	4a14      	ldr	r2, [pc, #80]	@ (80021f0 <HAL_GPIO_Init+0x354>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3301      	adds	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	f67f ae86 	bls.w	8001ebc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3724      	adds	r7, #36	@ 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40013800 	.word	0x40013800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40020800 	.word	0x40020800
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40021400 	.word	0x40021400
 80021e0:	40021800 	.word	0x40021800
 80021e4:	40021c00 	.word	0x40021c00
 80021e8:	40022000 	.word	0x40022000
 80021ec:	40022400 	.word	0x40022400
 80021f0:	40013c00 	.word	0x40013c00

080021f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	887b      	ldrh	r3, [r7, #2]
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	e001      	b.n	8002216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
 8002230:	4613      	mov	r3, r2
 8002232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002234:	787b      	ldrb	r3, [r7, #1]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002240:	e003      	b.n	800224a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	041a      	lsls	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	619a      	str	r2, [r3, #24]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002256:	b480      	push	{r7}
 8002258:	b085      	sub	sp, #20
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	460b      	mov	r3, r1
 8002260:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002268:	887a      	ldrh	r2, [r7, #2]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4013      	ands	r3, r2
 800226e:	041a      	lsls	r2, r3, #16
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	43d9      	mvns	r1, r3
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	400b      	ands	r3, r1
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	619a      	str	r2, [r3, #24]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002296:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022a2:	4a05      	ldr	r2, [pc, #20]	@ (80022b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff f8fe 	bl	80014ac <HAL_GPIO_EXTI_Callback>
  }
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40013c00 	.word	0x40013c00

080022bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e07f      	b.n	80023ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7fe fb58 	bl	8000998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2224      	movs	r2, #36	@ 0x24
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800230c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800231c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d107      	bne.n	8002336 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	e006      	b.n	8002344 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002342:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d104      	bne.n	8002356 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002354:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b1d      	ldr	r3, [pc, #116]	@ (80023d8 <HAL_I2C_Init+0x11c>)
 8002362:	430b      	orrs	r3, r1
 8002364:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002374:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69d9      	ldr	r1, [r3, #28]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1a      	ldr	r2, [r3, #32]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	02008000 	.word	0x02008000

080023dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	4608      	mov	r0, r1
 80023e6:	4611      	mov	r1, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	817b      	strh	r3, [r7, #10]
 80023ee:	460b      	mov	r3, r1
 80023f0:	813b      	strh	r3, [r7, #8]
 80023f2:	4613      	mov	r3, r2
 80023f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b20      	cmp	r3, #32
 8002400:	f040 80f9 	bne.w	80025f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_I2C_Mem_Write+0x34>
 800240a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002416:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0ed      	b.n	80025f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_I2C_Mem_Write+0x4e>
 8002426:	2302      	movs	r3, #2
 8002428:	e0e6      	b.n	80025f8 <HAL_I2C_Mem_Write+0x21c>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002432:	f7ff f8cb 	bl	80015cc <HAL_GetTick>
 8002436:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2319      	movs	r3, #25
 800243e:	2201      	movs	r2, #1
 8002440:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 f955 	bl	80026f4 <I2C_WaitOnFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0d1      	b.n	80025f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2221      	movs	r2, #33	@ 0x21
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2240      	movs	r2, #64	@ 0x40
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a3a      	ldr	r2, [r7, #32]
 800246e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002474:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800247c:	88f8      	ldrh	r0, [r7, #6]
 800247e:	893a      	ldrh	r2, [r7, #8]
 8002480:	8979      	ldrh	r1, [r7, #10]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	4603      	mov	r3, r0
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f8b9 	bl	8002604 <I2C_RequestMemoryWrite>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0a9      	b.n	80025f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2bff      	cmp	r3, #255	@ 0xff
 80024ac:	d90e      	bls.n	80024cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	22ff      	movs	r2, #255	@ 0xff
 80024b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	8979      	ldrh	r1, [r7, #10]
 80024bc:	2300      	movs	r3, #0
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 fab1 	bl	8002a2c <I2C_TransferConfig>
 80024ca:	e00f      	b.n	80024ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	8979      	ldrh	r1, [r7, #10]
 80024de:	2300      	movs	r3, #0
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 faa0 	bl	8002a2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f93f 	bl	8002774 <I2C_WaitOnTXISFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e07b      	b.n	80025f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d034      	beq.n	80025a4 <HAL_I2C_Mem_Write+0x1c8>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253e:	2b00      	cmp	r3, #0
 8002540:	d130      	bne.n	80025a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002548:	2200      	movs	r2, #0
 800254a:	2180      	movs	r1, #128	@ 0x80
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f8d1 	bl	80026f4 <I2C_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e04d      	b.n	80025f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	2bff      	cmp	r3, #255	@ 0xff
 8002564:	d90e      	bls.n	8002584 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	22ff      	movs	r2, #255	@ 0xff
 800256a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002570:	b2da      	uxtb	r2, r3
 8002572:	8979      	ldrh	r1, [r7, #10]
 8002574:	2300      	movs	r3, #0
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fa55 	bl	8002a2c <I2C_TransferConfig>
 8002582:	e00f      	b.n	80025a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002592:	b2da      	uxtb	r2, r3
 8002594:	8979      	ldrh	r1, [r7, #10]
 8002596:	2300      	movs	r3, #0
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 fa44 	bl	8002a2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d19e      	bne.n	80024ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f91e 	bl	80027f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e01a      	b.n	80025f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2220      	movs	r2, #32
 80025c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <HAL_I2C_Mem_Write+0x224>)
 80025d6:	400b      	ands	r3, r1
 80025d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2220      	movs	r2, #32
 80025de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e000      	b.n	80025f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
  }
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	fe00e800 	.word	0xfe00e800

08002604 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	4608      	mov	r0, r1
 800260e:	4611      	mov	r1, r2
 8002610:	461a      	mov	r2, r3
 8002612:	4603      	mov	r3, r0
 8002614:	817b      	strh	r3, [r7, #10]
 8002616:	460b      	mov	r3, r1
 8002618:	813b      	strh	r3, [r7, #8]
 800261a:	4613      	mov	r3, r2
 800261c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	8979      	ldrh	r1, [r7, #10]
 8002624:	4b20      	ldr	r3, [pc, #128]	@ (80026a8 <I2C_RequestMemoryWrite+0xa4>)
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f9fd 	bl	8002a2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	69b9      	ldr	r1, [r7, #24]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f89c 	bl	8002774 <I2C_WaitOnTXISFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e02c      	b.n	80026a0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d105      	bne.n	8002658 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800264c:	893b      	ldrh	r3, [r7, #8]
 800264e:	b2da      	uxtb	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	629a      	str	r2, [r3, #40]	@ 0x28
 8002656:	e015      	b.n	8002684 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002658:	893b      	ldrh	r3, [r7, #8]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	b29b      	uxth	r3, r3
 800265e:	b2da      	uxtb	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	69b9      	ldr	r1, [r7, #24]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f882 	bl	8002774 <I2C_WaitOnTXISFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e012      	b.n	80026a0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800267a:	893b      	ldrh	r3, [r7, #8]
 800267c:	b2da      	uxtb	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2200      	movs	r2, #0
 800268c:	2180      	movs	r1, #128	@ 0x80
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f830 	bl	80026f4 <I2C_WaitOnFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	80002000 	.word	0x80002000

080026ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d103      	bne.n	80026ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2200      	movs	r2, #0
 80026c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d007      	beq.n	80026e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	619a      	str	r2, [r3, #24]
  }
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	4613      	mov	r3, r2
 8002702:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002704:	e022      	b.n	800274c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800270c:	d01e      	beq.n	800274c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270e:	f7fe ff5d 	bl	80015cc <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d302      	bcc.n	8002724 <I2C_WaitOnFlagUntilTimeout+0x30>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d113      	bne.n	800274c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002728:	f043 0220 	orr.w	r2, r3, #32
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e00f      	b.n	800276c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699a      	ldr	r2, [r3, #24]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	4013      	ands	r3, r2
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	429a      	cmp	r2, r3
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	429a      	cmp	r2, r3
 8002768:	d0cd      	beq.n	8002706 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002780:	e02c      	b.n	80027dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f870 	bl	800286c <I2C_IsErrorOccurred>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e02a      	b.n	80027ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800279c:	d01e      	beq.n	80027dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279e:	f7fe ff15 	bl	80015cc <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d302      	bcc.n	80027b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d113      	bne.n	80027dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e007      	b.n	80027ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d1cb      	bne.n	8002782 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002800:	e028      	b.n	8002854 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f830 	bl	800286c <I2C_IsErrorOccurred>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e026      	b.n	8002864 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002816:	f7fe fed9 	bl	80015cc <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	429a      	cmp	r2, r3
 8002824:	d302      	bcc.n	800282c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d113      	bne.n	8002854 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002830:	f043 0220 	orr.w	r2, r3, #32
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e007      	b.n	8002864 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b20      	cmp	r3, #32
 8002860:	d1cf      	bne.n	8002802 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	@ 0x28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	d068      	beq.n	800296a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2210      	movs	r2, #16
 800289e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028a0:	e049      	b.n	8002936 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028a8:	d045      	beq.n	8002936 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028aa:	f7fe fe8f 	bl	80015cc <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d302      	bcc.n	80028c0 <I2C_IsErrorOccurred+0x54>
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d13a      	bne.n	8002936 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028e2:	d121      	bne.n	8002928 <I2C_IsErrorOccurred+0xbc>
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028ea:	d01d      	beq.n	8002928 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80028ec:	7cfb      	ldrb	r3, [r7, #19]
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d01a      	beq.n	8002928 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002900:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002902:	f7fe fe63 	bl	80015cc <HAL_GetTick>
 8002906:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002908:	e00e      	b.n	8002928 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800290a:	f7fe fe5f 	bl	80015cc <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b19      	cmp	r3, #25
 8002916:	d907      	bls.n	8002928 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	f043 0320 	orr.w	r3, r3, #32
 800291e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002926:	e006      	b.n	8002936 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b20      	cmp	r3, #32
 8002934:	d1e9      	bne.n	800290a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b20      	cmp	r3, #32
 8002942:	d003      	beq.n	800294c <I2C_IsErrorOccurred+0xe0>
 8002944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0aa      	beq.n	80028a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800294c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2220      	movs	r2, #32
 800295a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00b      	beq.n	8002994 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800298c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00b      	beq.n	80029b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	f043 0308 	orr.w	r3, r3, #8
 80029a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00b      	beq.n	80029d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	f043 0302 	orr.w	r3, r3, #2
 80029c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80029d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01c      	beq.n	8002a1a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f7ff fe63 	bl	80026ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a28 <I2C_IsErrorOccurred+0x1bc>)
 80029f2:	400b      	ands	r3, r1
 80029f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3728      	adds	r7, #40	@ 0x28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	fe00e800 	.word	0xfe00e800

08002a2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	460b      	mov	r3, r1
 8002a38:	817b      	strh	r3, [r7, #10]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a3e:	897b      	ldrh	r3, [r7, #10]
 8002a40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a44:	7a7b      	ldrb	r3, [r7, #9]
 8002a46:	041b      	lsls	r3, r3, #16
 8002a48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a4c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a5a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	0d5b      	lsrs	r3, r3, #21
 8002a66:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002a6a:	4b08      	ldr	r3, [pc, #32]	@ (8002a8c <I2C_TransferConfig+0x60>)
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	ea02 0103 	and.w	r1, r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a7e:	bf00      	nop
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	03ff63ff 	.word	0x03ff63ff

08002a90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d138      	bne.n	8002b18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e032      	b.n	8002b1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2224      	movs	r2, #36	@ 0x24
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ae2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6819      	ldr	r1, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e000      	b.n	8002b1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b18:	2302      	movs	r3, #2
  }
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b085      	sub	sp, #20
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d139      	bne.n	8002bb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e033      	b.n	8002bb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2224      	movs	r2, #36	@ 0x24
 8002b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0201 	bic.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
  }
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc0:	b08f      	sub	sp, #60	@ 0x3c
 8002bc2:	af0a      	add	r7, sp, #40	@ 0x28
 8002bc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e116      	b.n	8002dfe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe fa04 	bl	8000ff8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f002 fb3e 	bl	8005290 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	687e      	ldr	r6, [r7, #4]
 8002c1c:	466d      	mov	r5, sp
 8002c1e:	f106 0410 	add.w	r4, r6, #16
 8002c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c32:	1d33      	adds	r3, r6, #4
 8002c34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c36:	6838      	ldr	r0, [r7, #0]
 8002c38:	f002 fad2 	bl	80051e0 <USB_CoreInit>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0d7      	b.n	8002dfe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f002 fb2c 	bl	80052b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	73fb      	strb	r3, [r7, #15]
 8002c5e:	e04a      	b.n	8002cf6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c60:	7bfa      	ldrb	r2, [r7, #15]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	333d      	adds	r3, #61	@ 0x3d
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	333c      	adds	r3, #60	@ 0x3c
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c88:	7bfa      	ldrb	r2, [r7, #15]
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	b298      	uxth	r0, r3
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	3344      	adds	r3, #68	@ 0x44
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	3340      	adds	r3, #64	@ 0x40
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3348      	adds	r3, #72	@ 0x48
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	334c      	adds	r3, #76	@ 0x4c
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cdc:	7bfa      	ldrb	r2, [r7, #15]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	3354      	adds	r3, #84	@ 0x54
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d3af      	bcc.n	8002c60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	73fb      	strb	r3, [r7, #15]
 8002d04:	e044      	b.n	8002d90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d06:	7bfa      	ldrb	r2, [r7, #15]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d3b5      	bcc.n	8002d06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	687e      	ldr	r6, [r7, #4]
 8002da2:	466d      	mov	r5, sp
 8002da4:	f106 0410 	add.w	r4, r6, #16
 8002da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002db0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002db4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002db8:	1d33      	adds	r3, r6, #4
 8002dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dbc:	6838      	ldr	r0, [r7, #0]
 8002dbe:	f002 fac5 	bl	800534c <USB_DevInit>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e014      	b.n	8002dfe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d102      	bne.n	8002df2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f80b 	bl	8002e08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f002 fc83 	bl	8005702 <USB_DevDisconnect>

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002e08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e36:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <HAL_PCDEx_ActivateLPM+0x44>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	10000003 	.word	0x10000003

08002e50 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e54:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a04      	ldr	r2, [pc, #16]	@ (8002e6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e5e:	6013      	str	r3, [r2, #0]
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40007000 	.word	0x40007000

08002e70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e291      	b.n	80033aa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8087 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e94:	4b96      	ldr	r3, [pc, #600]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d00c      	beq.n	8002eba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea0:	4b93      	ldr	r3, [pc, #588]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d112      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x62>
 8002eac:	4b90      	ldr	r3, [pc, #576]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eba:	4b8d      	ldr	r3, [pc, #564]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d06c      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x130>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d168      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e26b      	b.n	80033aa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x7a>
 8002edc:	4b84      	ldr	r3, [pc, #528]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a83      	ldr	r2, [pc, #524]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	e02e      	b.n	8002f48 <HAL_RCC_OscConfig+0xd8>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x9c>
 8002ef2:	4b7f      	ldr	r3, [pc, #508]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a7e      	ldr	r2, [pc, #504]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002ef8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b7c      	ldr	r3, [pc, #496]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a7b      	ldr	r2, [pc, #492]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002f04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e01d      	b.n	8002f48 <HAL_RCC_OscConfig+0xd8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0xc0>
 8002f16:	4b76      	ldr	r3, [pc, #472]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a75      	ldr	r2, [pc, #468]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002f1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	4b73      	ldr	r3, [pc, #460]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a72      	ldr	r2, [pc, #456]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e00b      	b.n	8002f48 <HAL_RCC_OscConfig+0xd8>
 8002f30:	4b6f      	ldr	r3, [pc, #444]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a6e      	ldr	r2, [pc, #440]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	4b6c      	ldr	r3, [pc, #432]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a6b      	ldr	r2, [pc, #428]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002f42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe fb3c 	bl	80015cc <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe fb38 	bl	80015cc <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	@ 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e21f      	b.n	80033aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	4b61      	ldr	r3, [pc, #388]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0xe8>
 8002f76:	e014      	b.n	8002fa2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe fb28 	bl	80015cc <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fe fb24 	bl	80015cc <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	@ 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e20b      	b.n	80033aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f92:	4b57      	ldr	r3, [pc, #348]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x110>
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d069      	beq.n	8003082 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fae:	4b50      	ldr	r3, [pc, #320]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00b      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fba:	4b4d      	ldr	r3, [pc, #308]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d11c      	bne.n	8003000 <HAL_RCC_OscConfig+0x190>
 8002fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d116      	bne.n	8003000 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd2:	4b47      	ldr	r3, [pc, #284]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <HAL_RCC_OscConfig+0x17a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d001      	beq.n	8002fea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e1df      	b.n	80033aa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fea:	4b41      	ldr	r3, [pc, #260]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	493d      	ldr	r1, [pc, #244]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffe:	e040      	b.n	8003082 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d023      	beq.n	8003050 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003008:	4b39      	ldr	r3, [pc, #228]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a38      	ldr	r2, [pc, #224]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fe fada 	bl	80015cc <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301c:	f7fe fad6 	bl	80015cc <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e1bd      	b.n	80033aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302e:	4b30      	ldr	r3, [pc, #192]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303a:	4b2d      	ldr	r3, [pc, #180]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4929      	ldr	r1, [pc, #164]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
 800304e:	e018      	b.n	8003082 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003050:	4b27      	ldr	r3, [pc, #156]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a26      	ldr	r2, [pc, #152]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe fab6 	bl	80015cc <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003064:	f7fe fab2 	bl	80015cc <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e199      	b.n	80033aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003076:	4b1e      	ldr	r3, [pc, #120]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d038      	beq.n	8003100 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d019      	beq.n	80030ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003096:	4b16      	ldr	r3, [pc, #88]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 8003098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800309a:	4a15      	ldr	r2, [pc, #84]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a2:	f7fe fa93 	bl	80015cc <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030aa:	f7fe fa8f 	bl	80015cc <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e176      	b.n	80033aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030bc:	4b0c      	ldr	r3, [pc, #48]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 80030be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x23a>
 80030c8:	e01a      	b.n	8003100 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ca:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 80030cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ce:	4a08      	ldr	r2, [pc, #32]	@ (80030f0 <HAL_RCC_OscConfig+0x280>)
 80030d0:	f023 0301 	bic.w	r3, r3, #1
 80030d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d6:	f7fe fa79 	bl	80015cc <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030de:	f7fe fa75 	bl	80015cc <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d903      	bls.n	80030f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e15c      	b.n	80033aa <HAL_RCC_OscConfig+0x53a>
 80030f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f4:	4b91      	ldr	r3, [pc, #580]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 80030f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1ee      	bne.n	80030de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80a4 	beq.w	8003256 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310e:	4b8b      	ldr	r3, [pc, #556]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10d      	bne.n	8003136 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800311a:	4b88      	ldr	r3, [pc, #544]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	4a87      	ldr	r2, [pc, #540]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 8003120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003124:	6413      	str	r3, [r2, #64]	@ 0x40
 8003126:	4b85      	ldr	r3, [pc, #532]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003132:	2301      	movs	r3, #1
 8003134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003136:	4b82      	ldr	r3, [pc, #520]	@ (8003340 <HAL_RCC_OscConfig+0x4d0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d118      	bne.n	8003174 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003142:	4b7f      	ldr	r3, [pc, #508]	@ (8003340 <HAL_RCC_OscConfig+0x4d0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a7e      	ldr	r2, [pc, #504]	@ (8003340 <HAL_RCC_OscConfig+0x4d0>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800314c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314e:	f7fe fa3d 	bl	80015cc <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003156:	f7fe fa39 	bl	80015cc <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b64      	cmp	r3, #100	@ 0x64
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e120      	b.n	80033aa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003168:	4b75      	ldr	r3, [pc, #468]	@ (8003340 <HAL_RCC_OscConfig+0x4d0>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d106      	bne.n	800318a <HAL_RCC_OscConfig+0x31a>
 800317c:	4b6f      	ldr	r3, [pc, #444]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003180:	4a6e      	ldr	r2, [pc, #440]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	6713      	str	r3, [r2, #112]	@ 0x70
 8003188:	e02d      	b.n	80031e6 <HAL_RCC_OscConfig+0x376>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x33c>
 8003192:	4b6a      	ldr	r3, [pc, #424]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003196:	4a69      	ldr	r2, [pc, #420]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	6713      	str	r3, [r2, #112]	@ 0x70
 800319e:	4b67      	ldr	r3, [pc, #412]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a2:	4a66      	ldr	r2, [pc, #408]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 80031a4:	f023 0304 	bic.w	r3, r3, #4
 80031a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031aa:	e01c      	b.n	80031e6 <HAL_RCC_OscConfig+0x376>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b05      	cmp	r3, #5
 80031b2:	d10c      	bne.n	80031ce <HAL_RCC_OscConfig+0x35e>
 80031b4:	4b61      	ldr	r3, [pc, #388]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b8:	4a60      	ldr	r2, [pc, #384]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 80031ba:	f043 0304 	orr.w	r3, r3, #4
 80031be:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c0:	4b5e      	ldr	r3, [pc, #376]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c4:	4a5d      	ldr	r2, [pc, #372]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80031cc:	e00b      	b.n	80031e6 <HAL_RCC_OscConfig+0x376>
 80031ce:	4b5b      	ldr	r3, [pc, #364]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d2:	4a5a      	ldr	r2, [pc, #360]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031da:	4b58      	ldr	r3, [pc, #352]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031de:	4a57      	ldr	r2, [pc, #348]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 80031e0:	f023 0304 	bic.w	r3, r3, #4
 80031e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d015      	beq.n	800321a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ee:	f7fe f9ed 	bl	80015cc <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	e00a      	b.n	800320c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fe f9e9 	bl	80015cc <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e0ce      	b.n	80033aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320c:	4b4b      	ldr	r3, [pc, #300]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 800320e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0ee      	beq.n	80031f6 <HAL_RCC_OscConfig+0x386>
 8003218:	e014      	b.n	8003244 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fe f9d7 	bl	80015cc <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7fe f9d3 	bl	80015cc <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e0b8      	b.n	80033aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003238:	4b40      	ldr	r3, [pc, #256]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ee      	bne.n	8003222 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d105      	bne.n	8003256 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324a:	4b3c      	ldr	r3, [pc, #240]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	4a3b      	ldr	r2, [pc, #236]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 8003250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003254:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80a4 	beq.w	80033a8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003260:	4b36      	ldr	r3, [pc, #216]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	d06b      	beq.n	8003344 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d149      	bne.n	8003308 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003274:	4b31      	ldr	r3, [pc, #196]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a30      	ldr	r2, [pc, #192]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 800327a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800327e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fe f9a4 	bl	80015cc <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7fe f9a0 	bl	80015cc <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e087      	b.n	80033aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	4b28      	ldr	r3, [pc, #160]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69da      	ldr	r2, [r3, #28]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	019b      	lsls	r3, r3, #6
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	3b01      	subs	r3, #1
 80032c0:	041b      	lsls	r3, r3, #16
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c8:	061b      	lsls	r3, r3, #24
 80032ca:	4313      	orrs	r3, r2
 80032cc:	4a1b      	ldr	r2, [pc, #108]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 80032ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80032d2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d4:	4b19      	ldr	r3, [pc, #100]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a18      	ldr	r2, [pc, #96]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 80032da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe f974 	bl	80015cc <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fe f970 	bl	80015cc <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e057      	b.n	80033aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fa:	4b10      	ldr	r3, [pc, #64]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x478>
 8003306:	e04f      	b.n	80033a8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003308:	4b0c      	ldr	r3, [pc, #48]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a0b      	ldr	r2, [pc, #44]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 800330e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fe f95a 	bl	80015cc <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe f956 	bl	80015cc <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e03d      	b.n	80033aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332e:	4b03      	ldr	r3, [pc, #12]	@ (800333c <HAL_RCC_OscConfig+0x4cc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x4ac>
 800333a:	e035      	b.n	80033a8 <HAL_RCC_OscConfig+0x538>
 800333c:	40023800 	.word	0x40023800
 8003340:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003344:	4b1b      	ldr	r3, [pc, #108]	@ (80033b4 <HAL_RCC_OscConfig+0x544>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d028      	beq.n	80033a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d121      	bne.n	80033a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d11a      	bne.n	80033a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003374:	4013      	ands	r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800337a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800337c:	4293      	cmp	r3, r2
 800337e:	d111      	bne.n	80033a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338a:	085b      	lsrs	r3, r3, #1
 800338c:	3b01      	subs	r3, #1
 800338e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800

080033b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0d0      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b6a      	ldr	r3, [pc, #424]	@ (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d910      	bls.n	8003400 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b67      	ldr	r3, [pc, #412]	@ (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 020f 	bic.w	r2, r3, #15
 80033e6:	4965      	ldr	r1, [pc, #404]	@ (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b63      	ldr	r3, [pc, #396]	@ (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0b8      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d020      	beq.n	800344e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003418:	4b59      	ldr	r3, [pc, #356]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4a58      	ldr	r2, [pc, #352]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800341e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003422:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003430:	4b53      	ldr	r3, [pc, #332]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4a52      	ldr	r2, [pc, #328]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003436:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800343a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800343c:	4b50      	ldr	r3, [pc, #320]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	494d      	ldr	r1, [pc, #308]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d040      	beq.n	80034dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d107      	bne.n	8003472 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003462:	4b47      	ldr	r3, [pc, #284]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d115      	bne.n	800349a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e07f      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347a:	4b41      	ldr	r3, [pc, #260]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e073      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348a:	4b3d      	ldr	r3, [pc, #244]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e06b      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349a:	4b39      	ldr	r3, [pc, #228]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f023 0203 	bic.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4936      	ldr	r1, [pc, #216]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ac:	f7fe f88e 	bl	80015cc <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b4:	f7fe f88a 	bl	80015cc <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e053      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 020c 	and.w	r2, r3, #12
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	429a      	cmp	r2, r3
 80034da:	d1eb      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034dc:	4b27      	ldr	r3, [pc, #156]	@ (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d210      	bcs.n	800350c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b24      	ldr	r3, [pc, #144]	@ (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 020f 	bic.w	r2, r3, #15
 80034f2:	4922      	ldr	r1, [pc, #136]	@ (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	4b20      	ldr	r3, [pc, #128]	@ (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e032      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003518:	4b19      	ldr	r3, [pc, #100]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4916      	ldr	r1, [pc, #88]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003536:	4b12      	ldr	r3, [pc, #72]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	490e      	ldr	r1, [pc, #56]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003546:	4313      	orrs	r3, r2
 8003548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800354a:	f000 f821 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 800354e:	4602      	mov	r2, r0
 8003550:	4b0b      	ldr	r3, [pc, #44]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	490a      	ldr	r1, [pc, #40]	@ (8003584 <HAL_RCC_ClockConfig+0x1cc>)
 800355c:	5ccb      	ldrb	r3, [r1, r3]
 800355e:	fa22 f303 	lsr.w	r3, r2, r3
 8003562:	4a09      	ldr	r2, [pc, #36]	@ (8003588 <HAL_RCC_ClockConfig+0x1d0>)
 8003564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003566:	4b09      	ldr	r3, [pc, #36]	@ (800358c <HAL_RCC_ClockConfig+0x1d4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fd ffea 	bl	8001544 <HAL_InitTick>

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023c00 	.word	0x40023c00
 8003580:	40023800 	.word	0x40023800
 8003584:	08006de4 	.word	0x08006de4
 8003588:	20000000 	.word	0x20000000
 800358c:	20000004 	.word	0x20000004

08003590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003594:	b094      	sub	sp, #80	@ 0x50
 8003596:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	647b      	str	r3, [r7, #68]	@ 0x44
 800359c:	2300      	movs	r3, #0
 800359e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035a0:	2300      	movs	r3, #0
 80035a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035a8:	4b79      	ldr	r3, [pc, #484]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x200>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d00d      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x40>
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	f200 80e1 	bhi.w	800377c <HAL_RCC_GetSysClockFreq+0x1ec>
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0x34>
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d003      	beq.n	80035ca <HAL_RCC_GetSysClockFreq+0x3a>
 80035c2:	e0db      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035c4:	4b73      	ldr	r3, [pc, #460]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x204>)
 80035c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035c8:	e0db      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ca:	4b73      	ldr	r3, [pc, #460]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x208>)
 80035cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035ce:	e0d8      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035da:	4b6d      	ldr	r3, [pc, #436]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x200>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d063      	beq.n	80036ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	099b      	lsrs	r3, r3, #6
 80035ec:	2200      	movs	r2, #0
 80035ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80035f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80035fa:	2300      	movs	r3, #0
 80035fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80035fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003602:	4622      	mov	r2, r4
 8003604:	462b      	mov	r3, r5
 8003606:	f04f 0000 	mov.w	r0, #0
 800360a:	f04f 0100 	mov.w	r1, #0
 800360e:	0159      	lsls	r1, r3, #5
 8003610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003614:	0150      	lsls	r0, r2, #5
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4621      	mov	r1, r4
 800361c:	1a51      	subs	r1, r2, r1
 800361e:	6139      	str	r1, [r7, #16]
 8003620:	4629      	mov	r1, r5
 8003622:	eb63 0301 	sbc.w	r3, r3, r1
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003634:	4659      	mov	r1, fp
 8003636:	018b      	lsls	r3, r1, #6
 8003638:	4651      	mov	r1, sl
 800363a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800363e:	4651      	mov	r1, sl
 8003640:	018a      	lsls	r2, r1, #6
 8003642:	4651      	mov	r1, sl
 8003644:	ebb2 0801 	subs.w	r8, r2, r1
 8003648:	4659      	mov	r1, fp
 800364a:	eb63 0901 	sbc.w	r9, r3, r1
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800365a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800365e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003662:	4690      	mov	r8, r2
 8003664:	4699      	mov	r9, r3
 8003666:	4623      	mov	r3, r4
 8003668:	eb18 0303 	adds.w	r3, r8, r3
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	462b      	mov	r3, r5
 8003670:	eb49 0303 	adc.w	r3, r9, r3
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003682:	4629      	mov	r1, r5
 8003684:	024b      	lsls	r3, r1, #9
 8003686:	4621      	mov	r1, r4
 8003688:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800368c:	4621      	mov	r1, r4
 800368e:	024a      	lsls	r2, r1, #9
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003696:	2200      	movs	r2, #0
 8003698:	62bb      	str	r3, [r7, #40]	@ 0x28
 800369a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800369c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036a0:	f7fc fe06 	bl	80002b0 <__aeabi_uldivmod>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4613      	mov	r3, r2
 80036aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036ac:	e058      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ae:	4b38      	ldr	r3, [pc, #224]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	099b      	lsrs	r3, r3, #6
 80036b4:	2200      	movs	r2, #0
 80036b6:	4618      	mov	r0, r3
 80036b8:	4611      	mov	r1, r2
 80036ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036be:	623b      	str	r3, [r7, #32]
 80036c0:	2300      	movs	r3, #0
 80036c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036c8:	4642      	mov	r2, r8
 80036ca:	464b      	mov	r3, r9
 80036cc:	f04f 0000 	mov.w	r0, #0
 80036d0:	f04f 0100 	mov.w	r1, #0
 80036d4:	0159      	lsls	r1, r3, #5
 80036d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036da:	0150      	lsls	r0, r2, #5
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4641      	mov	r1, r8
 80036e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80036e6:	4649      	mov	r1, r9
 80036e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003700:	ebb2 040a 	subs.w	r4, r2, sl
 8003704:	eb63 050b 	sbc.w	r5, r3, fp
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	00eb      	lsls	r3, r5, #3
 8003712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003716:	00e2      	lsls	r2, r4, #3
 8003718:	4614      	mov	r4, r2
 800371a:	461d      	mov	r5, r3
 800371c:	4643      	mov	r3, r8
 800371e:	18e3      	adds	r3, r4, r3
 8003720:	603b      	str	r3, [r7, #0]
 8003722:	464b      	mov	r3, r9
 8003724:	eb45 0303 	adc.w	r3, r5, r3
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003736:	4629      	mov	r1, r5
 8003738:	028b      	lsls	r3, r1, #10
 800373a:	4621      	mov	r1, r4
 800373c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003740:	4621      	mov	r1, r4
 8003742:	028a      	lsls	r2, r1, #10
 8003744:	4610      	mov	r0, r2
 8003746:	4619      	mov	r1, r3
 8003748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800374a:	2200      	movs	r2, #0
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	61fa      	str	r2, [r7, #28]
 8003750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003754:	f7fc fdac 	bl	80002b0 <__aeabi_uldivmod>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4613      	mov	r3, r2
 800375e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003760:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x200>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	0c1b      	lsrs	r3, r3, #16
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	3301      	adds	r3, #1
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003770:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800377a:	e002      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800377c:	4b05      	ldr	r3, [pc, #20]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x204>)
 800377e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003784:	4618      	mov	r0, r3
 8003786:	3750      	adds	r7, #80	@ 0x50
 8003788:	46bd      	mov	sp, r7
 800378a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800
 8003794:	00f42400 	.word	0x00f42400
 8003798:	007a1200 	.word	0x007a1200

0800379c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a0:	4b03      	ldr	r3, [pc, #12]	@ (80037b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037a2:	681b      	ldr	r3, [r3, #0]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000000 	.word	0x20000000

080037b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037b8:	f7ff fff0 	bl	800379c <HAL_RCC_GetHCLKFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	0a9b      	lsrs	r3, r3, #10
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4903      	ldr	r1, [pc, #12]	@ (80037d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40023800 	.word	0x40023800
 80037d8:	08006df4 	.word	0x08006df4

080037dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037e0:	f7ff ffdc 	bl	800379c <HAL_RCC_GetHCLKFreq>
 80037e4:	4602      	mov	r2, r0
 80037e6:	4b05      	ldr	r3, [pc, #20]	@ (80037fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	0b5b      	lsrs	r3, r3, #13
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	4903      	ldr	r1, [pc, #12]	@ (8003800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f2:	5ccb      	ldrb	r3, [r1, r3]
 80037f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40023800 	.word	0x40023800
 8003800:	08006df4 	.word	0x08006df4

08003804 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d012      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800382c:	4b69      	ldr	r3, [pc, #420]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a68      	ldr	r2, [pc, #416]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003832:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003836:	6093      	str	r3, [r2, #8]
 8003838:	4b66      	ldr	r3, [pc, #408]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003840:	4964      	ldr	r1, [pc, #400]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800384e:	2301      	movs	r3, #1
 8003850:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d017      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800385e:	4b5d      	ldr	r3, [pc, #372]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003864:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386c:	4959      	ldr	r1, [pc, #356]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003878:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800387c:	d101      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800387e:	2301      	movs	r3, #1
 8003880:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800388a:	2301      	movs	r3, #1
 800388c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d017      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800389a:	4b4e      	ldr	r3, [pc, #312]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	494a      	ldr	r1, [pc, #296]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038b8:	d101      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038ba:	2301      	movs	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80038c6:	2301      	movs	r3, #1
 80038c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80038d6:	2301      	movs	r3, #1
 80038d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 808b 	beq.w	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038e8:	4b3a      	ldr	r3, [pc, #232]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ec:	4a39      	ldr	r2, [pc, #228]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80038f4:	4b37      	ldr	r3, [pc, #220]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003900:	4b35      	ldr	r3, [pc, #212]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a34      	ldr	r2, [pc, #208]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800390a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390c:	f7fd fe5e 	bl	80015cc <HAL_GetTick>
 8003910:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003914:	f7fd fe5a 	bl	80015cc <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	@ 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e357      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003926:	4b2c      	ldr	r3, [pc, #176]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003932:	4b28      	ldr	r3, [pc, #160]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800393a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d035      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	429a      	cmp	r2, r3
 800394e:	d02e      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003950:	4b20      	ldr	r3, [pc, #128]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003958:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800395a:	4b1e      	ldr	r3, [pc, #120]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395e:	4a1d      	ldr	r2, [pc, #116]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003964:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003966:	4b1b      	ldr	r3, [pc, #108]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396a:	4a1a      	ldr	r2, [pc, #104]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003970:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003972:	4a18      	ldr	r2, [pc, #96]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003978:	4b16      	ldr	r3, [pc, #88]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d114      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fd fe22 	bl	80015cc <HAL_GetTick>
 8003988:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398a:	e00a      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800398c:	f7fd fe1e 	bl	80015cc <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e319      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a2:	4b0c      	ldr	r3, [pc, #48]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0ee      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039ba:	d111      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80039bc:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039c8:	4b04      	ldr	r3, [pc, #16]	@ (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039ca:	400b      	ands	r3, r1
 80039cc:	4901      	ldr	r1, [pc, #4]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	608b      	str	r3, [r1, #8]
 80039d2:	e00b      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40007000 	.word	0x40007000
 80039dc:	0ffffcff 	.word	0x0ffffcff
 80039e0:	4baa      	ldr	r3, [pc, #680]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4aa9      	ldr	r2, [pc, #676]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039e6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80039ea:	6093      	str	r3, [r2, #8]
 80039ec:	4ba7      	ldr	r3, [pc, #668]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f8:	49a4      	ldr	r1, [pc, #656]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d010      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a0a:	4ba0      	ldr	r3, [pc, #640]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a10:	4a9e      	ldr	r2, [pc, #632]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003a1a:	4b9c      	ldr	r3, [pc, #624]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a24:	4999      	ldr	r1, [pc, #612]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a38:	4b94      	ldr	r3, [pc, #592]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a46:	4991      	ldr	r1, [pc, #580]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a5a:	4b8c      	ldr	r3, [pc, #560]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a68:	4988      	ldr	r1, [pc, #544]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a7c:	4b83      	ldr	r3, [pc, #524]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a8a:	4980      	ldr	r1, [pc, #512]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a9e:	4b7b      	ldr	r3, [pc, #492]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aac:	4977      	ldr	r1, [pc, #476]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ac0:	4b72      	ldr	r3, [pc, #456]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac6:	f023 0203 	bic.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ace:	496f      	ldr	r1, [pc, #444]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae8:	f023 020c 	bic.w	r2, r3, #12
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af0:	4966      	ldr	r1, [pc, #408]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b04:	4b61      	ldr	r3, [pc, #388]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b0a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b12:	495e      	ldr	r1, [pc, #376]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b26:	4b59      	ldr	r3, [pc, #356]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b34:	4955      	ldr	r1, [pc, #340]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b48:	4b50      	ldr	r3, [pc, #320]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b56:	494d      	ldr	r1, [pc, #308]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b6a:	4b48      	ldr	r3, [pc, #288]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b70:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b78:	4944      	ldr	r1, [pc, #272]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b8c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b92:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9a:	493c      	ldr	r1, [pc, #240]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bae:	4b37      	ldr	r3, [pc, #220]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bbc:	4933      	ldr	r1, [pc, #204]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bde:	492b      	ldr	r1, [pc, #172]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d011      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bf2:	4b26      	ldr	r3, [pc, #152]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c00:	4922      	ldr	r1, [pc, #136]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c10:	d101      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c12:	2301      	movs	r3, #1
 8003c14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c22:	2301      	movs	r3, #1
 8003c24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c32:	4b16      	ldr	r3, [pc, #88]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c38:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c40:	4912      	ldr	r1, [pc, #72]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00b      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c54:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c64:	4909      	ldr	r1, [pc, #36]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d006      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 80d9 	beq.w	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c80:	4b02      	ldr	r3, [pc, #8]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a01      	ldr	r2, [pc, #4]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c8a:	e001      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c92:	f7fd fc9b 	bl	80015cc <HAL_GetTick>
 8003c96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c9a:	f7fd fc97 	bl	80015cc <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b64      	cmp	r3, #100	@ 0x64
 8003ca6:	d901      	bls.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e194      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cac:	4b6c      	ldr	r3, [pc, #432]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1f0      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d021      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d11d      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ccc:	4b64      	ldr	r3, [pc, #400]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cd2:	0c1b      	lsrs	r3, r3, #16
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cda:	4b61      	ldr	r3, [pc, #388]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ce0:	0e1b      	lsrs	r3, r3, #24
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	019a      	lsls	r2, r3, #6
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	041b      	lsls	r3, r3, #16
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	061b      	lsls	r3, r3, #24
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	071b      	lsls	r3, r3, #28
 8003d00:	4957      	ldr	r1, [pc, #348]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d004      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d1c:	d00a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d02e      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d32:	d129      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d34:	4b4a      	ldr	r3, [pc, #296]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d3a:	0c1b      	lsrs	r3, r3, #16
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d42:	4b47      	ldr	r3, [pc, #284]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d48:	0f1b      	lsrs	r3, r3, #28
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	019a      	lsls	r2, r3, #6
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	431a      	orrs	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	071b      	lsls	r3, r3, #28
 8003d68:	493d      	ldr	r1, [pc, #244]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d70:	4b3b      	ldr	r3, [pc, #236]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d76:	f023 021f 	bic.w	r2, r3, #31
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	4937      	ldr	r1, [pc, #220]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01d      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d94:	4b32      	ldr	r3, [pc, #200]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d9a:	0e1b      	lsrs	r3, r3, #24
 8003d9c:	f003 030f 	and.w	r3, r3, #15
 8003da0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003da2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003da8:	0f1b      	lsrs	r3, r3, #28
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	019a      	lsls	r2, r3, #6
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	041b      	lsls	r3, r3, #16
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	061b      	lsls	r3, r3, #24
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	071b      	lsls	r3, r3, #28
 8003dc8:	4925      	ldr	r1, [pc, #148]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d011      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	019a      	lsls	r2, r3, #6
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	061b      	lsls	r3, r3, #24
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	071b      	lsls	r3, r3, #28
 8003df8:	4919      	ldr	r1, [pc, #100]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e00:	4b17      	ldr	r3, [pc, #92]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a16      	ldr	r2, [pc, #88]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e0c:	f7fd fbde 	bl	80015cc <HAL_GetTick>
 8003e10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e14:	f7fd fbda 	bl	80015cc <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	@ 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e0d7      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e26:	4b0e      	ldr	r3, [pc, #56]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	f040 80cd 	bne.w	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e3a:	4b09      	ldr	r3, [pc, #36]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a08      	ldr	r2, [pc, #32]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e46:	f7fd fbc1 	bl	80015cc <HAL_GetTick>
 8003e4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e4e:	f7fd fbbd 	bl	80015cc <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b64      	cmp	r3, #100	@ 0x64
 8003e5a:	d903      	bls.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e0ba      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003e60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e64:	4b5e      	ldr	r3, [pc, #376]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e70:	d0ed      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d02e      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d12a      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e9a:	4b51      	ldr	r3, [pc, #324]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ea8:	4b4d      	ldr	r3, [pc, #308]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eae:	0f1b      	lsrs	r3, r3, #28
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	019a      	lsls	r2, r3, #6
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	041b      	lsls	r3, r3, #16
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	061b      	lsls	r3, r3, #24
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	071b      	lsls	r3, r3, #28
 8003ece:	4944      	ldr	r1, [pc, #272]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ed6:	4b42      	ldr	r3, [pc, #264]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003edc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	493d      	ldr	r1, [pc, #244]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d022      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f04:	d11d      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f06:	4b36      	ldr	r3, [pc, #216]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0c:	0e1b      	lsrs	r3, r3, #24
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f14:	4b32      	ldr	r3, [pc, #200]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1a:	0f1b      	lsrs	r3, r3, #28
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	019a      	lsls	r2, r3, #6
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	041b      	lsls	r3, r3, #16
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	061b      	lsls	r3, r3, #24
 8003f34:	431a      	orrs	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	071b      	lsls	r3, r3, #28
 8003f3a:	4929      	ldr	r1, [pc, #164]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d028      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f4e:	4b24      	ldr	r3, [pc, #144]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f54:	0e1b      	lsrs	r3, r3, #24
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f5c:	4b20      	ldr	r3, [pc, #128]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f62:	0c1b      	lsrs	r3, r3, #16
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	019a      	lsls	r2, r3, #6
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	041b      	lsls	r3, r3, #16
 8003f74:	431a      	orrs	r2, r3
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	061b      	lsls	r3, r3, #24
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	071b      	lsls	r3, r3, #28
 8003f82:	4917      	ldr	r1, [pc, #92]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f8a:	4b15      	ldr	r3, [pc, #84]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f98:	4911      	ldr	r1, [pc, #68]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fac:	f7fd fb0e 	bl	80015cc <HAL_GetTick>
 8003fb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fb4:	f7fd fb0a 	bl	80015cc <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	@ 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e007      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fc6:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fd2:	d1ef      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3720      	adds	r7, #32
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40023800 	.word	0x40023800

08003fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e049      	b.n	800408a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fc ff10 	bl	8000e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f000 f9f6 	bl	8004414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d001      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e054      	b.n	8004156 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a26      	ldr	r2, [pc, #152]	@ (8004164 <HAL_TIM_Base_Start_IT+0xd0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d022      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x80>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d6:	d01d      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x80>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a22      	ldr	r2, [pc, #136]	@ (8004168 <HAL_TIM_Base_Start_IT+0xd4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d018      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x80>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a21      	ldr	r2, [pc, #132]	@ (800416c <HAL_TIM_Base_Start_IT+0xd8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d013      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x80>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004170 <HAL_TIM_Base_Start_IT+0xdc>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00e      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x80>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004174 <HAL_TIM_Base_Start_IT+0xe0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d009      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x80>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1c      	ldr	r2, [pc, #112]	@ (8004178 <HAL_TIM_Base_Start_IT+0xe4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x80>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1b      	ldr	r2, [pc, #108]	@ (800417c <HAL_TIM_Base_Start_IT+0xe8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d115      	bne.n	8004140 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	4b19      	ldr	r3, [pc, #100]	@ (8004180 <HAL_TIM_Base_Start_IT+0xec>)
 800411c:	4013      	ands	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b06      	cmp	r3, #6
 8004124:	d015      	beq.n	8004152 <HAL_TIM_Base_Start_IT+0xbe>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800412c:	d011      	beq.n	8004152 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0201 	orr.w	r2, r2, #1
 800413c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413e:	e008      	b.n	8004152 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	e000      	b.n	8004154 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004152:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800
 8004170:	40000c00 	.word	0x40000c00
 8004174:	40010400 	.word	0x40010400
 8004178:	40014000 	.word	0x40014000
 800417c:	40001800 	.word	0x40001800
 8004180:	00010007 	.word	0x00010007

08004184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b02      	cmp	r3, #2
 8004198:	d122      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d11b      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0202 	mvn.w	r2, #2
 80041b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f905 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 80041cc:	e005      	b.n	80041da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f8f7 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f908 	bl	80043ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d122      	bne.n	8004234 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d11b      	bne.n	8004234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0204 	mvn.w	r2, #4
 8004204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2202      	movs	r2, #2
 800420a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f8db 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 8004220:	e005      	b.n	800422e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f8cd 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f8de 	bl	80043ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b08      	cmp	r3, #8
 8004240:	d122      	bne.n	8004288 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b08      	cmp	r3, #8
 800424e:	d11b      	bne.n	8004288 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0208 	mvn.w	r2, #8
 8004258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2204      	movs	r2, #4
 800425e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f8b1 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 8004274:	e005      	b.n	8004282 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f8a3 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f8b4 	bl	80043ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0310 	and.w	r3, r3, #16
 8004292:	2b10      	cmp	r3, #16
 8004294:	d122      	bne.n	80042dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d11b      	bne.n	80042dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0210 	mvn.w	r2, #16
 80042ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2208      	movs	r2, #8
 80042b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f887 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 80042c8:	e005      	b.n	80042d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f879 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f88a 	bl	80043ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d10e      	bne.n	8004308 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d107      	bne.n	8004308 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0201 	mvn.w	r2, #1
 8004300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fc ffb6 	bl	8001274 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004312:	2b80      	cmp	r3, #128	@ 0x80
 8004314:	d10e      	bne.n	8004334 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004320:	2b80      	cmp	r3, #128	@ 0x80
 8004322:	d107      	bne.n	8004334 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800432c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f9a8 	bl	8004684 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004342:	d10e      	bne.n	8004362 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800434e:	2b80      	cmp	r3, #128	@ 0x80
 8004350:	d107      	bne.n	8004362 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800435a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f99b 	bl	8004698 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436c:	2b40      	cmp	r3, #64	@ 0x40
 800436e:	d10e      	bne.n	800438e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800437a:	2b40      	cmp	r3, #64	@ 0x40
 800437c:	d107      	bne.n	800438e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f838 	bl	80043fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	2b20      	cmp	r3, #32
 800439a:	d10e      	bne.n	80043ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b20      	cmp	r3, #32
 80043a8:	d107      	bne.n	80043ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f06f 0220 	mvn.w	r2, #32
 80043b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f95b 	bl	8004670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a40      	ldr	r2, [pc, #256]	@ (8004528 <TIM_Base_SetConfig+0x114>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d013      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004432:	d00f      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a3d      	ldr	r2, [pc, #244]	@ (800452c <TIM_Base_SetConfig+0x118>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00b      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a3c      	ldr	r2, [pc, #240]	@ (8004530 <TIM_Base_SetConfig+0x11c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d007      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a3b      	ldr	r2, [pc, #236]	@ (8004534 <TIM_Base_SetConfig+0x120>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a3a      	ldr	r2, [pc, #232]	@ (8004538 <TIM_Base_SetConfig+0x124>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d108      	bne.n	8004466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800445a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a2f      	ldr	r2, [pc, #188]	@ (8004528 <TIM_Base_SetConfig+0x114>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d02b      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004474:	d027      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a2c      	ldr	r2, [pc, #176]	@ (800452c <TIM_Base_SetConfig+0x118>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d023      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a2b      	ldr	r2, [pc, #172]	@ (8004530 <TIM_Base_SetConfig+0x11c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d01f      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a2a      	ldr	r2, [pc, #168]	@ (8004534 <TIM_Base_SetConfig+0x120>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01b      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a29      	ldr	r2, [pc, #164]	@ (8004538 <TIM_Base_SetConfig+0x124>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d017      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a28      	ldr	r2, [pc, #160]	@ (800453c <TIM_Base_SetConfig+0x128>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a27      	ldr	r2, [pc, #156]	@ (8004540 <TIM_Base_SetConfig+0x12c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00f      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a26      	ldr	r2, [pc, #152]	@ (8004544 <TIM_Base_SetConfig+0x130>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00b      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a25      	ldr	r2, [pc, #148]	@ (8004548 <TIM_Base_SetConfig+0x134>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d007      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a24      	ldr	r2, [pc, #144]	@ (800454c <TIM_Base_SetConfig+0x138>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d003      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a23      	ldr	r2, [pc, #140]	@ (8004550 <TIM_Base_SetConfig+0x13c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d108      	bne.n	80044d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004528 <TIM_Base_SetConfig+0x114>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_Base_SetConfig+0xf8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a0c      	ldr	r2, [pc, #48]	@ (8004538 <TIM_Base_SetConfig+0x124>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d103      	bne.n	8004514 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	615a      	str	r2, [r3, #20]
}
 800451a:	bf00      	nop
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40010000 	.word	0x40010000
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40000c00 	.word	0x40000c00
 8004538:	40010400 	.word	0x40010400
 800453c:	40014000 	.word	0x40014000
 8004540:	40014400 	.word	0x40014400
 8004544:	40014800 	.word	0x40014800
 8004548:	40001800 	.word	0x40001800
 800454c:	40001c00 	.word	0x40001c00
 8004550:	40002000 	.word	0x40002000

08004554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004568:	2302      	movs	r3, #2
 800456a:	e06d      	b.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a30      	ldr	r2, [pc, #192]	@ (8004654 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a2f      	ldr	r2, [pc, #188]	@ (8004658 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d108      	bne.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80045a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a20      	ldr	r2, [pc, #128]	@ (8004654 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d022      	beq.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045de:	d01d      	beq.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a1d      	ldr	r2, [pc, #116]	@ (800465c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d018      	beq.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004660 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d013      	beq.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004664 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00e      	beq.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a15      	ldr	r2, [pc, #84]	@ (8004658 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d009      	beq.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a16      	ldr	r2, [pc, #88]	@ (8004668 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a15      	ldr	r2, [pc, #84]	@ (800466c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d10c      	bne.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004622:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	4313      	orrs	r3, r2
 800462c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	40010000 	.word	0x40010000
 8004658:	40010400 	.word	0x40010400
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800
 8004664:	40000c00 	.word	0x40000c00
 8004668:	40014000 	.word	0x40014000
 800466c:	40001800 	.word	0x40001800

08004670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e040      	b.n	8004740 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fc fc04 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2224      	movs	r2, #36	@ 0x24
 80046d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0201 	bic.w	r2, r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f974 	bl	80049d8 <UART_SetConfig>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e022      	b.n	8004740 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fbcc 	bl	8004ea0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004726:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fc53 	bl	8004fe4 <UART_CheckIdleState>
 800473e:	4603      	mov	r3, r0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	@ 0x28
 800474c:	af02      	add	r7, sp, #8
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	4613      	mov	r3, r2
 8004756:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800475c:	2b20      	cmp	r3, #32
 800475e:	d171      	bne.n	8004844 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_UART_Transmit+0x24>
 8004766:	88fb      	ldrh	r3, [r7, #6]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e06a      	b.n	8004846 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2221      	movs	r2, #33	@ 0x21
 800477c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800477e:	f7fc ff25 	bl	80015cc <HAL_GetTick>
 8004782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	88fa      	ldrh	r2, [r7, #6]
 8004788:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	88fa      	ldrh	r2, [r7, #6]
 8004790:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479c:	d108      	bne.n	80047b0 <HAL_UART_Transmit+0x68>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d104      	bne.n	80047b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	e003      	b.n	80047b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047b8:	e02c      	b.n	8004814 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2200      	movs	r2, #0
 80047c2:	2180      	movs	r1, #128	@ 0x80
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 fc44 	bl	8005052 <UART_WaitOnFlagUntilTimeout>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e038      	b.n	8004846 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10b      	bne.n	80047f2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	3302      	adds	r3, #2
 80047ee:	61bb      	str	r3, [r7, #24]
 80047f0:	e007      	b.n	8004802 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	781a      	ldrb	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	3301      	adds	r3, #1
 8004800:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1cc      	bne.n	80047ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2200      	movs	r2, #0
 8004828:	2140      	movs	r1, #64	@ 0x40
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 fc11 	bl	8005052 <UART_WaitOnFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e005      	b.n	8004846 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	e000      	b.n	8004846 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004844:	2302      	movs	r3, #2
  }
}
 8004846:	4618      	mov	r0, r3
 8004848:	3720      	adds	r7, #32
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b08a      	sub	sp, #40	@ 0x28
 8004852:	af02      	add	r7, sp, #8
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	603b      	str	r3, [r7, #0]
 800485a:	4613      	mov	r3, r2
 800485c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004864:	2b20      	cmp	r3, #32
 8004866:	f040 80b1 	bne.w	80049cc <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_UART_Receive+0x28>
 8004870:	88fb      	ldrh	r3, [r7, #6]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e0a9      	b.n	80049ce <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2222      	movs	r2, #34	@ 0x22
 8004886:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004890:	f7fc fe9c 	bl	80015cc <HAL_GetTick>
 8004894:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	88fa      	ldrh	r2, [r7, #6]
 800489a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	88fa      	ldrh	r2, [r7, #6]
 80048a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ae:	d10e      	bne.n	80048ce <HAL_UART_Receive+0x80>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d105      	bne.n	80048c4 <HAL_UART_Receive+0x76>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80048be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048c2:	e02d      	b.n	8004920 <HAL_UART_Receive+0xd2>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	22ff      	movs	r2, #255	@ 0xff
 80048c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048cc:	e028      	b.n	8004920 <HAL_UART_Receive+0xd2>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10d      	bne.n	80048f2 <HAL_UART_Receive+0xa4>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d104      	bne.n	80048e8 <HAL_UART_Receive+0x9a>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	22ff      	movs	r2, #255	@ 0xff
 80048e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048e6:	e01b      	b.n	8004920 <HAL_UART_Receive+0xd2>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	227f      	movs	r2, #127	@ 0x7f
 80048ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048f0:	e016      	b.n	8004920 <HAL_UART_Receive+0xd2>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048fa:	d10d      	bne.n	8004918 <HAL_UART_Receive+0xca>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d104      	bne.n	800490e <HAL_UART_Receive+0xc0>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	227f      	movs	r2, #127	@ 0x7f
 8004908:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800490c:	e008      	b.n	8004920 <HAL_UART_Receive+0xd2>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	223f      	movs	r2, #63	@ 0x3f
 8004912:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004916:	e003      	b.n	8004920 <HAL_UART_Receive+0xd2>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004926:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004930:	d108      	bne.n	8004944 <HAL_UART_Receive+0xf6>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d104      	bne.n	8004944 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	e003      	b.n	800494c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004948:	2300      	movs	r3, #0
 800494a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800494c:	e032      	b.n	80049b4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2200      	movs	r2, #0
 8004956:	2120      	movs	r1, #32
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 fb7a 	bl	8005052 <UART_WaitOnFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e032      	b.n	80049ce <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10c      	bne.n	8004988 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	b29a      	uxth	r2, r3
 8004976:	8a7b      	ldrh	r3, [r7, #18]
 8004978:	4013      	ands	r3, r2
 800497a:	b29a      	uxth	r2, r3
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	3302      	adds	r3, #2
 8004984:	61bb      	str	r3, [r7, #24]
 8004986:	e00c      	b.n	80049a2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	b2da      	uxtb	r2, r3
 8004990:	8a7b      	ldrh	r3, [r7, #18]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	4013      	ands	r3, r2
 8004996:	b2da      	uxtb	r2, r3
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	3301      	adds	r3, #1
 80049a0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1c6      	bne.n	800494e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	e000      	b.n	80049ce <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3720      	adds	r7, #32
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049e0:	2300      	movs	r3, #0
 80049e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4ba6      	ldr	r3, [pc, #664]	@ (8004c9c <UART_SetConfig+0x2c4>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	6979      	ldr	r1, [r7, #20]
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a94      	ldr	r2, [pc, #592]	@ (8004ca0 <UART_SetConfig+0x2c8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d120      	bne.n	8004a96 <UART_SetConfig+0xbe>
 8004a54:	4b93      	ldr	r3, [pc, #588]	@ (8004ca4 <UART_SetConfig+0x2cc>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d816      	bhi.n	8004a90 <UART_SetConfig+0xb8>
 8004a62:	a201      	add	r2, pc, #4	@ (adr r2, 8004a68 <UART_SetConfig+0x90>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004a79 	.word	0x08004a79
 8004a6c:	08004a85 	.word	0x08004a85
 8004a70:	08004a7f 	.word	0x08004a7f
 8004a74:	08004a8b 	.word	0x08004a8b
 8004a78:	2301      	movs	r3, #1
 8004a7a:	77fb      	strb	r3, [r7, #31]
 8004a7c:	e150      	b.n	8004d20 <UART_SetConfig+0x348>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	77fb      	strb	r3, [r7, #31]
 8004a82:	e14d      	b.n	8004d20 <UART_SetConfig+0x348>
 8004a84:	2304      	movs	r3, #4
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e14a      	b.n	8004d20 <UART_SetConfig+0x348>
 8004a8a:	2308      	movs	r3, #8
 8004a8c:	77fb      	strb	r3, [r7, #31]
 8004a8e:	e147      	b.n	8004d20 <UART_SetConfig+0x348>
 8004a90:	2310      	movs	r3, #16
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e144      	b.n	8004d20 <UART_SetConfig+0x348>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a83      	ldr	r2, [pc, #524]	@ (8004ca8 <UART_SetConfig+0x2d0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d132      	bne.n	8004b06 <UART_SetConfig+0x12e>
 8004aa0:	4b80      	ldr	r3, [pc, #512]	@ (8004ca4 <UART_SetConfig+0x2cc>)
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa6:	f003 030c 	and.w	r3, r3, #12
 8004aaa:	2b0c      	cmp	r3, #12
 8004aac:	d828      	bhi.n	8004b00 <UART_SetConfig+0x128>
 8004aae:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab4 <UART_SetConfig+0xdc>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004ae9 	.word	0x08004ae9
 8004ab8:	08004b01 	.word	0x08004b01
 8004abc:	08004b01 	.word	0x08004b01
 8004ac0:	08004b01 	.word	0x08004b01
 8004ac4:	08004af5 	.word	0x08004af5
 8004ac8:	08004b01 	.word	0x08004b01
 8004acc:	08004b01 	.word	0x08004b01
 8004ad0:	08004b01 	.word	0x08004b01
 8004ad4:	08004aef 	.word	0x08004aef
 8004ad8:	08004b01 	.word	0x08004b01
 8004adc:	08004b01 	.word	0x08004b01
 8004ae0:	08004b01 	.word	0x08004b01
 8004ae4:	08004afb 	.word	0x08004afb
 8004ae8:	2300      	movs	r3, #0
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e118      	b.n	8004d20 <UART_SetConfig+0x348>
 8004aee:	2302      	movs	r3, #2
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e115      	b.n	8004d20 <UART_SetConfig+0x348>
 8004af4:	2304      	movs	r3, #4
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e112      	b.n	8004d20 <UART_SetConfig+0x348>
 8004afa:	2308      	movs	r3, #8
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e10f      	b.n	8004d20 <UART_SetConfig+0x348>
 8004b00:	2310      	movs	r3, #16
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e10c      	b.n	8004d20 <UART_SetConfig+0x348>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a68      	ldr	r2, [pc, #416]	@ (8004cac <UART_SetConfig+0x2d4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d120      	bne.n	8004b52 <UART_SetConfig+0x17a>
 8004b10:	4b64      	ldr	r3, [pc, #400]	@ (8004ca4 <UART_SetConfig+0x2cc>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b16:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b1a:	2b30      	cmp	r3, #48	@ 0x30
 8004b1c:	d013      	beq.n	8004b46 <UART_SetConfig+0x16e>
 8004b1e:	2b30      	cmp	r3, #48	@ 0x30
 8004b20:	d814      	bhi.n	8004b4c <UART_SetConfig+0x174>
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	d009      	beq.n	8004b3a <UART_SetConfig+0x162>
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d810      	bhi.n	8004b4c <UART_SetConfig+0x174>
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <UART_SetConfig+0x15c>
 8004b2e:	2b10      	cmp	r3, #16
 8004b30:	d006      	beq.n	8004b40 <UART_SetConfig+0x168>
 8004b32:	e00b      	b.n	8004b4c <UART_SetConfig+0x174>
 8004b34:	2300      	movs	r3, #0
 8004b36:	77fb      	strb	r3, [r7, #31]
 8004b38:	e0f2      	b.n	8004d20 <UART_SetConfig+0x348>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	77fb      	strb	r3, [r7, #31]
 8004b3e:	e0ef      	b.n	8004d20 <UART_SetConfig+0x348>
 8004b40:	2304      	movs	r3, #4
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e0ec      	b.n	8004d20 <UART_SetConfig+0x348>
 8004b46:	2308      	movs	r3, #8
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e0e9      	b.n	8004d20 <UART_SetConfig+0x348>
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e0e6      	b.n	8004d20 <UART_SetConfig+0x348>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a56      	ldr	r2, [pc, #344]	@ (8004cb0 <UART_SetConfig+0x2d8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d120      	bne.n	8004b9e <UART_SetConfig+0x1c6>
 8004b5c:	4b51      	ldr	r3, [pc, #324]	@ (8004ca4 <UART_SetConfig+0x2cc>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b66:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b68:	d013      	beq.n	8004b92 <UART_SetConfig+0x1ba>
 8004b6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b6c:	d814      	bhi.n	8004b98 <UART_SetConfig+0x1c0>
 8004b6e:	2b80      	cmp	r3, #128	@ 0x80
 8004b70:	d009      	beq.n	8004b86 <UART_SetConfig+0x1ae>
 8004b72:	2b80      	cmp	r3, #128	@ 0x80
 8004b74:	d810      	bhi.n	8004b98 <UART_SetConfig+0x1c0>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <UART_SetConfig+0x1a8>
 8004b7a:	2b40      	cmp	r3, #64	@ 0x40
 8004b7c:	d006      	beq.n	8004b8c <UART_SetConfig+0x1b4>
 8004b7e:	e00b      	b.n	8004b98 <UART_SetConfig+0x1c0>
 8004b80:	2300      	movs	r3, #0
 8004b82:	77fb      	strb	r3, [r7, #31]
 8004b84:	e0cc      	b.n	8004d20 <UART_SetConfig+0x348>
 8004b86:	2302      	movs	r3, #2
 8004b88:	77fb      	strb	r3, [r7, #31]
 8004b8a:	e0c9      	b.n	8004d20 <UART_SetConfig+0x348>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	77fb      	strb	r3, [r7, #31]
 8004b90:	e0c6      	b.n	8004d20 <UART_SetConfig+0x348>
 8004b92:	2308      	movs	r3, #8
 8004b94:	77fb      	strb	r3, [r7, #31]
 8004b96:	e0c3      	b.n	8004d20 <UART_SetConfig+0x348>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	77fb      	strb	r3, [r7, #31]
 8004b9c:	e0c0      	b.n	8004d20 <UART_SetConfig+0x348>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a44      	ldr	r2, [pc, #272]	@ (8004cb4 <UART_SetConfig+0x2dc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d125      	bne.n	8004bf4 <UART_SetConfig+0x21c>
 8004ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca4 <UART_SetConfig+0x2cc>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bb6:	d017      	beq.n	8004be8 <UART_SetConfig+0x210>
 8004bb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bbc:	d817      	bhi.n	8004bee <UART_SetConfig+0x216>
 8004bbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bc2:	d00b      	beq.n	8004bdc <UART_SetConfig+0x204>
 8004bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bc8:	d811      	bhi.n	8004bee <UART_SetConfig+0x216>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <UART_SetConfig+0x1fe>
 8004bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bd2:	d006      	beq.n	8004be2 <UART_SetConfig+0x20a>
 8004bd4:	e00b      	b.n	8004bee <UART_SetConfig+0x216>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	77fb      	strb	r3, [r7, #31]
 8004bda:	e0a1      	b.n	8004d20 <UART_SetConfig+0x348>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	77fb      	strb	r3, [r7, #31]
 8004be0:	e09e      	b.n	8004d20 <UART_SetConfig+0x348>
 8004be2:	2304      	movs	r3, #4
 8004be4:	77fb      	strb	r3, [r7, #31]
 8004be6:	e09b      	b.n	8004d20 <UART_SetConfig+0x348>
 8004be8:	2308      	movs	r3, #8
 8004bea:	77fb      	strb	r3, [r7, #31]
 8004bec:	e098      	b.n	8004d20 <UART_SetConfig+0x348>
 8004bee:	2310      	movs	r3, #16
 8004bf0:	77fb      	strb	r3, [r7, #31]
 8004bf2:	e095      	b.n	8004d20 <UART_SetConfig+0x348>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a2f      	ldr	r2, [pc, #188]	@ (8004cb8 <UART_SetConfig+0x2e0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d125      	bne.n	8004c4a <UART_SetConfig+0x272>
 8004bfe:	4b29      	ldr	r3, [pc, #164]	@ (8004ca4 <UART_SetConfig+0x2cc>)
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c0c:	d017      	beq.n	8004c3e <UART_SetConfig+0x266>
 8004c0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c12:	d817      	bhi.n	8004c44 <UART_SetConfig+0x26c>
 8004c14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c18:	d00b      	beq.n	8004c32 <UART_SetConfig+0x25a>
 8004c1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c1e:	d811      	bhi.n	8004c44 <UART_SetConfig+0x26c>
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <UART_SetConfig+0x254>
 8004c24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c28:	d006      	beq.n	8004c38 <UART_SetConfig+0x260>
 8004c2a:	e00b      	b.n	8004c44 <UART_SetConfig+0x26c>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	77fb      	strb	r3, [r7, #31]
 8004c30:	e076      	b.n	8004d20 <UART_SetConfig+0x348>
 8004c32:	2302      	movs	r3, #2
 8004c34:	77fb      	strb	r3, [r7, #31]
 8004c36:	e073      	b.n	8004d20 <UART_SetConfig+0x348>
 8004c38:	2304      	movs	r3, #4
 8004c3a:	77fb      	strb	r3, [r7, #31]
 8004c3c:	e070      	b.n	8004d20 <UART_SetConfig+0x348>
 8004c3e:	2308      	movs	r3, #8
 8004c40:	77fb      	strb	r3, [r7, #31]
 8004c42:	e06d      	b.n	8004d20 <UART_SetConfig+0x348>
 8004c44:	2310      	movs	r3, #16
 8004c46:	77fb      	strb	r3, [r7, #31]
 8004c48:	e06a      	b.n	8004d20 <UART_SetConfig+0x348>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004cbc <UART_SetConfig+0x2e4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d138      	bne.n	8004cc6 <UART_SetConfig+0x2ee>
 8004c54:	4b13      	ldr	r3, [pc, #76]	@ (8004ca4 <UART_SetConfig+0x2cc>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004c5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c62:	d017      	beq.n	8004c94 <UART_SetConfig+0x2bc>
 8004c64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c68:	d82a      	bhi.n	8004cc0 <UART_SetConfig+0x2e8>
 8004c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c6e:	d00b      	beq.n	8004c88 <UART_SetConfig+0x2b0>
 8004c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c74:	d824      	bhi.n	8004cc0 <UART_SetConfig+0x2e8>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <UART_SetConfig+0x2aa>
 8004c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7e:	d006      	beq.n	8004c8e <UART_SetConfig+0x2b6>
 8004c80:	e01e      	b.n	8004cc0 <UART_SetConfig+0x2e8>
 8004c82:	2300      	movs	r3, #0
 8004c84:	77fb      	strb	r3, [r7, #31]
 8004c86:	e04b      	b.n	8004d20 <UART_SetConfig+0x348>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e048      	b.n	8004d20 <UART_SetConfig+0x348>
 8004c8e:	2304      	movs	r3, #4
 8004c90:	77fb      	strb	r3, [r7, #31]
 8004c92:	e045      	b.n	8004d20 <UART_SetConfig+0x348>
 8004c94:	2308      	movs	r3, #8
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	e042      	b.n	8004d20 <UART_SetConfig+0x348>
 8004c9a:	bf00      	nop
 8004c9c:	efff69f3 	.word	0xefff69f3
 8004ca0:	40011000 	.word	0x40011000
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	40004400 	.word	0x40004400
 8004cac:	40004800 	.word	0x40004800
 8004cb0:	40004c00 	.word	0x40004c00
 8004cb4:	40005000 	.word	0x40005000
 8004cb8:	40011400 	.word	0x40011400
 8004cbc:	40007800 	.word	0x40007800
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	77fb      	strb	r3, [r7, #31]
 8004cc4:	e02c      	b.n	8004d20 <UART_SetConfig+0x348>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a72      	ldr	r2, [pc, #456]	@ (8004e94 <UART_SetConfig+0x4bc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d125      	bne.n	8004d1c <UART_SetConfig+0x344>
 8004cd0:	4b71      	ldr	r3, [pc, #452]	@ (8004e98 <UART_SetConfig+0x4c0>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004cda:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004cde:	d017      	beq.n	8004d10 <UART_SetConfig+0x338>
 8004ce0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ce4:	d817      	bhi.n	8004d16 <UART_SetConfig+0x33e>
 8004ce6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cea:	d00b      	beq.n	8004d04 <UART_SetConfig+0x32c>
 8004cec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cf0:	d811      	bhi.n	8004d16 <UART_SetConfig+0x33e>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <UART_SetConfig+0x326>
 8004cf6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cfa:	d006      	beq.n	8004d0a <UART_SetConfig+0x332>
 8004cfc:	e00b      	b.n	8004d16 <UART_SetConfig+0x33e>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	77fb      	strb	r3, [r7, #31]
 8004d02:	e00d      	b.n	8004d20 <UART_SetConfig+0x348>
 8004d04:	2302      	movs	r3, #2
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	e00a      	b.n	8004d20 <UART_SetConfig+0x348>
 8004d0a:	2304      	movs	r3, #4
 8004d0c:	77fb      	strb	r3, [r7, #31]
 8004d0e:	e007      	b.n	8004d20 <UART_SetConfig+0x348>
 8004d10:	2308      	movs	r3, #8
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e004      	b.n	8004d20 <UART_SetConfig+0x348>
 8004d16:	2310      	movs	r3, #16
 8004d18:	77fb      	strb	r3, [r7, #31]
 8004d1a:	e001      	b.n	8004d20 <UART_SetConfig+0x348>
 8004d1c:	2310      	movs	r3, #16
 8004d1e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d28:	d15b      	bne.n	8004de2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004d2a:	7ffb      	ldrb	r3, [r7, #31]
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d828      	bhi.n	8004d82 <UART_SetConfig+0x3aa>
 8004d30:	a201      	add	r2, pc, #4	@ (adr r2, 8004d38 <UART_SetConfig+0x360>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d5d 	.word	0x08004d5d
 8004d3c:	08004d65 	.word	0x08004d65
 8004d40:	08004d6d 	.word	0x08004d6d
 8004d44:	08004d83 	.word	0x08004d83
 8004d48:	08004d73 	.word	0x08004d73
 8004d4c:	08004d83 	.word	0x08004d83
 8004d50:	08004d83 	.word	0x08004d83
 8004d54:	08004d83 	.word	0x08004d83
 8004d58:	08004d7b 	.word	0x08004d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d5c:	f7fe fd2a 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 8004d60:	61b8      	str	r0, [r7, #24]
        break;
 8004d62:	e013      	b.n	8004d8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d64:	f7fe fd3a 	bl	80037dc <HAL_RCC_GetPCLK2Freq>
 8004d68:	61b8      	str	r0, [r7, #24]
        break;
 8004d6a:	e00f      	b.n	8004d8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d6c:	4b4b      	ldr	r3, [pc, #300]	@ (8004e9c <UART_SetConfig+0x4c4>)
 8004d6e:	61bb      	str	r3, [r7, #24]
        break;
 8004d70:	e00c      	b.n	8004d8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d72:	f7fe fc0d 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 8004d76:	61b8      	str	r0, [r7, #24]
        break;
 8004d78:	e008      	b.n	8004d8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d7e:	61bb      	str	r3, [r7, #24]
        break;
 8004d80:	e004      	b.n	8004d8c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	77bb      	strb	r3, [r7, #30]
        break;
 8004d8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d074      	beq.n	8004e7c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	005a      	lsls	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	085b      	lsrs	r3, r3, #1
 8004d9c:	441a      	add	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2b0f      	cmp	r3, #15
 8004dac:	d916      	bls.n	8004ddc <UART_SetConfig+0x404>
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db4:	d212      	bcs.n	8004ddc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f023 030f 	bic.w	r3, r3, #15
 8004dbe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	89fb      	ldrh	r3, [r7, #14]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	89fa      	ldrh	r2, [r7, #14]
 8004dd8:	60da      	str	r2, [r3, #12]
 8004dda:	e04f      	b.n	8004e7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	77bb      	strb	r3, [r7, #30]
 8004de0:	e04c      	b.n	8004e7c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004de2:	7ffb      	ldrb	r3, [r7, #31]
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d828      	bhi.n	8004e3a <UART_SetConfig+0x462>
 8004de8:	a201      	add	r2, pc, #4	@ (adr r2, 8004df0 <UART_SetConfig+0x418>)
 8004dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dee:	bf00      	nop
 8004df0:	08004e15 	.word	0x08004e15
 8004df4:	08004e1d 	.word	0x08004e1d
 8004df8:	08004e25 	.word	0x08004e25
 8004dfc:	08004e3b 	.word	0x08004e3b
 8004e00:	08004e2b 	.word	0x08004e2b
 8004e04:	08004e3b 	.word	0x08004e3b
 8004e08:	08004e3b 	.word	0x08004e3b
 8004e0c:	08004e3b 	.word	0x08004e3b
 8004e10:	08004e33 	.word	0x08004e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e14:	f7fe fcce 	bl	80037b4 <HAL_RCC_GetPCLK1Freq>
 8004e18:	61b8      	str	r0, [r7, #24]
        break;
 8004e1a:	e013      	b.n	8004e44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e1c:	f7fe fcde 	bl	80037dc <HAL_RCC_GetPCLK2Freq>
 8004e20:	61b8      	str	r0, [r7, #24]
        break;
 8004e22:	e00f      	b.n	8004e44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e24:	4b1d      	ldr	r3, [pc, #116]	@ (8004e9c <UART_SetConfig+0x4c4>)
 8004e26:	61bb      	str	r3, [r7, #24]
        break;
 8004e28:	e00c      	b.n	8004e44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e2a:	f7fe fbb1 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 8004e2e:	61b8      	str	r0, [r7, #24]
        break;
 8004e30:	e008      	b.n	8004e44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e36:	61bb      	str	r3, [r7, #24]
        break;
 8004e38:	e004      	b.n	8004e44 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	77bb      	strb	r3, [r7, #30]
        break;
 8004e42:	bf00      	nop
    }

    if (pclk != 0U)
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d018      	beq.n	8004e7c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	085a      	lsrs	r2, r3, #1
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	441a      	add	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b0f      	cmp	r3, #15
 8004e62:	d909      	bls.n	8004e78 <UART_SetConfig+0x4a0>
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e6a:	d205      	bcs.n	8004e78 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	e001      	b.n	8004e7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e88:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40007c00 	.word	0x40007c00
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	00f42400 	.word	0x00f42400

08004ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01a      	beq.n	8004fb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f9e:	d10a      	bne.n	8004fb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	605a      	str	r2, [r3, #4]
  }
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ff4:	f7fc faea 	bl	80015cc <HAL_GetTick>
 8004ff8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b08      	cmp	r3, #8
 8005006:	d10e      	bne.n	8005026 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005008:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f81b 	bl	8005052 <UART_WaitOnFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e011      	b.n	800504a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2220      	movs	r2, #32
 800502a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b09c      	sub	sp, #112	@ 0x70
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	603b      	str	r3, [r7, #0]
 800505e:	4613      	mov	r3, r2
 8005060:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005062:	e0a7      	b.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005064:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800506a:	f000 80a3 	beq.w	80051b4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800506e:	f7fc faad 	bl	80015cc <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800507a:	429a      	cmp	r2, r3
 800507c:	d302      	bcc.n	8005084 <UART_WaitOnFlagUntilTimeout+0x32>
 800507e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005080:	2b00      	cmp	r3, #0
 8005082:	d13f      	bne.n	8005104 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005094:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005098:	667b      	str	r3, [r7, #100]	@ 0x64
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80050a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80050b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e6      	bne.n	8005084 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3308      	adds	r3, #8
 80050bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c8:	f023 0301 	bic.w	r3, r3, #1
 80050cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3308      	adds	r3, #8
 80050d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80050d6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80050d8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80050dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050de:	e841 2300 	strex	r3, r2, [r1]
 80050e2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80050e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1e5      	bne.n	80050b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2220      	movs	r2, #32
 80050ee:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e068      	b.n	80051d6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b00      	cmp	r3, #0
 8005110:	d050      	beq.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800511c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005120:	d148      	bne.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800512a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005140:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800514a:	637b      	str	r3, [r7, #52]	@ 0x34
 800514c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005150:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e6      	bne.n	800512c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3308      	adds	r3, #8
 8005164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	613b      	str	r3, [r7, #16]
   return(result);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3308      	adds	r3, #8
 800517c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800517e:	623a      	str	r2, [r7, #32]
 8005180:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	69f9      	ldr	r1, [r7, #28]
 8005184:	6a3a      	ldr	r2, [r7, #32]
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	61bb      	str	r3, [r7, #24]
   return(result);
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e5      	bne.n	800515e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e010      	b.n	80051d6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69da      	ldr	r2, [r3, #28]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	4013      	ands	r3, r2
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	bf0c      	ite	eq
 80051c4:	2301      	moveq	r3, #1
 80051c6:	2300      	movne	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	f43f af48 	beq.w	8005064 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3770      	adds	r7, #112	@ 0x70
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051e0:	b084      	sub	sp, #16
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	f107 001c 	add.w	r0, r7, #28
 80051ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d120      	bne.n	800523a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	4b20      	ldr	r3, [pc, #128]	@ (800528c <USB_CoreInit+0xac>)
 800520a:	4013      	ands	r3, r2
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800521c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800521e:	2b01      	cmp	r3, #1
 8005220:	d105      	bne.n	800522e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fa96 	bl	8005760 <USB_CoreReset>
 8005234:	4603      	mov	r3, r0
 8005236:	73fb      	strb	r3, [r7, #15]
 8005238:	e010      	b.n	800525c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa8a 	bl	8005760 <USB_CoreReset>
 800524c:	4603      	mov	r3, r0
 800524e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005254:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	2b01      	cmp	r3, #1
 8005260:	d10b      	bne.n	800527a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f043 0206 	orr.w	r2, r3, #6
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f043 0220 	orr.w	r2, r3, #32
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800527a:	7bfb      	ldrb	r3, [r7, #15]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005286:	b004      	add	sp, #16
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	ffbdffbf 	.word	0xffbdffbf

08005290 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f023 0201 	bic.w	r2, r3, #1
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	460b      	mov	r3, r1
 80052bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052ce:	78fb      	ldrb	r3, [r7, #3]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d115      	bne.n	8005300 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052e0:	2001      	movs	r0, #1
 80052e2:	f7fc f97f 	bl	80015e4 <HAL_Delay>
      ms++;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3301      	adds	r3, #1
 80052ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fa29 	bl	8005744 <USB_GetMode>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d01e      	beq.n	8005336 <USB_SetCurrentMode+0x84>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2b31      	cmp	r3, #49	@ 0x31
 80052fc:	d9f0      	bls.n	80052e0 <USB_SetCurrentMode+0x2e>
 80052fe:	e01a      	b.n	8005336 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d115      	bne.n	8005332 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005312:	2001      	movs	r0, #1
 8005314:	f7fc f966 	bl	80015e4 <HAL_Delay>
      ms++;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3301      	adds	r3, #1
 800531c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fa10 	bl	8005744 <USB_GetMode>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <USB_SetCurrentMode+0x84>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b31      	cmp	r3, #49	@ 0x31
 800532e:	d9f0      	bls.n	8005312 <USB_SetCurrentMode+0x60>
 8005330:	e001      	b.n	8005336 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e005      	b.n	8005342 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b32      	cmp	r3, #50	@ 0x32
 800533a:	d101      	bne.n	8005340 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800534c:	b084      	sub	sp, #16
 800534e:	b580      	push	{r7, lr}
 8005350:	b086      	sub	sp, #24
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800535a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005366:	2300      	movs	r3, #0
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	e009      	b.n	8005380 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	3340      	adds	r3, #64	@ 0x40
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	2200      	movs	r2, #0
 8005378:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	3301      	adds	r3, #1
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b0e      	cmp	r3, #14
 8005384:	d9f2      	bls.n	800536c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005388:	2b00      	cmp	r3, #0
 800538a:	d11c      	bne.n	80053c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800539a:	f043 0302 	orr.w	r3, r3, #2
 800539e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e005      	b.n	80053d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053d8:	461a      	mov	r2, r3
 80053da:	2300      	movs	r3, #0
 80053dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e4:	4619      	mov	r1, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ec:	461a      	mov	r2, r3
 80053ee:	680b      	ldr	r3, [r1, #0]
 80053f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d10c      	bne.n	8005412 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d104      	bne.n	8005408 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053fe:	2100      	movs	r1, #0
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f965 	bl	80056d0 <USB_SetDevSpeed>
 8005406:	e008      	b.n	800541a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005408:	2101      	movs	r1, #1
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f960 	bl	80056d0 <USB_SetDevSpeed>
 8005410:	e003      	b.n	800541a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005412:	2103      	movs	r1, #3
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f95b 	bl	80056d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800541a:	2110      	movs	r1, #16
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f8f3 	bl	8005608 <USB_FlushTxFifo>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f91f 	bl	8005670 <USB_FlushRxFifo>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005442:	461a      	mov	r2, r3
 8005444:	2300      	movs	r3, #0
 8005446:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800544e:	461a      	mov	r2, r3
 8005450:	2300      	movs	r3, #0
 8005452:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800545a:	461a      	mov	r2, r3
 800545c:	2300      	movs	r3, #0
 800545e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005460:	2300      	movs	r3, #0
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	e043      	b.n	80054ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005478:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800547c:	d118      	bne.n	80054b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005490:	461a      	mov	r2, r3
 8005492:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	e013      	b.n	80054c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a6:	461a      	mov	r2, r3
 80054a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e008      	b.n	80054c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054bc:	461a      	mov	r2, r3
 80054be:	2300      	movs	r3, #0
 80054c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ce:	461a      	mov	r2, r3
 80054d0:	2300      	movs	r3, #0
 80054d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054e0:	461a      	mov	r2, r3
 80054e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	3301      	adds	r3, #1
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d3b7      	bcc.n	8005466 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054f6:	2300      	movs	r3, #0
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	e043      	b.n	8005584 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800550e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005512:	d118      	bne.n	8005546 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10a      	bne.n	8005530 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005526:	461a      	mov	r2, r3
 8005528:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	e013      	b.n	8005558 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800553c:	461a      	mov	r2, r3
 800553e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e008      	b.n	8005558 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005552:	461a      	mov	r2, r3
 8005554:	2300      	movs	r3, #0
 8005556:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005564:	461a      	mov	r2, r3
 8005566:	2300      	movs	r3, #0
 8005568:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005576:	461a      	mov	r2, r3
 8005578:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800557c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	3301      	adds	r3, #1
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	429a      	cmp	r2, r3
 800558a:	d3b7      	bcc.n	80054fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800559a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800559e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80055ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d105      	bne.n	80055c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f043 0210 	orr.w	r2, r3, #16
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699a      	ldr	r2, [r3, #24]
 80055c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005600 <USB_DevInit+0x2b4>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f043 0208 	orr.w	r2, r3, #8
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d105      	bne.n	80055f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699a      	ldr	r2, [r3, #24]
 80055e8:	4b06      	ldr	r3, [pc, #24]	@ (8005604 <USB_DevInit+0x2b8>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055fc:	b004      	add	sp, #16
 80055fe:	4770      	bx	lr
 8005600:	803c3800 	.word	0x803c3800
 8005604:	40000004 	.word	0x40000004

08005608 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3301      	adds	r3, #1
 800561a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4a13      	ldr	r2, [pc, #76]	@ (800566c <USB_FlushTxFifo+0x64>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d901      	bls.n	8005628 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e01b      	b.n	8005660 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	daf2      	bge.n	8005616 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	019b      	lsls	r3, r3, #6
 8005638:	f043 0220 	orr.w	r2, r3, #32
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4a08      	ldr	r2, [pc, #32]	@ (800566c <USB_FlushTxFifo+0x64>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d901      	bls.n	8005652 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e006      	b.n	8005660 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b20      	cmp	r3, #32
 800565c:	d0f0      	beq.n	8005640 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	00030d40 	.word	0x00030d40

08005670 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3301      	adds	r3, #1
 8005680:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4a11      	ldr	r2, [pc, #68]	@ (80056cc <USB_FlushRxFifo+0x5c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d901      	bls.n	800568e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e018      	b.n	80056c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	daf2      	bge.n	800567c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2210      	movs	r2, #16
 800569e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3301      	adds	r3, #1
 80056a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4a08      	ldr	r2, [pc, #32]	@ (80056cc <USB_FlushRxFifo+0x5c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d901      	bls.n	80056b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e006      	b.n	80056c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d0f0      	beq.n	80056a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	00030d40 	.word	0x00030d40

080056d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	68f9      	ldr	r1, [r7, #12]
 80056ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056f0:	4313      	orrs	r3, r2
 80056f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800571c:	f023 0303 	bic.w	r3, r3, #3
 8005720:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005730:	f043 0302 	orr.w	r3, r3, #2
 8005734:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	f003 0301 	and.w	r3, r3, #1
}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3301      	adds	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4a13      	ldr	r2, [pc, #76]	@ (80057c4 <USB_CoreReset+0x64>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e01b      	b.n	80057b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	daf2      	bge.n	800576c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f043 0201 	orr.w	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3301      	adds	r3, #1
 800579a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4a09      	ldr	r2, [pc, #36]	@ (80057c4 <USB_CoreReset+0x64>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d901      	bls.n	80057a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e006      	b.n	80057b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d0f0      	beq.n	8005796 <USB_CoreReset+0x36>

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	00030d40 	.word	0x00030d40

080057c8 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af04      	add	r7, sp, #16
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80057d4:	230a      	movs	r3, #10
 80057d6:	9302      	str	r3, [sp, #8]
 80057d8:	2301      	movs	r3, #1
 80057da:	9301      	str	r3, [sp, #4]
 80057dc:	1cfb      	adds	r3, r7, #3
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	2301      	movs	r3, #1
 80057e2:	2200      	movs	r2, #0
 80057e4:	2178      	movs	r1, #120	@ 0x78
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fc fdf8 	bl	80023dc <HAL_I2C_Mem_Write>
 80057ec:	4603      	mov	r3, r0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8005800:	2064      	movs	r0, #100	@ 0x64
 8005802:	f7fb feef 	bl	80015e4 <HAL_Delay>
    int status = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800580a:	21ae      	movs	r1, #174	@ 0xae
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff ffdb 	bl	80057c8 <ssd1306_WriteCommand>
 8005812:	4603      	mov	r3, r0
 8005814:	461a      	mov	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 800581c:	2120      	movs	r1, #32
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff ffd2 	bl	80057c8 <ssd1306_WriteCommand>
 8005824:	4603      	mov	r3, r0
 8005826:	461a      	mov	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800582e:	2110      	movs	r1, #16
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff ffc9 	bl	80057c8 <ssd1306_WriteCommand>
 8005836:	4603      	mov	r3, r0
 8005838:	461a      	mov	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4413      	add	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8005840:	21b0      	movs	r1, #176	@ 0xb0
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff ffc0 	bl	80057c8 <ssd1306_WriteCommand>
 8005848:	4603      	mov	r3, r0
 800584a:	461a      	mov	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4413      	add	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8005852:	21c8      	movs	r1, #200	@ 0xc8
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff ffb7 	bl	80057c8 <ssd1306_WriteCommand>
 800585a:	4603      	mov	r3, r0
 800585c:	461a      	mov	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4413      	add	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8005864:	2100      	movs	r1, #0
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff ffae 	bl	80057c8 <ssd1306_WriteCommand>
 800586c:	4603      	mov	r3, r0
 800586e:	461a      	mov	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8005876:	2110      	movs	r1, #16
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff ffa5 	bl	80057c8 <ssd1306_WriteCommand>
 800587e:	4603      	mov	r3, r0
 8005880:	461a      	mov	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4413      	add	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8005888:	2140      	movs	r1, #64	@ 0x40
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff ff9c 	bl	80057c8 <ssd1306_WriteCommand>
 8005890:	4603      	mov	r3, r0
 8005892:	461a      	mov	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 800589a:	2181      	movs	r1, #129	@ 0x81
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff ff93 	bl	80057c8 <ssd1306_WriteCommand>
 80058a2:	4603      	mov	r3, r0
 80058a4:	461a      	mov	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4413      	add	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 80058ac:	21ff      	movs	r1, #255	@ 0xff
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff ff8a 	bl	80057c8 <ssd1306_WriteCommand>
 80058b4:	4603      	mov	r3, r0
 80058b6:	461a      	mov	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80058be:	21a1      	movs	r1, #161	@ 0xa1
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff ff81 	bl	80057c8 <ssd1306_WriteCommand>
 80058c6:	4603      	mov	r3, r0
 80058c8:	461a      	mov	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80058d0:	21a6      	movs	r1, #166	@ 0xa6
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff ff78 	bl	80057c8 <ssd1306_WriteCommand>
 80058d8:	4603      	mov	r3, r0
 80058da:	461a      	mov	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80058e2:	21a8      	movs	r1, #168	@ 0xa8
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff ff6f 	bl	80057c8 <ssd1306_WriteCommand>
 80058ea:	4603      	mov	r3, r0
 80058ec:	461a      	mov	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4413      	add	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 80058f4:	213f      	movs	r1, #63	@ 0x3f
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff ff66 	bl	80057c8 <ssd1306_WriteCommand>
 80058fc:	4603      	mov	r3, r0
 80058fe:	461a      	mov	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005906:	21a4      	movs	r1, #164	@ 0xa4
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff ff5d 	bl	80057c8 <ssd1306_WriteCommand>
 800590e:	4603      	mov	r3, r0
 8005910:	461a      	mov	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8005918:	21d3      	movs	r1, #211	@ 0xd3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff ff54 	bl	80057c8 <ssd1306_WriteCommand>
 8005920:	4603      	mov	r3, r0
 8005922:	461a      	mov	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4413      	add	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 800592a:	2100      	movs	r1, #0
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7ff ff4b 	bl	80057c8 <ssd1306_WriteCommand>
 8005932:	4603      	mov	r3, r0
 8005934:	461a      	mov	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 800593c:	21d5      	movs	r1, #213	@ 0xd5
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff ff42 	bl	80057c8 <ssd1306_WriteCommand>
 8005944:	4603      	mov	r3, r0
 8005946:	461a      	mov	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 800594e:	21f0      	movs	r1, #240	@ 0xf0
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff ff39 	bl	80057c8 <ssd1306_WriteCommand>
 8005956:	4603      	mov	r3, r0
 8005958:	461a      	mov	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8005960:	21d9      	movs	r1, #217	@ 0xd9
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff ff30 	bl	80057c8 <ssd1306_WriteCommand>
 8005968:	4603      	mov	r3, r0
 800596a:	461a      	mov	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8005972:	2122      	movs	r1, #34	@ 0x22
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff ff27 	bl	80057c8 <ssd1306_WriteCommand>
 800597a:	4603      	mov	r3, r0
 800597c:	461a      	mov	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8005984:	21da      	movs	r1, #218	@ 0xda
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7ff ff1e 	bl	80057c8 <ssd1306_WriteCommand>
 800598c:	4603      	mov	r3, r0
 800598e:	461a      	mov	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8005996:	2112      	movs	r1, #18
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff ff15 	bl	80057c8 <ssd1306_WriteCommand>
 800599e:	4603      	mov	r3, r0
 80059a0:	461a      	mov	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4413      	add	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 80059a8:	21db      	movs	r1, #219	@ 0xdb
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff ff0c 	bl	80057c8 <ssd1306_WriteCommand>
 80059b0:	4603      	mov	r3, r0
 80059b2:	461a      	mov	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4413      	add	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 80059ba:	2120      	movs	r1, #32
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff ff03 	bl	80057c8 <ssd1306_WriteCommand>
 80059c2:	4603      	mov	r3, r0
 80059c4:	461a      	mov	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 80059cc:	218d      	movs	r1, #141	@ 0x8d
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff fefa 	bl	80057c8 <ssd1306_WriteCommand>
 80059d4:	4603      	mov	r3, r0
 80059d6:	461a      	mov	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 80059de:	2114      	movs	r1, #20
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7ff fef1 	bl	80057c8 <ssd1306_WriteCommand>
 80059e6:	4603      	mov	r3, r0
 80059e8:	461a      	mov	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 80059f0:	21af      	movs	r1, #175	@ 0xaf
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff fee8 	bl	80057c8 <ssd1306_WriteCommand>
 80059f8:	4603      	mov	r3, r0
 80059fa:	461a      	mov	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <ssd1306_Init+0x214>
        return 1;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e00f      	b.n	8005a2c <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	f000 f813 	bl	8005a38 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f834 	bl	8005a80 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005a18:	4b06      	ldr	r3, [pc, #24]	@ (8005a34 <ssd1306_Init+0x23c>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005a1e:	4b05      	ldr	r3, [pc, #20]	@ (8005a34 <ssd1306_Init+0x23c>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8005a24:	4b03      	ldr	r3, [pc, #12]	@ (8005a34 <ssd1306_Init+0x23c>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	715a      	strb	r2, [r3, #5]

    return 0;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	2000103c 	.word	0x2000103c

08005a38 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	e00d      	b.n	8005a64 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <ssd1306_Fill+0x1a>
 8005a4e:	2100      	movs	r1, #0
 8005a50:	e000      	b.n	8005a54 <ssd1306_Fill+0x1c>
 8005a52:	21ff      	movs	r1, #255	@ 0xff
 8005a54:	4a09      	ldr	r2, [pc, #36]	@ (8005a7c <ssd1306_Fill+0x44>)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	460a      	mov	r2, r1
 8005a5c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3301      	adds	r3, #1
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a6a:	d3ed      	bcc.n	8005a48 <ssd1306_Fill+0x10>
    }
}
 8005a6c:	bf00      	nop
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	20000c3c 	.word	0x20000c3c

08005a80 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af04      	add	r7, sp, #16
 8005a86:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8005a88:	2300      	movs	r3, #0
 8005a8a:	73fb      	strb	r3, [r7, #15]
 8005a8c:	e020      	b.n	8005ad0 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	3b50      	subs	r3, #80	@ 0x50
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff fe96 	bl	80057c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff fe92 	bl	80057c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8005aa4:	2110      	movs	r1, #16
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff fe8e 	bl	80057c8 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	01db      	lsls	r3, r3, #7
 8005ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8005ae0 <ssd1306_UpdateScreen+0x60>)
 8005ab2:	4413      	add	r3, r2
 8005ab4:	2264      	movs	r2, #100	@ 0x64
 8005ab6:	9202      	str	r2, [sp, #8]
 8005ab8:	2280      	movs	r2, #128	@ 0x80
 8005aba:	9201      	str	r2, [sp, #4]
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	2301      	movs	r3, #1
 8005ac0:	2240      	movs	r2, #64	@ 0x40
 8005ac2:	2178      	movs	r1, #120	@ 0x78
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7fc fc89 	bl	80023dc <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	3301      	adds	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	2b07      	cmp	r3, #7
 8005ad4:	d9db      	bls.n	8005a8e <ssd1306_UpdateScreen+0xe>
    }
}
 8005ad6:	bf00      	nop
 8005ad8:	bf00      	nop
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	20000c3c 	.word	0x20000c3c

08005ae4 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	71fb      	strb	r3, [r7, #7]
 8005aee:	460b      	mov	r3, r1
 8005af0:	71bb      	strb	r3, [r7, #6]
 8005af2:	4613      	mov	r3, r2
 8005af4:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8005af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	db48      	blt.n	8005b90 <ssd1306_DrawPixel+0xac>
 8005afe:	79bb      	ldrb	r3, [r7, #6]
 8005b00:	2b3f      	cmp	r3, #63	@ 0x3f
 8005b02:	d845      	bhi.n	8005b90 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8005b04:	4b25      	ldr	r3, [pc, #148]	@ (8005b9c <ssd1306_DrawPixel+0xb8>)
 8005b06:	791b      	ldrb	r3, [r3, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d006      	beq.n	8005b1a <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8005b0c:	797b      	ldrb	r3, [r7, #5]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bf0c      	ite	eq
 8005b12:	2301      	moveq	r3, #1
 8005b14:	2300      	movne	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8005b1a:	797b      	ldrb	r3, [r7, #5]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d11a      	bne.n	8005b56 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005b20:	79fa      	ldrb	r2, [r7, #7]
 8005b22:	79bb      	ldrb	r3, [r7, #6]
 8005b24:	08db      	lsrs	r3, r3, #3
 8005b26:	b2d8      	uxtb	r0, r3
 8005b28:	4603      	mov	r3, r0
 8005b2a:	01db      	lsls	r3, r3, #7
 8005b2c:	4413      	add	r3, r2
 8005b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba0 <ssd1306_DrawPixel+0xbc>)
 8005b30:	5cd3      	ldrb	r3, [r2, r3]
 8005b32:	b25a      	sxtb	r2, r3
 8005b34:	79bb      	ldrb	r3, [r7, #6]
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b40:	b25b      	sxtb	r3, r3
 8005b42:	4313      	orrs	r3, r2
 8005b44:	b259      	sxtb	r1, r3
 8005b46:	79fa      	ldrb	r2, [r7, #7]
 8005b48:	4603      	mov	r3, r0
 8005b4a:	01db      	lsls	r3, r3, #7
 8005b4c:	4413      	add	r3, r2
 8005b4e:	b2c9      	uxtb	r1, r1
 8005b50:	4a13      	ldr	r2, [pc, #76]	@ (8005ba0 <ssd1306_DrawPixel+0xbc>)
 8005b52:	54d1      	strb	r1, [r2, r3]
 8005b54:	e01d      	b.n	8005b92 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005b56:	79fa      	ldrb	r2, [r7, #7]
 8005b58:	79bb      	ldrb	r3, [r7, #6]
 8005b5a:	08db      	lsrs	r3, r3, #3
 8005b5c:	b2d8      	uxtb	r0, r3
 8005b5e:	4603      	mov	r3, r0
 8005b60:	01db      	lsls	r3, r3, #7
 8005b62:	4413      	add	r3, r2
 8005b64:	4a0e      	ldr	r2, [pc, #56]	@ (8005ba0 <ssd1306_DrawPixel+0xbc>)
 8005b66:	5cd3      	ldrb	r3, [r2, r3]
 8005b68:	b25a      	sxtb	r2, r3
 8005b6a:	79bb      	ldrb	r3, [r7, #6]
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	2101      	movs	r1, #1
 8005b72:	fa01 f303 	lsl.w	r3, r1, r3
 8005b76:	b25b      	sxtb	r3, r3
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	b25b      	sxtb	r3, r3
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	b259      	sxtb	r1, r3
 8005b80:	79fa      	ldrb	r2, [r7, #7]
 8005b82:	4603      	mov	r3, r0
 8005b84:	01db      	lsls	r3, r3, #7
 8005b86:	4413      	add	r3, r2
 8005b88:	b2c9      	uxtb	r1, r1
 8005b8a:	4a05      	ldr	r2, [pc, #20]	@ (8005ba0 <ssd1306_DrawPixel+0xbc>)
 8005b8c:	54d1      	strb	r1, [r2, r3]
 8005b8e:	e000      	b.n	8005b92 <ssd1306_DrawPixel+0xae>
        return;
 8005b90:	bf00      	nop
    }
}
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	2000103c 	.word	0x2000103c
 8005ba0:	20000c3c 	.word	0x20000c3c

08005ba4 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8005ba4:	b590      	push	{r4, r7, lr}
 8005ba6:	b089      	sub	sp, #36	@ 0x24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	4604      	mov	r4, r0
 8005bac:	1d38      	adds	r0, r7, #4
 8005bae:	e880 0006 	stmia.w	r0, {r1, r2}
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	4623      	mov	r3, r4
 8005bb6:	73fb      	strb	r3, [r7, #15]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005bbc:	4b38      	ldr	r3, [pc, #224]	@ (8005ca0 <ssd1306_WriteChar+0xfc>)
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	793b      	ldrb	r3, [r7, #4]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bc8:	dc06      	bgt.n	8005bd8 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8005bca:	4b35      	ldr	r3, [pc, #212]	@ (8005ca0 <ssd1306_WriteChar+0xfc>)
 8005bcc:	885b      	ldrh	r3, [r3, #2]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	797b      	ldrb	r3, [r7, #5]
 8005bd2:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005bd4:	2b3f      	cmp	r3, #63	@ 0x3f
 8005bd6:	dd01      	ble.n	8005bdc <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	e05c      	b.n	8005c96 <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	61fb      	str	r3, [r7, #28]
 8005be0:	e04c      	b.n	8005c7c <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	3b20      	subs	r3, #32
 8005be8:	7979      	ldrb	r1, [r7, #5]
 8005bea:	fb01 f303 	mul.w	r3, r1, r3
 8005bee:	4619      	mov	r1, r3
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	440b      	add	r3, r1
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	4413      	add	r3, r2
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61bb      	str	r3, [r7, #24]
 8005c00:	e034      	b.n	8005c6c <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d012      	beq.n	8005c38 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005c12:	4b23      	ldr	r3, [pc, #140]	@ (8005ca0 <ssd1306_WriteChar+0xfc>)
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	b2d8      	uxtb	r0, r3
 8005c20:	4b1f      	ldr	r3, [pc, #124]	@ (8005ca0 <ssd1306_WriteChar+0xfc>)
 8005c22:	885b      	ldrh	r3, [r3, #2]
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	4413      	add	r3, r2
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	7bba      	ldrb	r2, [r7, #14]
 8005c30:	4619      	mov	r1, r3
 8005c32:	f7ff ff57 	bl	8005ae4 <ssd1306_DrawPixel>
 8005c36:	e016      	b.n	8005c66 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005c38:	4b19      	ldr	r3, [pc, #100]	@ (8005ca0 <ssd1306_WriteChar+0xfc>)
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	4413      	add	r3, r2
 8005c44:	b2d8      	uxtb	r0, r3
 8005c46:	4b16      	ldr	r3, [pc, #88]	@ (8005ca0 <ssd1306_WriteChar+0xfc>)
 8005c48:	885b      	ldrh	r3, [r3, #2]
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	4413      	add	r3, r2
 8005c52:	b2d9      	uxtb	r1, r3
 8005c54:	7bbb      	ldrb	r3, [r7, #14]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	bf0c      	ite	eq
 8005c5a:	2301      	moveq	r3, #1
 8005c5c:	2300      	movne	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	f7ff ff3f 	bl	8005ae4 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	793b      	ldrb	r3, [r7, #4]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d3c5      	bcc.n	8005c02 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	797b      	ldrb	r3, [r7, #5]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d3ad      	bcc.n	8005be2 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005c86:	4b06      	ldr	r3, [pc, #24]	@ (8005ca0 <ssd1306_WriteChar+0xfc>)
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	793a      	ldrb	r2, [r7, #4]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	4b03      	ldr	r3, [pc, #12]	@ (8005ca0 <ssd1306_WriteChar+0xfc>)
 8005c92:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3724      	adds	r7, #36	@ 0x24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd90      	pop	{r4, r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	2000103c 	.word	0x2000103c

08005ca4 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	1d38      	adds	r0, r7, #4
 8005cae:	e880 0006 	stmia.w	r0, {r1, r2}
 8005cb2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8005cb4:	e012      	b.n	8005cdc <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	7818      	ldrb	r0, [r3, #0]
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	1d3a      	adds	r2, r7, #4
 8005cbe:	ca06      	ldmia	r2, {r1, r2}
 8005cc0:	f7ff ff70 	bl	8005ba4 <ssd1306_WriteChar>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d002      	beq.n	8005cd6 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	e008      	b.n	8005ce8 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	60fb      	str	r3, [r7, #12]
    while (*str)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e8      	bne.n	8005cb6 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	460a      	mov	r2, r1
 8005cfa:	71fb      	strb	r3, [r7, #7]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005d00:	79fb      	ldrb	r3, [r7, #7]
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	4b05      	ldr	r3, [pc, #20]	@ (8005d1c <ssd1306_SetCursor+0x2c>)
 8005d06:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005d08:	79bb      	ldrb	r3, [r7, #6]
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	4b03      	ldr	r3, [pc, #12]	@ (8005d1c <ssd1306_SetCursor+0x2c>)
 8005d0e:	805a      	strh	r2, [r3, #2]
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	2000103c 	.word	0x2000103c

08005d20 <std>:
 8005d20:	2300      	movs	r3, #0
 8005d22:	b510      	push	{r4, lr}
 8005d24:	4604      	mov	r4, r0
 8005d26:	e9c0 3300 	strd	r3, r3, [r0]
 8005d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d2e:	6083      	str	r3, [r0, #8]
 8005d30:	8181      	strh	r1, [r0, #12]
 8005d32:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d34:	81c2      	strh	r2, [r0, #14]
 8005d36:	6183      	str	r3, [r0, #24]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	305c      	adds	r0, #92	@ 0x5c
 8005d3e:	f000 f921 	bl	8005f84 <memset>
 8005d42:	4b0d      	ldr	r3, [pc, #52]	@ (8005d78 <std+0x58>)
 8005d44:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d46:	4b0d      	ldr	r3, [pc, #52]	@ (8005d7c <std+0x5c>)
 8005d48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d80 <std+0x60>)
 8005d4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d84 <std+0x64>)
 8005d50:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d52:	4b0d      	ldr	r3, [pc, #52]	@ (8005d88 <std+0x68>)
 8005d54:	6224      	str	r4, [r4, #32]
 8005d56:	429c      	cmp	r4, r3
 8005d58:	d006      	beq.n	8005d68 <std+0x48>
 8005d5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d5e:	4294      	cmp	r4, r2
 8005d60:	d002      	beq.n	8005d68 <std+0x48>
 8005d62:	33d0      	adds	r3, #208	@ 0xd0
 8005d64:	429c      	cmp	r4, r3
 8005d66:	d105      	bne.n	8005d74 <std+0x54>
 8005d68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d70:	f000 b93a 	b.w	8005fe8 <__retarget_lock_init_recursive>
 8005d74:	bd10      	pop	{r4, pc}
 8005d76:	bf00      	nop
 8005d78:	08006841 	.word	0x08006841
 8005d7c:	08006863 	.word	0x08006863
 8005d80:	0800689b 	.word	0x0800689b
 8005d84:	080068bf 	.word	0x080068bf
 8005d88:	20001044 	.word	0x20001044

08005d8c <stdio_exit_handler>:
 8005d8c:	4a02      	ldr	r2, [pc, #8]	@ (8005d98 <stdio_exit_handler+0xc>)
 8005d8e:	4903      	ldr	r1, [pc, #12]	@ (8005d9c <stdio_exit_handler+0x10>)
 8005d90:	4803      	ldr	r0, [pc, #12]	@ (8005da0 <stdio_exit_handler+0x14>)
 8005d92:	f000 b869 	b.w	8005e68 <_fwalk_sglue>
 8005d96:	bf00      	nop
 8005d98:	2000001c 	.word	0x2000001c
 8005d9c:	080067d9 	.word	0x080067d9
 8005da0:	2000002c 	.word	0x2000002c

08005da4 <cleanup_stdio>:
 8005da4:	6841      	ldr	r1, [r0, #4]
 8005da6:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd8 <cleanup_stdio+0x34>)
 8005da8:	4299      	cmp	r1, r3
 8005daa:	b510      	push	{r4, lr}
 8005dac:	4604      	mov	r4, r0
 8005dae:	d001      	beq.n	8005db4 <cleanup_stdio+0x10>
 8005db0:	f000 fd12 	bl	80067d8 <_fflush_r>
 8005db4:	68a1      	ldr	r1, [r4, #8]
 8005db6:	4b09      	ldr	r3, [pc, #36]	@ (8005ddc <cleanup_stdio+0x38>)
 8005db8:	4299      	cmp	r1, r3
 8005dba:	d002      	beq.n	8005dc2 <cleanup_stdio+0x1e>
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f000 fd0b 	bl	80067d8 <_fflush_r>
 8005dc2:	68e1      	ldr	r1, [r4, #12]
 8005dc4:	4b06      	ldr	r3, [pc, #24]	@ (8005de0 <cleanup_stdio+0x3c>)
 8005dc6:	4299      	cmp	r1, r3
 8005dc8:	d004      	beq.n	8005dd4 <cleanup_stdio+0x30>
 8005dca:	4620      	mov	r0, r4
 8005dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd0:	f000 bd02 	b.w	80067d8 <_fflush_r>
 8005dd4:	bd10      	pop	{r4, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20001044 	.word	0x20001044
 8005ddc:	200010ac 	.word	0x200010ac
 8005de0:	20001114 	.word	0x20001114

08005de4 <global_stdio_init.part.0>:
 8005de4:	b510      	push	{r4, lr}
 8005de6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e14 <global_stdio_init.part.0+0x30>)
 8005de8:	4c0b      	ldr	r4, [pc, #44]	@ (8005e18 <global_stdio_init.part.0+0x34>)
 8005dea:	4a0c      	ldr	r2, [pc, #48]	@ (8005e1c <global_stdio_init.part.0+0x38>)
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	4620      	mov	r0, r4
 8005df0:	2200      	movs	r2, #0
 8005df2:	2104      	movs	r1, #4
 8005df4:	f7ff ff94 	bl	8005d20 <std>
 8005df8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	2109      	movs	r1, #9
 8005e00:	f7ff ff8e 	bl	8005d20 <std>
 8005e04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e08:	2202      	movs	r2, #2
 8005e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e0e:	2112      	movs	r1, #18
 8005e10:	f7ff bf86 	b.w	8005d20 <std>
 8005e14:	2000117c 	.word	0x2000117c
 8005e18:	20001044 	.word	0x20001044
 8005e1c:	08005d8d 	.word	0x08005d8d

08005e20 <__sfp_lock_acquire>:
 8005e20:	4801      	ldr	r0, [pc, #4]	@ (8005e28 <__sfp_lock_acquire+0x8>)
 8005e22:	f000 b8e2 	b.w	8005fea <__retarget_lock_acquire_recursive>
 8005e26:	bf00      	nop
 8005e28:	20001181 	.word	0x20001181

08005e2c <__sfp_lock_release>:
 8005e2c:	4801      	ldr	r0, [pc, #4]	@ (8005e34 <__sfp_lock_release+0x8>)
 8005e2e:	f000 b8dd 	b.w	8005fec <__retarget_lock_release_recursive>
 8005e32:	bf00      	nop
 8005e34:	20001181 	.word	0x20001181

08005e38 <__sinit>:
 8005e38:	b510      	push	{r4, lr}
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	f7ff fff0 	bl	8005e20 <__sfp_lock_acquire>
 8005e40:	6a23      	ldr	r3, [r4, #32]
 8005e42:	b11b      	cbz	r3, 8005e4c <__sinit+0x14>
 8005e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e48:	f7ff bff0 	b.w	8005e2c <__sfp_lock_release>
 8005e4c:	4b04      	ldr	r3, [pc, #16]	@ (8005e60 <__sinit+0x28>)
 8005e4e:	6223      	str	r3, [r4, #32]
 8005e50:	4b04      	ldr	r3, [pc, #16]	@ (8005e64 <__sinit+0x2c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f5      	bne.n	8005e44 <__sinit+0xc>
 8005e58:	f7ff ffc4 	bl	8005de4 <global_stdio_init.part.0>
 8005e5c:	e7f2      	b.n	8005e44 <__sinit+0xc>
 8005e5e:	bf00      	nop
 8005e60:	08005da5 	.word	0x08005da5
 8005e64:	2000117c 	.word	0x2000117c

08005e68 <_fwalk_sglue>:
 8005e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e6c:	4607      	mov	r7, r0
 8005e6e:	4688      	mov	r8, r1
 8005e70:	4614      	mov	r4, r2
 8005e72:	2600      	movs	r6, #0
 8005e74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e78:	f1b9 0901 	subs.w	r9, r9, #1
 8005e7c:	d505      	bpl.n	8005e8a <_fwalk_sglue+0x22>
 8005e7e:	6824      	ldr	r4, [r4, #0]
 8005e80:	2c00      	cmp	r4, #0
 8005e82:	d1f7      	bne.n	8005e74 <_fwalk_sglue+0xc>
 8005e84:	4630      	mov	r0, r6
 8005e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e8a:	89ab      	ldrh	r3, [r5, #12]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d907      	bls.n	8005ea0 <_fwalk_sglue+0x38>
 8005e90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e94:	3301      	adds	r3, #1
 8005e96:	d003      	beq.n	8005ea0 <_fwalk_sglue+0x38>
 8005e98:	4629      	mov	r1, r5
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	47c0      	blx	r8
 8005e9e:	4306      	orrs	r6, r0
 8005ea0:	3568      	adds	r5, #104	@ 0x68
 8005ea2:	e7e9      	b.n	8005e78 <_fwalk_sglue+0x10>

08005ea4 <iprintf>:
 8005ea4:	b40f      	push	{r0, r1, r2, r3}
 8005ea6:	b507      	push	{r0, r1, r2, lr}
 8005ea8:	4906      	ldr	r1, [pc, #24]	@ (8005ec4 <iprintf+0x20>)
 8005eaa:	ab04      	add	r3, sp, #16
 8005eac:	6808      	ldr	r0, [r1, #0]
 8005eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eb2:	6881      	ldr	r1, [r0, #8]
 8005eb4:	9301      	str	r3, [sp, #4]
 8005eb6:	f000 f8c3 	bl	8006040 <_vfiprintf_r>
 8005eba:	b003      	add	sp, #12
 8005ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ec0:	b004      	add	sp, #16
 8005ec2:	4770      	bx	lr
 8005ec4:	20000028 	.word	0x20000028

08005ec8 <_puts_r>:
 8005ec8:	6a03      	ldr	r3, [r0, #32]
 8005eca:	b570      	push	{r4, r5, r6, lr}
 8005ecc:	6884      	ldr	r4, [r0, #8]
 8005ece:	4605      	mov	r5, r0
 8005ed0:	460e      	mov	r6, r1
 8005ed2:	b90b      	cbnz	r3, 8005ed8 <_puts_r+0x10>
 8005ed4:	f7ff ffb0 	bl	8005e38 <__sinit>
 8005ed8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005eda:	07db      	lsls	r3, r3, #31
 8005edc:	d405      	bmi.n	8005eea <_puts_r+0x22>
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	0598      	lsls	r0, r3, #22
 8005ee2:	d402      	bmi.n	8005eea <_puts_r+0x22>
 8005ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ee6:	f000 f880 	bl	8005fea <__retarget_lock_acquire_recursive>
 8005eea:	89a3      	ldrh	r3, [r4, #12]
 8005eec:	0719      	lsls	r1, r3, #28
 8005eee:	d502      	bpl.n	8005ef6 <_puts_r+0x2e>
 8005ef0:	6923      	ldr	r3, [r4, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d135      	bne.n	8005f62 <_puts_r+0x9a>
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	4628      	mov	r0, r5
 8005efa:	f000 fd23 	bl	8006944 <__swsetup_r>
 8005efe:	b380      	cbz	r0, 8005f62 <_puts_r+0x9a>
 8005f00:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005f04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f06:	07da      	lsls	r2, r3, #31
 8005f08:	d405      	bmi.n	8005f16 <_puts_r+0x4e>
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	059b      	lsls	r3, r3, #22
 8005f0e:	d402      	bmi.n	8005f16 <_puts_r+0x4e>
 8005f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f12:	f000 f86b 	bl	8005fec <__retarget_lock_release_recursive>
 8005f16:	4628      	mov	r0, r5
 8005f18:	bd70      	pop	{r4, r5, r6, pc}
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	da04      	bge.n	8005f28 <_puts_r+0x60>
 8005f1e:	69a2      	ldr	r2, [r4, #24]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	dc17      	bgt.n	8005f54 <_puts_r+0x8c>
 8005f24:	290a      	cmp	r1, #10
 8005f26:	d015      	beq.n	8005f54 <_puts_r+0x8c>
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	6022      	str	r2, [r4, #0]
 8005f2e:	7019      	strb	r1, [r3, #0]
 8005f30:	68a3      	ldr	r3, [r4, #8]
 8005f32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f36:	3b01      	subs	r3, #1
 8005f38:	60a3      	str	r3, [r4, #8]
 8005f3a:	2900      	cmp	r1, #0
 8005f3c:	d1ed      	bne.n	8005f1a <_puts_r+0x52>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	da11      	bge.n	8005f66 <_puts_r+0x9e>
 8005f42:	4622      	mov	r2, r4
 8005f44:	210a      	movs	r1, #10
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 fcbd 	bl	80068c6 <__swbuf_r>
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d0d7      	beq.n	8005f00 <_puts_r+0x38>
 8005f50:	250a      	movs	r5, #10
 8005f52:	e7d7      	b.n	8005f04 <_puts_r+0x3c>
 8005f54:	4622      	mov	r2, r4
 8005f56:	4628      	mov	r0, r5
 8005f58:	f000 fcb5 	bl	80068c6 <__swbuf_r>
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	d1e7      	bne.n	8005f30 <_puts_r+0x68>
 8005f60:	e7ce      	b.n	8005f00 <_puts_r+0x38>
 8005f62:	3e01      	subs	r6, #1
 8005f64:	e7e4      	b.n	8005f30 <_puts_r+0x68>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	6022      	str	r2, [r4, #0]
 8005f6c:	220a      	movs	r2, #10
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	e7ee      	b.n	8005f50 <_puts_r+0x88>
	...

08005f74 <puts>:
 8005f74:	4b02      	ldr	r3, [pc, #8]	@ (8005f80 <puts+0xc>)
 8005f76:	4601      	mov	r1, r0
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	f7ff bfa5 	b.w	8005ec8 <_puts_r>
 8005f7e:	bf00      	nop
 8005f80:	20000028 	.word	0x20000028

08005f84 <memset>:
 8005f84:	4402      	add	r2, r0
 8005f86:	4603      	mov	r3, r0
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d100      	bne.n	8005f8e <memset+0xa>
 8005f8c:	4770      	bx	lr
 8005f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f92:	e7f9      	b.n	8005f88 <memset+0x4>

08005f94 <__errno>:
 8005f94:	4b01      	ldr	r3, [pc, #4]	@ (8005f9c <__errno+0x8>)
 8005f96:	6818      	ldr	r0, [r3, #0]
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	20000028 	.word	0x20000028

08005fa0 <__libc_init_array>:
 8005fa0:	b570      	push	{r4, r5, r6, lr}
 8005fa2:	4d0d      	ldr	r5, [pc, #52]	@ (8005fd8 <__libc_init_array+0x38>)
 8005fa4:	4c0d      	ldr	r4, [pc, #52]	@ (8005fdc <__libc_init_array+0x3c>)
 8005fa6:	1b64      	subs	r4, r4, r5
 8005fa8:	10a4      	asrs	r4, r4, #2
 8005faa:	2600      	movs	r6, #0
 8005fac:	42a6      	cmp	r6, r4
 8005fae:	d109      	bne.n	8005fc4 <__libc_init_array+0x24>
 8005fb0:	4d0b      	ldr	r5, [pc, #44]	@ (8005fe0 <__libc_init_array+0x40>)
 8005fb2:	4c0c      	ldr	r4, [pc, #48]	@ (8005fe4 <__libc_init_array+0x44>)
 8005fb4:	f000 fe40 	bl	8006c38 <_init>
 8005fb8:	1b64      	subs	r4, r4, r5
 8005fba:	10a4      	asrs	r4, r4, #2
 8005fbc:	2600      	movs	r6, #0
 8005fbe:	42a6      	cmp	r6, r4
 8005fc0:	d105      	bne.n	8005fce <__libc_init_array+0x2e>
 8005fc2:	bd70      	pop	{r4, r5, r6, pc}
 8005fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc8:	4798      	blx	r3
 8005fca:	3601      	adds	r6, #1
 8005fcc:	e7ee      	b.n	8005fac <__libc_init_array+0xc>
 8005fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd2:	4798      	blx	r3
 8005fd4:	3601      	adds	r6, #1
 8005fd6:	e7f2      	b.n	8005fbe <__libc_init_array+0x1e>
 8005fd8:	08008300 	.word	0x08008300
 8005fdc:	08008300 	.word	0x08008300
 8005fe0:	08008300 	.word	0x08008300
 8005fe4:	08008308 	.word	0x08008308

08005fe8 <__retarget_lock_init_recursive>:
 8005fe8:	4770      	bx	lr

08005fea <__retarget_lock_acquire_recursive>:
 8005fea:	4770      	bx	lr

08005fec <__retarget_lock_release_recursive>:
 8005fec:	4770      	bx	lr

08005fee <__sfputc_r>:
 8005fee:	6893      	ldr	r3, [r2, #8]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	b410      	push	{r4}
 8005ff6:	6093      	str	r3, [r2, #8]
 8005ff8:	da08      	bge.n	800600c <__sfputc_r+0x1e>
 8005ffa:	6994      	ldr	r4, [r2, #24]
 8005ffc:	42a3      	cmp	r3, r4
 8005ffe:	db01      	blt.n	8006004 <__sfputc_r+0x16>
 8006000:	290a      	cmp	r1, #10
 8006002:	d103      	bne.n	800600c <__sfputc_r+0x1e>
 8006004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006008:	f000 bc5d 	b.w	80068c6 <__swbuf_r>
 800600c:	6813      	ldr	r3, [r2, #0]
 800600e:	1c58      	adds	r0, r3, #1
 8006010:	6010      	str	r0, [r2, #0]
 8006012:	7019      	strb	r1, [r3, #0]
 8006014:	4608      	mov	r0, r1
 8006016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800601a:	4770      	bx	lr

0800601c <__sfputs_r>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	4606      	mov	r6, r0
 8006020:	460f      	mov	r7, r1
 8006022:	4614      	mov	r4, r2
 8006024:	18d5      	adds	r5, r2, r3
 8006026:	42ac      	cmp	r4, r5
 8006028:	d101      	bne.n	800602e <__sfputs_r+0x12>
 800602a:	2000      	movs	r0, #0
 800602c:	e007      	b.n	800603e <__sfputs_r+0x22>
 800602e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006032:	463a      	mov	r2, r7
 8006034:	4630      	mov	r0, r6
 8006036:	f7ff ffda 	bl	8005fee <__sfputc_r>
 800603a:	1c43      	adds	r3, r0, #1
 800603c:	d1f3      	bne.n	8006026 <__sfputs_r+0xa>
 800603e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006040 <_vfiprintf_r>:
 8006040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006044:	460d      	mov	r5, r1
 8006046:	b09d      	sub	sp, #116	@ 0x74
 8006048:	4614      	mov	r4, r2
 800604a:	4698      	mov	r8, r3
 800604c:	4606      	mov	r6, r0
 800604e:	b118      	cbz	r0, 8006058 <_vfiprintf_r+0x18>
 8006050:	6a03      	ldr	r3, [r0, #32]
 8006052:	b90b      	cbnz	r3, 8006058 <_vfiprintf_r+0x18>
 8006054:	f7ff fef0 	bl	8005e38 <__sinit>
 8006058:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800605a:	07d9      	lsls	r1, r3, #31
 800605c:	d405      	bmi.n	800606a <_vfiprintf_r+0x2a>
 800605e:	89ab      	ldrh	r3, [r5, #12]
 8006060:	059a      	lsls	r2, r3, #22
 8006062:	d402      	bmi.n	800606a <_vfiprintf_r+0x2a>
 8006064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006066:	f7ff ffc0 	bl	8005fea <__retarget_lock_acquire_recursive>
 800606a:	89ab      	ldrh	r3, [r5, #12]
 800606c:	071b      	lsls	r3, r3, #28
 800606e:	d501      	bpl.n	8006074 <_vfiprintf_r+0x34>
 8006070:	692b      	ldr	r3, [r5, #16]
 8006072:	b99b      	cbnz	r3, 800609c <_vfiprintf_r+0x5c>
 8006074:	4629      	mov	r1, r5
 8006076:	4630      	mov	r0, r6
 8006078:	f000 fc64 	bl	8006944 <__swsetup_r>
 800607c:	b170      	cbz	r0, 800609c <_vfiprintf_r+0x5c>
 800607e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006080:	07dc      	lsls	r4, r3, #31
 8006082:	d504      	bpl.n	800608e <_vfiprintf_r+0x4e>
 8006084:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006088:	b01d      	add	sp, #116	@ 0x74
 800608a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608e:	89ab      	ldrh	r3, [r5, #12]
 8006090:	0598      	lsls	r0, r3, #22
 8006092:	d4f7      	bmi.n	8006084 <_vfiprintf_r+0x44>
 8006094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006096:	f7ff ffa9 	bl	8005fec <__retarget_lock_release_recursive>
 800609a:	e7f3      	b.n	8006084 <_vfiprintf_r+0x44>
 800609c:	2300      	movs	r3, #0
 800609e:	9309      	str	r3, [sp, #36]	@ 0x24
 80060a0:	2320      	movs	r3, #32
 80060a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80060aa:	2330      	movs	r3, #48	@ 0x30
 80060ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800625c <_vfiprintf_r+0x21c>
 80060b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060b4:	f04f 0901 	mov.w	r9, #1
 80060b8:	4623      	mov	r3, r4
 80060ba:	469a      	mov	sl, r3
 80060bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060c0:	b10a      	cbz	r2, 80060c6 <_vfiprintf_r+0x86>
 80060c2:	2a25      	cmp	r2, #37	@ 0x25
 80060c4:	d1f9      	bne.n	80060ba <_vfiprintf_r+0x7a>
 80060c6:	ebba 0b04 	subs.w	fp, sl, r4
 80060ca:	d00b      	beq.n	80060e4 <_vfiprintf_r+0xa4>
 80060cc:	465b      	mov	r3, fp
 80060ce:	4622      	mov	r2, r4
 80060d0:	4629      	mov	r1, r5
 80060d2:	4630      	mov	r0, r6
 80060d4:	f7ff ffa2 	bl	800601c <__sfputs_r>
 80060d8:	3001      	adds	r0, #1
 80060da:	f000 80a7 	beq.w	800622c <_vfiprintf_r+0x1ec>
 80060de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060e0:	445a      	add	r2, fp
 80060e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80060e4:	f89a 3000 	ldrb.w	r3, [sl]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 809f 	beq.w	800622c <_vfiprintf_r+0x1ec>
 80060ee:	2300      	movs	r3, #0
 80060f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060f8:	f10a 0a01 	add.w	sl, sl, #1
 80060fc:	9304      	str	r3, [sp, #16]
 80060fe:	9307      	str	r3, [sp, #28]
 8006100:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006104:	931a      	str	r3, [sp, #104]	@ 0x68
 8006106:	4654      	mov	r4, sl
 8006108:	2205      	movs	r2, #5
 800610a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800610e:	4853      	ldr	r0, [pc, #332]	@ (800625c <_vfiprintf_r+0x21c>)
 8006110:	f7fa f87e 	bl	8000210 <memchr>
 8006114:	9a04      	ldr	r2, [sp, #16]
 8006116:	b9d8      	cbnz	r0, 8006150 <_vfiprintf_r+0x110>
 8006118:	06d1      	lsls	r1, r2, #27
 800611a:	bf44      	itt	mi
 800611c:	2320      	movmi	r3, #32
 800611e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006122:	0713      	lsls	r3, r2, #28
 8006124:	bf44      	itt	mi
 8006126:	232b      	movmi	r3, #43	@ 0x2b
 8006128:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800612c:	f89a 3000 	ldrb.w	r3, [sl]
 8006130:	2b2a      	cmp	r3, #42	@ 0x2a
 8006132:	d015      	beq.n	8006160 <_vfiprintf_r+0x120>
 8006134:	9a07      	ldr	r2, [sp, #28]
 8006136:	4654      	mov	r4, sl
 8006138:	2000      	movs	r0, #0
 800613a:	f04f 0c0a 	mov.w	ip, #10
 800613e:	4621      	mov	r1, r4
 8006140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006144:	3b30      	subs	r3, #48	@ 0x30
 8006146:	2b09      	cmp	r3, #9
 8006148:	d94b      	bls.n	80061e2 <_vfiprintf_r+0x1a2>
 800614a:	b1b0      	cbz	r0, 800617a <_vfiprintf_r+0x13a>
 800614c:	9207      	str	r2, [sp, #28]
 800614e:	e014      	b.n	800617a <_vfiprintf_r+0x13a>
 8006150:	eba0 0308 	sub.w	r3, r0, r8
 8006154:	fa09 f303 	lsl.w	r3, r9, r3
 8006158:	4313      	orrs	r3, r2
 800615a:	9304      	str	r3, [sp, #16]
 800615c:	46a2      	mov	sl, r4
 800615e:	e7d2      	b.n	8006106 <_vfiprintf_r+0xc6>
 8006160:	9b03      	ldr	r3, [sp, #12]
 8006162:	1d19      	adds	r1, r3, #4
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	9103      	str	r1, [sp, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	bfbb      	ittet	lt
 800616c:	425b      	neglt	r3, r3
 800616e:	f042 0202 	orrlt.w	r2, r2, #2
 8006172:	9307      	strge	r3, [sp, #28]
 8006174:	9307      	strlt	r3, [sp, #28]
 8006176:	bfb8      	it	lt
 8006178:	9204      	strlt	r2, [sp, #16]
 800617a:	7823      	ldrb	r3, [r4, #0]
 800617c:	2b2e      	cmp	r3, #46	@ 0x2e
 800617e:	d10a      	bne.n	8006196 <_vfiprintf_r+0x156>
 8006180:	7863      	ldrb	r3, [r4, #1]
 8006182:	2b2a      	cmp	r3, #42	@ 0x2a
 8006184:	d132      	bne.n	80061ec <_vfiprintf_r+0x1ac>
 8006186:	9b03      	ldr	r3, [sp, #12]
 8006188:	1d1a      	adds	r2, r3, #4
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	9203      	str	r2, [sp, #12]
 800618e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006192:	3402      	adds	r4, #2
 8006194:	9305      	str	r3, [sp, #20]
 8006196:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800626c <_vfiprintf_r+0x22c>
 800619a:	7821      	ldrb	r1, [r4, #0]
 800619c:	2203      	movs	r2, #3
 800619e:	4650      	mov	r0, sl
 80061a0:	f7fa f836 	bl	8000210 <memchr>
 80061a4:	b138      	cbz	r0, 80061b6 <_vfiprintf_r+0x176>
 80061a6:	9b04      	ldr	r3, [sp, #16]
 80061a8:	eba0 000a 	sub.w	r0, r0, sl
 80061ac:	2240      	movs	r2, #64	@ 0x40
 80061ae:	4082      	lsls	r2, r0
 80061b0:	4313      	orrs	r3, r2
 80061b2:	3401      	adds	r4, #1
 80061b4:	9304      	str	r3, [sp, #16]
 80061b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ba:	4829      	ldr	r0, [pc, #164]	@ (8006260 <_vfiprintf_r+0x220>)
 80061bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061c0:	2206      	movs	r2, #6
 80061c2:	f7fa f825 	bl	8000210 <memchr>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d03f      	beq.n	800624a <_vfiprintf_r+0x20a>
 80061ca:	4b26      	ldr	r3, [pc, #152]	@ (8006264 <_vfiprintf_r+0x224>)
 80061cc:	bb1b      	cbnz	r3, 8006216 <_vfiprintf_r+0x1d6>
 80061ce:	9b03      	ldr	r3, [sp, #12]
 80061d0:	3307      	adds	r3, #7
 80061d2:	f023 0307 	bic.w	r3, r3, #7
 80061d6:	3308      	adds	r3, #8
 80061d8:	9303      	str	r3, [sp, #12]
 80061da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061dc:	443b      	add	r3, r7
 80061de:	9309      	str	r3, [sp, #36]	@ 0x24
 80061e0:	e76a      	b.n	80060b8 <_vfiprintf_r+0x78>
 80061e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80061e6:	460c      	mov	r4, r1
 80061e8:	2001      	movs	r0, #1
 80061ea:	e7a8      	b.n	800613e <_vfiprintf_r+0xfe>
 80061ec:	2300      	movs	r3, #0
 80061ee:	3401      	adds	r4, #1
 80061f0:	9305      	str	r3, [sp, #20]
 80061f2:	4619      	mov	r1, r3
 80061f4:	f04f 0c0a 	mov.w	ip, #10
 80061f8:	4620      	mov	r0, r4
 80061fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061fe:	3a30      	subs	r2, #48	@ 0x30
 8006200:	2a09      	cmp	r2, #9
 8006202:	d903      	bls.n	800620c <_vfiprintf_r+0x1cc>
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0c6      	beq.n	8006196 <_vfiprintf_r+0x156>
 8006208:	9105      	str	r1, [sp, #20]
 800620a:	e7c4      	b.n	8006196 <_vfiprintf_r+0x156>
 800620c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006210:	4604      	mov	r4, r0
 8006212:	2301      	movs	r3, #1
 8006214:	e7f0      	b.n	80061f8 <_vfiprintf_r+0x1b8>
 8006216:	ab03      	add	r3, sp, #12
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	462a      	mov	r2, r5
 800621c:	4b12      	ldr	r3, [pc, #72]	@ (8006268 <_vfiprintf_r+0x228>)
 800621e:	a904      	add	r1, sp, #16
 8006220:	4630      	mov	r0, r6
 8006222:	f3af 8000 	nop.w
 8006226:	4607      	mov	r7, r0
 8006228:	1c78      	adds	r0, r7, #1
 800622a:	d1d6      	bne.n	80061da <_vfiprintf_r+0x19a>
 800622c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800622e:	07d9      	lsls	r1, r3, #31
 8006230:	d405      	bmi.n	800623e <_vfiprintf_r+0x1fe>
 8006232:	89ab      	ldrh	r3, [r5, #12]
 8006234:	059a      	lsls	r2, r3, #22
 8006236:	d402      	bmi.n	800623e <_vfiprintf_r+0x1fe>
 8006238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800623a:	f7ff fed7 	bl	8005fec <__retarget_lock_release_recursive>
 800623e:	89ab      	ldrh	r3, [r5, #12]
 8006240:	065b      	lsls	r3, r3, #25
 8006242:	f53f af1f 	bmi.w	8006084 <_vfiprintf_r+0x44>
 8006246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006248:	e71e      	b.n	8006088 <_vfiprintf_r+0x48>
 800624a:	ab03      	add	r3, sp, #12
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	462a      	mov	r2, r5
 8006250:	4b05      	ldr	r3, [pc, #20]	@ (8006268 <_vfiprintf_r+0x228>)
 8006252:	a904      	add	r1, sp, #16
 8006254:	4630      	mov	r0, r6
 8006256:	f000 f91b 	bl	8006490 <_printf_i>
 800625a:	e7e4      	b.n	8006226 <_vfiprintf_r+0x1e6>
 800625c:	080082c4 	.word	0x080082c4
 8006260:	080082ce 	.word	0x080082ce
 8006264:	00000000 	.word	0x00000000
 8006268:	0800601d 	.word	0x0800601d
 800626c:	080082ca 	.word	0x080082ca

08006270 <sbrk_aligned>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	4e0f      	ldr	r6, [pc, #60]	@ (80062b0 <sbrk_aligned+0x40>)
 8006274:	460c      	mov	r4, r1
 8006276:	6831      	ldr	r1, [r6, #0]
 8006278:	4605      	mov	r5, r0
 800627a:	b911      	cbnz	r1, 8006282 <sbrk_aligned+0x12>
 800627c:	f000 fc70 	bl	8006b60 <_sbrk_r>
 8006280:	6030      	str	r0, [r6, #0]
 8006282:	4621      	mov	r1, r4
 8006284:	4628      	mov	r0, r5
 8006286:	f000 fc6b 	bl	8006b60 <_sbrk_r>
 800628a:	1c43      	adds	r3, r0, #1
 800628c:	d103      	bne.n	8006296 <sbrk_aligned+0x26>
 800628e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006292:	4620      	mov	r0, r4
 8006294:	bd70      	pop	{r4, r5, r6, pc}
 8006296:	1cc4      	adds	r4, r0, #3
 8006298:	f024 0403 	bic.w	r4, r4, #3
 800629c:	42a0      	cmp	r0, r4
 800629e:	d0f8      	beq.n	8006292 <sbrk_aligned+0x22>
 80062a0:	1a21      	subs	r1, r4, r0
 80062a2:	4628      	mov	r0, r5
 80062a4:	f000 fc5c 	bl	8006b60 <_sbrk_r>
 80062a8:	3001      	adds	r0, #1
 80062aa:	d1f2      	bne.n	8006292 <sbrk_aligned+0x22>
 80062ac:	e7ef      	b.n	800628e <sbrk_aligned+0x1e>
 80062ae:	bf00      	nop
 80062b0:	20001184 	.word	0x20001184

080062b4 <_malloc_r>:
 80062b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062b8:	1ccd      	adds	r5, r1, #3
 80062ba:	f025 0503 	bic.w	r5, r5, #3
 80062be:	3508      	adds	r5, #8
 80062c0:	2d0c      	cmp	r5, #12
 80062c2:	bf38      	it	cc
 80062c4:	250c      	movcc	r5, #12
 80062c6:	2d00      	cmp	r5, #0
 80062c8:	4606      	mov	r6, r0
 80062ca:	db01      	blt.n	80062d0 <_malloc_r+0x1c>
 80062cc:	42a9      	cmp	r1, r5
 80062ce:	d904      	bls.n	80062da <_malloc_r+0x26>
 80062d0:	230c      	movs	r3, #12
 80062d2:	6033      	str	r3, [r6, #0]
 80062d4:	2000      	movs	r0, #0
 80062d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063b0 <_malloc_r+0xfc>
 80062de:	f000 faa3 	bl	8006828 <__malloc_lock>
 80062e2:	f8d8 3000 	ldr.w	r3, [r8]
 80062e6:	461c      	mov	r4, r3
 80062e8:	bb44      	cbnz	r4, 800633c <_malloc_r+0x88>
 80062ea:	4629      	mov	r1, r5
 80062ec:	4630      	mov	r0, r6
 80062ee:	f7ff ffbf 	bl	8006270 <sbrk_aligned>
 80062f2:	1c43      	adds	r3, r0, #1
 80062f4:	4604      	mov	r4, r0
 80062f6:	d158      	bne.n	80063aa <_malloc_r+0xf6>
 80062f8:	f8d8 4000 	ldr.w	r4, [r8]
 80062fc:	4627      	mov	r7, r4
 80062fe:	2f00      	cmp	r7, #0
 8006300:	d143      	bne.n	800638a <_malloc_r+0xd6>
 8006302:	2c00      	cmp	r4, #0
 8006304:	d04b      	beq.n	800639e <_malloc_r+0xea>
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	4639      	mov	r1, r7
 800630a:	4630      	mov	r0, r6
 800630c:	eb04 0903 	add.w	r9, r4, r3
 8006310:	f000 fc26 	bl	8006b60 <_sbrk_r>
 8006314:	4581      	cmp	r9, r0
 8006316:	d142      	bne.n	800639e <_malloc_r+0xea>
 8006318:	6821      	ldr	r1, [r4, #0]
 800631a:	1a6d      	subs	r5, r5, r1
 800631c:	4629      	mov	r1, r5
 800631e:	4630      	mov	r0, r6
 8006320:	f7ff ffa6 	bl	8006270 <sbrk_aligned>
 8006324:	3001      	adds	r0, #1
 8006326:	d03a      	beq.n	800639e <_malloc_r+0xea>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	442b      	add	r3, r5
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	f8d8 3000 	ldr.w	r3, [r8]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	bb62      	cbnz	r2, 8006390 <_malloc_r+0xdc>
 8006336:	f8c8 7000 	str.w	r7, [r8]
 800633a:	e00f      	b.n	800635c <_malloc_r+0xa8>
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	1b52      	subs	r2, r2, r5
 8006340:	d420      	bmi.n	8006384 <_malloc_r+0xd0>
 8006342:	2a0b      	cmp	r2, #11
 8006344:	d917      	bls.n	8006376 <_malloc_r+0xc2>
 8006346:	1961      	adds	r1, r4, r5
 8006348:	42a3      	cmp	r3, r4
 800634a:	6025      	str	r5, [r4, #0]
 800634c:	bf18      	it	ne
 800634e:	6059      	strne	r1, [r3, #4]
 8006350:	6863      	ldr	r3, [r4, #4]
 8006352:	bf08      	it	eq
 8006354:	f8c8 1000 	streq.w	r1, [r8]
 8006358:	5162      	str	r2, [r4, r5]
 800635a:	604b      	str	r3, [r1, #4]
 800635c:	4630      	mov	r0, r6
 800635e:	f000 fa69 	bl	8006834 <__malloc_unlock>
 8006362:	f104 000b 	add.w	r0, r4, #11
 8006366:	1d23      	adds	r3, r4, #4
 8006368:	f020 0007 	bic.w	r0, r0, #7
 800636c:	1ac2      	subs	r2, r0, r3
 800636e:	bf1c      	itt	ne
 8006370:	1a1b      	subne	r3, r3, r0
 8006372:	50a3      	strne	r3, [r4, r2]
 8006374:	e7af      	b.n	80062d6 <_malloc_r+0x22>
 8006376:	6862      	ldr	r2, [r4, #4]
 8006378:	42a3      	cmp	r3, r4
 800637a:	bf0c      	ite	eq
 800637c:	f8c8 2000 	streq.w	r2, [r8]
 8006380:	605a      	strne	r2, [r3, #4]
 8006382:	e7eb      	b.n	800635c <_malloc_r+0xa8>
 8006384:	4623      	mov	r3, r4
 8006386:	6864      	ldr	r4, [r4, #4]
 8006388:	e7ae      	b.n	80062e8 <_malloc_r+0x34>
 800638a:	463c      	mov	r4, r7
 800638c:	687f      	ldr	r7, [r7, #4]
 800638e:	e7b6      	b.n	80062fe <_malloc_r+0x4a>
 8006390:	461a      	mov	r2, r3
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	42a3      	cmp	r3, r4
 8006396:	d1fb      	bne.n	8006390 <_malloc_r+0xdc>
 8006398:	2300      	movs	r3, #0
 800639a:	6053      	str	r3, [r2, #4]
 800639c:	e7de      	b.n	800635c <_malloc_r+0xa8>
 800639e:	230c      	movs	r3, #12
 80063a0:	6033      	str	r3, [r6, #0]
 80063a2:	4630      	mov	r0, r6
 80063a4:	f000 fa46 	bl	8006834 <__malloc_unlock>
 80063a8:	e794      	b.n	80062d4 <_malloc_r+0x20>
 80063aa:	6005      	str	r5, [r0, #0]
 80063ac:	e7d6      	b.n	800635c <_malloc_r+0xa8>
 80063ae:	bf00      	nop
 80063b0:	20001188 	.word	0x20001188

080063b4 <_printf_common>:
 80063b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b8:	4616      	mov	r6, r2
 80063ba:	4698      	mov	r8, r3
 80063bc:	688a      	ldr	r2, [r1, #8]
 80063be:	690b      	ldr	r3, [r1, #16]
 80063c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063c4:	4293      	cmp	r3, r2
 80063c6:	bfb8      	it	lt
 80063c8:	4613      	movlt	r3, r2
 80063ca:	6033      	str	r3, [r6, #0]
 80063cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063d0:	4607      	mov	r7, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	b10a      	cbz	r2, 80063da <_printf_common+0x26>
 80063d6:	3301      	adds	r3, #1
 80063d8:	6033      	str	r3, [r6, #0]
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	0699      	lsls	r1, r3, #26
 80063de:	bf42      	ittt	mi
 80063e0:	6833      	ldrmi	r3, [r6, #0]
 80063e2:	3302      	addmi	r3, #2
 80063e4:	6033      	strmi	r3, [r6, #0]
 80063e6:	6825      	ldr	r5, [r4, #0]
 80063e8:	f015 0506 	ands.w	r5, r5, #6
 80063ec:	d106      	bne.n	80063fc <_printf_common+0x48>
 80063ee:	f104 0a19 	add.w	sl, r4, #25
 80063f2:	68e3      	ldr	r3, [r4, #12]
 80063f4:	6832      	ldr	r2, [r6, #0]
 80063f6:	1a9b      	subs	r3, r3, r2
 80063f8:	42ab      	cmp	r3, r5
 80063fa:	dc26      	bgt.n	800644a <_printf_common+0x96>
 80063fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006400:	6822      	ldr	r2, [r4, #0]
 8006402:	3b00      	subs	r3, #0
 8006404:	bf18      	it	ne
 8006406:	2301      	movne	r3, #1
 8006408:	0692      	lsls	r2, r2, #26
 800640a:	d42b      	bmi.n	8006464 <_printf_common+0xb0>
 800640c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006410:	4641      	mov	r1, r8
 8006412:	4638      	mov	r0, r7
 8006414:	47c8      	blx	r9
 8006416:	3001      	adds	r0, #1
 8006418:	d01e      	beq.n	8006458 <_printf_common+0xa4>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	6922      	ldr	r2, [r4, #16]
 800641e:	f003 0306 	and.w	r3, r3, #6
 8006422:	2b04      	cmp	r3, #4
 8006424:	bf02      	ittt	eq
 8006426:	68e5      	ldreq	r5, [r4, #12]
 8006428:	6833      	ldreq	r3, [r6, #0]
 800642a:	1aed      	subeq	r5, r5, r3
 800642c:	68a3      	ldr	r3, [r4, #8]
 800642e:	bf0c      	ite	eq
 8006430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006434:	2500      	movne	r5, #0
 8006436:	4293      	cmp	r3, r2
 8006438:	bfc4      	itt	gt
 800643a:	1a9b      	subgt	r3, r3, r2
 800643c:	18ed      	addgt	r5, r5, r3
 800643e:	2600      	movs	r6, #0
 8006440:	341a      	adds	r4, #26
 8006442:	42b5      	cmp	r5, r6
 8006444:	d11a      	bne.n	800647c <_printf_common+0xc8>
 8006446:	2000      	movs	r0, #0
 8006448:	e008      	b.n	800645c <_printf_common+0xa8>
 800644a:	2301      	movs	r3, #1
 800644c:	4652      	mov	r2, sl
 800644e:	4641      	mov	r1, r8
 8006450:	4638      	mov	r0, r7
 8006452:	47c8      	blx	r9
 8006454:	3001      	adds	r0, #1
 8006456:	d103      	bne.n	8006460 <_printf_common+0xac>
 8006458:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800645c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006460:	3501      	adds	r5, #1
 8006462:	e7c6      	b.n	80063f2 <_printf_common+0x3e>
 8006464:	18e1      	adds	r1, r4, r3
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	2030      	movs	r0, #48	@ 0x30
 800646a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800646e:	4422      	add	r2, r4
 8006470:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006474:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006478:	3302      	adds	r3, #2
 800647a:	e7c7      	b.n	800640c <_printf_common+0x58>
 800647c:	2301      	movs	r3, #1
 800647e:	4622      	mov	r2, r4
 8006480:	4641      	mov	r1, r8
 8006482:	4638      	mov	r0, r7
 8006484:	47c8      	blx	r9
 8006486:	3001      	adds	r0, #1
 8006488:	d0e6      	beq.n	8006458 <_printf_common+0xa4>
 800648a:	3601      	adds	r6, #1
 800648c:	e7d9      	b.n	8006442 <_printf_common+0x8e>
	...

08006490 <_printf_i>:
 8006490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006494:	7e0f      	ldrb	r7, [r1, #24]
 8006496:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006498:	2f78      	cmp	r7, #120	@ 0x78
 800649a:	4691      	mov	r9, r2
 800649c:	4680      	mov	r8, r0
 800649e:	460c      	mov	r4, r1
 80064a0:	469a      	mov	sl, r3
 80064a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064a6:	d807      	bhi.n	80064b8 <_printf_i+0x28>
 80064a8:	2f62      	cmp	r7, #98	@ 0x62
 80064aa:	d80a      	bhi.n	80064c2 <_printf_i+0x32>
 80064ac:	2f00      	cmp	r7, #0
 80064ae:	f000 80d2 	beq.w	8006656 <_printf_i+0x1c6>
 80064b2:	2f58      	cmp	r7, #88	@ 0x58
 80064b4:	f000 80b9 	beq.w	800662a <_printf_i+0x19a>
 80064b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064c0:	e03a      	b.n	8006538 <_printf_i+0xa8>
 80064c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064c6:	2b15      	cmp	r3, #21
 80064c8:	d8f6      	bhi.n	80064b8 <_printf_i+0x28>
 80064ca:	a101      	add	r1, pc, #4	@ (adr r1, 80064d0 <_printf_i+0x40>)
 80064cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064d0:	08006529 	.word	0x08006529
 80064d4:	0800653d 	.word	0x0800653d
 80064d8:	080064b9 	.word	0x080064b9
 80064dc:	080064b9 	.word	0x080064b9
 80064e0:	080064b9 	.word	0x080064b9
 80064e4:	080064b9 	.word	0x080064b9
 80064e8:	0800653d 	.word	0x0800653d
 80064ec:	080064b9 	.word	0x080064b9
 80064f0:	080064b9 	.word	0x080064b9
 80064f4:	080064b9 	.word	0x080064b9
 80064f8:	080064b9 	.word	0x080064b9
 80064fc:	0800663d 	.word	0x0800663d
 8006500:	08006567 	.word	0x08006567
 8006504:	080065f7 	.word	0x080065f7
 8006508:	080064b9 	.word	0x080064b9
 800650c:	080064b9 	.word	0x080064b9
 8006510:	0800665f 	.word	0x0800665f
 8006514:	080064b9 	.word	0x080064b9
 8006518:	08006567 	.word	0x08006567
 800651c:	080064b9 	.word	0x080064b9
 8006520:	080064b9 	.word	0x080064b9
 8006524:	080065ff 	.word	0x080065ff
 8006528:	6833      	ldr	r3, [r6, #0]
 800652a:	1d1a      	adds	r2, r3, #4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6032      	str	r2, [r6, #0]
 8006530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006534:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006538:	2301      	movs	r3, #1
 800653a:	e09d      	b.n	8006678 <_printf_i+0x1e8>
 800653c:	6833      	ldr	r3, [r6, #0]
 800653e:	6820      	ldr	r0, [r4, #0]
 8006540:	1d19      	adds	r1, r3, #4
 8006542:	6031      	str	r1, [r6, #0]
 8006544:	0606      	lsls	r6, r0, #24
 8006546:	d501      	bpl.n	800654c <_printf_i+0xbc>
 8006548:	681d      	ldr	r5, [r3, #0]
 800654a:	e003      	b.n	8006554 <_printf_i+0xc4>
 800654c:	0645      	lsls	r5, r0, #25
 800654e:	d5fb      	bpl.n	8006548 <_printf_i+0xb8>
 8006550:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006554:	2d00      	cmp	r5, #0
 8006556:	da03      	bge.n	8006560 <_printf_i+0xd0>
 8006558:	232d      	movs	r3, #45	@ 0x2d
 800655a:	426d      	negs	r5, r5
 800655c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006560:	4859      	ldr	r0, [pc, #356]	@ (80066c8 <_printf_i+0x238>)
 8006562:	230a      	movs	r3, #10
 8006564:	e011      	b.n	800658a <_printf_i+0xfa>
 8006566:	6821      	ldr	r1, [r4, #0]
 8006568:	6833      	ldr	r3, [r6, #0]
 800656a:	0608      	lsls	r0, r1, #24
 800656c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006570:	d402      	bmi.n	8006578 <_printf_i+0xe8>
 8006572:	0649      	lsls	r1, r1, #25
 8006574:	bf48      	it	mi
 8006576:	b2ad      	uxthmi	r5, r5
 8006578:	2f6f      	cmp	r7, #111	@ 0x6f
 800657a:	4853      	ldr	r0, [pc, #332]	@ (80066c8 <_printf_i+0x238>)
 800657c:	6033      	str	r3, [r6, #0]
 800657e:	bf14      	ite	ne
 8006580:	230a      	movne	r3, #10
 8006582:	2308      	moveq	r3, #8
 8006584:	2100      	movs	r1, #0
 8006586:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800658a:	6866      	ldr	r6, [r4, #4]
 800658c:	60a6      	str	r6, [r4, #8]
 800658e:	2e00      	cmp	r6, #0
 8006590:	bfa2      	ittt	ge
 8006592:	6821      	ldrge	r1, [r4, #0]
 8006594:	f021 0104 	bicge.w	r1, r1, #4
 8006598:	6021      	strge	r1, [r4, #0]
 800659a:	b90d      	cbnz	r5, 80065a0 <_printf_i+0x110>
 800659c:	2e00      	cmp	r6, #0
 800659e:	d04b      	beq.n	8006638 <_printf_i+0x1a8>
 80065a0:	4616      	mov	r6, r2
 80065a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80065a6:	fb03 5711 	mls	r7, r3, r1, r5
 80065aa:	5dc7      	ldrb	r7, [r0, r7]
 80065ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065b0:	462f      	mov	r7, r5
 80065b2:	42bb      	cmp	r3, r7
 80065b4:	460d      	mov	r5, r1
 80065b6:	d9f4      	bls.n	80065a2 <_printf_i+0x112>
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d10b      	bne.n	80065d4 <_printf_i+0x144>
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	07df      	lsls	r7, r3, #31
 80065c0:	d508      	bpl.n	80065d4 <_printf_i+0x144>
 80065c2:	6923      	ldr	r3, [r4, #16]
 80065c4:	6861      	ldr	r1, [r4, #4]
 80065c6:	4299      	cmp	r1, r3
 80065c8:	bfde      	ittt	le
 80065ca:	2330      	movle	r3, #48	@ 0x30
 80065cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065d0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80065d4:	1b92      	subs	r2, r2, r6
 80065d6:	6122      	str	r2, [r4, #16]
 80065d8:	f8cd a000 	str.w	sl, [sp]
 80065dc:	464b      	mov	r3, r9
 80065de:	aa03      	add	r2, sp, #12
 80065e0:	4621      	mov	r1, r4
 80065e2:	4640      	mov	r0, r8
 80065e4:	f7ff fee6 	bl	80063b4 <_printf_common>
 80065e8:	3001      	adds	r0, #1
 80065ea:	d14a      	bne.n	8006682 <_printf_i+0x1f2>
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065f0:	b004      	add	sp, #16
 80065f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	f043 0320 	orr.w	r3, r3, #32
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	4833      	ldr	r0, [pc, #204]	@ (80066cc <_printf_i+0x23c>)
 8006600:	2778      	movs	r7, #120	@ 0x78
 8006602:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	6831      	ldr	r1, [r6, #0]
 800660a:	061f      	lsls	r7, r3, #24
 800660c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006610:	d402      	bmi.n	8006618 <_printf_i+0x188>
 8006612:	065f      	lsls	r7, r3, #25
 8006614:	bf48      	it	mi
 8006616:	b2ad      	uxthmi	r5, r5
 8006618:	6031      	str	r1, [r6, #0]
 800661a:	07d9      	lsls	r1, r3, #31
 800661c:	bf44      	itt	mi
 800661e:	f043 0320 	orrmi.w	r3, r3, #32
 8006622:	6023      	strmi	r3, [r4, #0]
 8006624:	b11d      	cbz	r5, 800662e <_printf_i+0x19e>
 8006626:	2310      	movs	r3, #16
 8006628:	e7ac      	b.n	8006584 <_printf_i+0xf4>
 800662a:	4827      	ldr	r0, [pc, #156]	@ (80066c8 <_printf_i+0x238>)
 800662c:	e7e9      	b.n	8006602 <_printf_i+0x172>
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	f023 0320 	bic.w	r3, r3, #32
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	e7f6      	b.n	8006626 <_printf_i+0x196>
 8006638:	4616      	mov	r6, r2
 800663a:	e7bd      	b.n	80065b8 <_printf_i+0x128>
 800663c:	6833      	ldr	r3, [r6, #0]
 800663e:	6825      	ldr	r5, [r4, #0]
 8006640:	6961      	ldr	r1, [r4, #20]
 8006642:	1d18      	adds	r0, r3, #4
 8006644:	6030      	str	r0, [r6, #0]
 8006646:	062e      	lsls	r6, r5, #24
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	d501      	bpl.n	8006650 <_printf_i+0x1c0>
 800664c:	6019      	str	r1, [r3, #0]
 800664e:	e002      	b.n	8006656 <_printf_i+0x1c6>
 8006650:	0668      	lsls	r0, r5, #25
 8006652:	d5fb      	bpl.n	800664c <_printf_i+0x1bc>
 8006654:	8019      	strh	r1, [r3, #0]
 8006656:	2300      	movs	r3, #0
 8006658:	6123      	str	r3, [r4, #16]
 800665a:	4616      	mov	r6, r2
 800665c:	e7bc      	b.n	80065d8 <_printf_i+0x148>
 800665e:	6833      	ldr	r3, [r6, #0]
 8006660:	1d1a      	adds	r2, r3, #4
 8006662:	6032      	str	r2, [r6, #0]
 8006664:	681e      	ldr	r6, [r3, #0]
 8006666:	6862      	ldr	r2, [r4, #4]
 8006668:	2100      	movs	r1, #0
 800666a:	4630      	mov	r0, r6
 800666c:	f7f9 fdd0 	bl	8000210 <memchr>
 8006670:	b108      	cbz	r0, 8006676 <_printf_i+0x1e6>
 8006672:	1b80      	subs	r0, r0, r6
 8006674:	6060      	str	r0, [r4, #4]
 8006676:	6863      	ldr	r3, [r4, #4]
 8006678:	6123      	str	r3, [r4, #16]
 800667a:	2300      	movs	r3, #0
 800667c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006680:	e7aa      	b.n	80065d8 <_printf_i+0x148>
 8006682:	6923      	ldr	r3, [r4, #16]
 8006684:	4632      	mov	r2, r6
 8006686:	4649      	mov	r1, r9
 8006688:	4640      	mov	r0, r8
 800668a:	47d0      	blx	sl
 800668c:	3001      	adds	r0, #1
 800668e:	d0ad      	beq.n	80065ec <_printf_i+0x15c>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	079b      	lsls	r3, r3, #30
 8006694:	d413      	bmi.n	80066be <_printf_i+0x22e>
 8006696:	68e0      	ldr	r0, [r4, #12]
 8006698:	9b03      	ldr	r3, [sp, #12]
 800669a:	4298      	cmp	r0, r3
 800669c:	bfb8      	it	lt
 800669e:	4618      	movlt	r0, r3
 80066a0:	e7a6      	b.n	80065f0 <_printf_i+0x160>
 80066a2:	2301      	movs	r3, #1
 80066a4:	4632      	mov	r2, r6
 80066a6:	4649      	mov	r1, r9
 80066a8:	4640      	mov	r0, r8
 80066aa:	47d0      	blx	sl
 80066ac:	3001      	adds	r0, #1
 80066ae:	d09d      	beq.n	80065ec <_printf_i+0x15c>
 80066b0:	3501      	adds	r5, #1
 80066b2:	68e3      	ldr	r3, [r4, #12]
 80066b4:	9903      	ldr	r1, [sp, #12]
 80066b6:	1a5b      	subs	r3, r3, r1
 80066b8:	42ab      	cmp	r3, r5
 80066ba:	dcf2      	bgt.n	80066a2 <_printf_i+0x212>
 80066bc:	e7eb      	b.n	8006696 <_printf_i+0x206>
 80066be:	2500      	movs	r5, #0
 80066c0:	f104 0619 	add.w	r6, r4, #25
 80066c4:	e7f5      	b.n	80066b2 <_printf_i+0x222>
 80066c6:	bf00      	nop
 80066c8:	080082d5 	.word	0x080082d5
 80066cc:	080082e6 	.word	0x080082e6

080066d0 <__sflush_r>:
 80066d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066d8:	0716      	lsls	r6, r2, #28
 80066da:	4605      	mov	r5, r0
 80066dc:	460c      	mov	r4, r1
 80066de:	d454      	bmi.n	800678a <__sflush_r+0xba>
 80066e0:	684b      	ldr	r3, [r1, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	dc02      	bgt.n	80066ec <__sflush_r+0x1c>
 80066e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	dd48      	ble.n	800677e <__sflush_r+0xae>
 80066ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066ee:	2e00      	cmp	r6, #0
 80066f0:	d045      	beq.n	800677e <__sflush_r+0xae>
 80066f2:	2300      	movs	r3, #0
 80066f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80066f8:	682f      	ldr	r7, [r5, #0]
 80066fa:	6a21      	ldr	r1, [r4, #32]
 80066fc:	602b      	str	r3, [r5, #0]
 80066fe:	d030      	beq.n	8006762 <__sflush_r+0x92>
 8006700:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	0759      	lsls	r1, r3, #29
 8006706:	d505      	bpl.n	8006714 <__sflush_r+0x44>
 8006708:	6863      	ldr	r3, [r4, #4]
 800670a:	1ad2      	subs	r2, r2, r3
 800670c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800670e:	b10b      	cbz	r3, 8006714 <__sflush_r+0x44>
 8006710:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006712:	1ad2      	subs	r2, r2, r3
 8006714:	2300      	movs	r3, #0
 8006716:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006718:	6a21      	ldr	r1, [r4, #32]
 800671a:	4628      	mov	r0, r5
 800671c:	47b0      	blx	r6
 800671e:	1c43      	adds	r3, r0, #1
 8006720:	89a3      	ldrh	r3, [r4, #12]
 8006722:	d106      	bne.n	8006732 <__sflush_r+0x62>
 8006724:	6829      	ldr	r1, [r5, #0]
 8006726:	291d      	cmp	r1, #29
 8006728:	d82b      	bhi.n	8006782 <__sflush_r+0xb2>
 800672a:	4a2a      	ldr	r2, [pc, #168]	@ (80067d4 <__sflush_r+0x104>)
 800672c:	410a      	asrs	r2, r1
 800672e:	07d6      	lsls	r6, r2, #31
 8006730:	d427      	bmi.n	8006782 <__sflush_r+0xb2>
 8006732:	2200      	movs	r2, #0
 8006734:	6062      	str	r2, [r4, #4]
 8006736:	04d9      	lsls	r1, r3, #19
 8006738:	6922      	ldr	r2, [r4, #16]
 800673a:	6022      	str	r2, [r4, #0]
 800673c:	d504      	bpl.n	8006748 <__sflush_r+0x78>
 800673e:	1c42      	adds	r2, r0, #1
 8006740:	d101      	bne.n	8006746 <__sflush_r+0x76>
 8006742:	682b      	ldr	r3, [r5, #0]
 8006744:	b903      	cbnz	r3, 8006748 <__sflush_r+0x78>
 8006746:	6560      	str	r0, [r4, #84]	@ 0x54
 8006748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800674a:	602f      	str	r7, [r5, #0]
 800674c:	b1b9      	cbz	r1, 800677e <__sflush_r+0xae>
 800674e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006752:	4299      	cmp	r1, r3
 8006754:	d002      	beq.n	800675c <__sflush_r+0x8c>
 8006756:	4628      	mov	r0, r5
 8006758:	f000 fa24 	bl	8006ba4 <_free_r>
 800675c:	2300      	movs	r3, #0
 800675e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006760:	e00d      	b.n	800677e <__sflush_r+0xae>
 8006762:	2301      	movs	r3, #1
 8006764:	4628      	mov	r0, r5
 8006766:	47b0      	blx	r6
 8006768:	4602      	mov	r2, r0
 800676a:	1c50      	adds	r0, r2, #1
 800676c:	d1c9      	bne.n	8006702 <__sflush_r+0x32>
 800676e:	682b      	ldr	r3, [r5, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d0c6      	beq.n	8006702 <__sflush_r+0x32>
 8006774:	2b1d      	cmp	r3, #29
 8006776:	d001      	beq.n	800677c <__sflush_r+0xac>
 8006778:	2b16      	cmp	r3, #22
 800677a:	d11e      	bne.n	80067ba <__sflush_r+0xea>
 800677c:	602f      	str	r7, [r5, #0]
 800677e:	2000      	movs	r0, #0
 8006780:	e022      	b.n	80067c8 <__sflush_r+0xf8>
 8006782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006786:	b21b      	sxth	r3, r3
 8006788:	e01b      	b.n	80067c2 <__sflush_r+0xf2>
 800678a:	690f      	ldr	r7, [r1, #16]
 800678c:	2f00      	cmp	r7, #0
 800678e:	d0f6      	beq.n	800677e <__sflush_r+0xae>
 8006790:	0793      	lsls	r3, r2, #30
 8006792:	680e      	ldr	r6, [r1, #0]
 8006794:	bf08      	it	eq
 8006796:	694b      	ldreq	r3, [r1, #20]
 8006798:	600f      	str	r7, [r1, #0]
 800679a:	bf18      	it	ne
 800679c:	2300      	movne	r3, #0
 800679e:	eba6 0807 	sub.w	r8, r6, r7
 80067a2:	608b      	str	r3, [r1, #8]
 80067a4:	f1b8 0f00 	cmp.w	r8, #0
 80067a8:	dde9      	ble.n	800677e <__sflush_r+0xae>
 80067aa:	6a21      	ldr	r1, [r4, #32]
 80067ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80067ae:	4643      	mov	r3, r8
 80067b0:	463a      	mov	r2, r7
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b0      	blx	r6
 80067b6:	2800      	cmp	r0, #0
 80067b8:	dc08      	bgt.n	80067cc <__sflush_r+0xfc>
 80067ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067c2:	81a3      	strh	r3, [r4, #12]
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067cc:	4407      	add	r7, r0
 80067ce:	eba8 0800 	sub.w	r8, r8, r0
 80067d2:	e7e7      	b.n	80067a4 <__sflush_r+0xd4>
 80067d4:	dfbffffe 	.word	0xdfbffffe

080067d8 <_fflush_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	690b      	ldr	r3, [r1, #16]
 80067dc:	4605      	mov	r5, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	b913      	cbnz	r3, 80067e8 <_fflush_r+0x10>
 80067e2:	2500      	movs	r5, #0
 80067e4:	4628      	mov	r0, r5
 80067e6:	bd38      	pop	{r3, r4, r5, pc}
 80067e8:	b118      	cbz	r0, 80067f2 <_fflush_r+0x1a>
 80067ea:	6a03      	ldr	r3, [r0, #32]
 80067ec:	b90b      	cbnz	r3, 80067f2 <_fflush_r+0x1a>
 80067ee:	f7ff fb23 	bl	8005e38 <__sinit>
 80067f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d0f3      	beq.n	80067e2 <_fflush_r+0xa>
 80067fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80067fc:	07d0      	lsls	r0, r2, #31
 80067fe:	d404      	bmi.n	800680a <_fflush_r+0x32>
 8006800:	0599      	lsls	r1, r3, #22
 8006802:	d402      	bmi.n	800680a <_fflush_r+0x32>
 8006804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006806:	f7ff fbf0 	bl	8005fea <__retarget_lock_acquire_recursive>
 800680a:	4628      	mov	r0, r5
 800680c:	4621      	mov	r1, r4
 800680e:	f7ff ff5f 	bl	80066d0 <__sflush_r>
 8006812:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006814:	07da      	lsls	r2, r3, #31
 8006816:	4605      	mov	r5, r0
 8006818:	d4e4      	bmi.n	80067e4 <_fflush_r+0xc>
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	059b      	lsls	r3, r3, #22
 800681e:	d4e1      	bmi.n	80067e4 <_fflush_r+0xc>
 8006820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006822:	f7ff fbe3 	bl	8005fec <__retarget_lock_release_recursive>
 8006826:	e7dd      	b.n	80067e4 <_fflush_r+0xc>

08006828 <__malloc_lock>:
 8006828:	4801      	ldr	r0, [pc, #4]	@ (8006830 <__malloc_lock+0x8>)
 800682a:	f7ff bbde 	b.w	8005fea <__retarget_lock_acquire_recursive>
 800682e:	bf00      	nop
 8006830:	20001180 	.word	0x20001180

08006834 <__malloc_unlock>:
 8006834:	4801      	ldr	r0, [pc, #4]	@ (800683c <__malloc_unlock+0x8>)
 8006836:	f7ff bbd9 	b.w	8005fec <__retarget_lock_release_recursive>
 800683a:	bf00      	nop
 800683c:	20001180 	.word	0x20001180

08006840 <__sread>:
 8006840:	b510      	push	{r4, lr}
 8006842:	460c      	mov	r4, r1
 8006844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006848:	f000 f978 	bl	8006b3c <_read_r>
 800684c:	2800      	cmp	r0, #0
 800684e:	bfab      	itete	ge
 8006850:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006852:	89a3      	ldrhlt	r3, [r4, #12]
 8006854:	181b      	addge	r3, r3, r0
 8006856:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800685a:	bfac      	ite	ge
 800685c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800685e:	81a3      	strhlt	r3, [r4, #12]
 8006860:	bd10      	pop	{r4, pc}

08006862 <__swrite>:
 8006862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006866:	461f      	mov	r7, r3
 8006868:	898b      	ldrh	r3, [r1, #12]
 800686a:	05db      	lsls	r3, r3, #23
 800686c:	4605      	mov	r5, r0
 800686e:	460c      	mov	r4, r1
 8006870:	4616      	mov	r6, r2
 8006872:	d505      	bpl.n	8006880 <__swrite+0x1e>
 8006874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006878:	2302      	movs	r3, #2
 800687a:	2200      	movs	r2, #0
 800687c:	f000 f94c 	bl	8006b18 <_lseek_r>
 8006880:	89a3      	ldrh	r3, [r4, #12]
 8006882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006886:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800688a:	81a3      	strh	r3, [r4, #12]
 800688c:	4632      	mov	r2, r6
 800688e:	463b      	mov	r3, r7
 8006890:	4628      	mov	r0, r5
 8006892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006896:	f000 b973 	b.w	8006b80 <_write_r>

0800689a <__sseek>:
 800689a:	b510      	push	{r4, lr}
 800689c:	460c      	mov	r4, r1
 800689e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a2:	f000 f939 	bl	8006b18 <_lseek_r>
 80068a6:	1c43      	adds	r3, r0, #1
 80068a8:	89a3      	ldrh	r3, [r4, #12]
 80068aa:	bf15      	itete	ne
 80068ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068b6:	81a3      	strheq	r3, [r4, #12]
 80068b8:	bf18      	it	ne
 80068ba:	81a3      	strhne	r3, [r4, #12]
 80068bc:	bd10      	pop	{r4, pc}

080068be <__sclose>:
 80068be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c2:	f000 b8f7 	b.w	8006ab4 <_close_r>

080068c6 <__swbuf_r>:
 80068c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c8:	460e      	mov	r6, r1
 80068ca:	4614      	mov	r4, r2
 80068cc:	4605      	mov	r5, r0
 80068ce:	b118      	cbz	r0, 80068d8 <__swbuf_r+0x12>
 80068d0:	6a03      	ldr	r3, [r0, #32]
 80068d2:	b90b      	cbnz	r3, 80068d8 <__swbuf_r+0x12>
 80068d4:	f7ff fab0 	bl	8005e38 <__sinit>
 80068d8:	69a3      	ldr	r3, [r4, #24]
 80068da:	60a3      	str	r3, [r4, #8]
 80068dc:	89a3      	ldrh	r3, [r4, #12]
 80068de:	071a      	lsls	r2, r3, #28
 80068e0:	d501      	bpl.n	80068e6 <__swbuf_r+0x20>
 80068e2:	6923      	ldr	r3, [r4, #16]
 80068e4:	b943      	cbnz	r3, 80068f8 <__swbuf_r+0x32>
 80068e6:	4621      	mov	r1, r4
 80068e8:	4628      	mov	r0, r5
 80068ea:	f000 f82b 	bl	8006944 <__swsetup_r>
 80068ee:	b118      	cbz	r0, 80068f8 <__swbuf_r+0x32>
 80068f0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80068f4:	4638      	mov	r0, r7
 80068f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	6922      	ldr	r2, [r4, #16]
 80068fc:	1a98      	subs	r0, r3, r2
 80068fe:	6963      	ldr	r3, [r4, #20]
 8006900:	b2f6      	uxtb	r6, r6
 8006902:	4283      	cmp	r3, r0
 8006904:	4637      	mov	r7, r6
 8006906:	dc05      	bgt.n	8006914 <__swbuf_r+0x4e>
 8006908:	4621      	mov	r1, r4
 800690a:	4628      	mov	r0, r5
 800690c:	f7ff ff64 	bl	80067d8 <_fflush_r>
 8006910:	2800      	cmp	r0, #0
 8006912:	d1ed      	bne.n	80068f0 <__swbuf_r+0x2a>
 8006914:	68a3      	ldr	r3, [r4, #8]
 8006916:	3b01      	subs	r3, #1
 8006918:	60a3      	str	r3, [r4, #8]
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	6022      	str	r2, [r4, #0]
 8006920:	701e      	strb	r6, [r3, #0]
 8006922:	6962      	ldr	r2, [r4, #20]
 8006924:	1c43      	adds	r3, r0, #1
 8006926:	429a      	cmp	r2, r3
 8006928:	d004      	beq.n	8006934 <__swbuf_r+0x6e>
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	07db      	lsls	r3, r3, #31
 800692e:	d5e1      	bpl.n	80068f4 <__swbuf_r+0x2e>
 8006930:	2e0a      	cmp	r6, #10
 8006932:	d1df      	bne.n	80068f4 <__swbuf_r+0x2e>
 8006934:	4621      	mov	r1, r4
 8006936:	4628      	mov	r0, r5
 8006938:	f7ff ff4e 	bl	80067d8 <_fflush_r>
 800693c:	2800      	cmp	r0, #0
 800693e:	d0d9      	beq.n	80068f4 <__swbuf_r+0x2e>
 8006940:	e7d6      	b.n	80068f0 <__swbuf_r+0x2a>
	...

08006944 <__swsetup_r>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	4b29      	ldr	r3, [pc, #164]	@ (80069ec <__swsetup_r+0xa8>)
 8006948:	4605      	mov	r5, r0
 800694a:	6818      	ldr	r0, [r3, #0]
 800694c:	460c      	mov	r4, r1
 800694e:	b118      	cbz	r0, 8006958 <__swsetup_r+0x14>
 8006950:	6a03      	ldr	r3, [r0, #32]
 8006952:	b90b      	cbnz	r3, 8006958 <__swsetup_r+0x14>
 8006954:	f7ff fa70 	bl	8005e38 <__sinit>
 8006958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800695c:	0719      	lsls	r1, r3, #28
 800695e:	d422      	bmi.n	80069a6 <__swsetup_r+0x62>
 8006960:	06da      	lsls	r2, r3, #27
 8006962:	d407      	bmi.n	8006974 <__swsetup_r+0x30>
 8006964:	2209      	movs	r2, #9
 8006966:	602a      	str	r2, [r5, #0]
 8006968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800696c:	81a3      	strh	r3, [r4, #12]
 800696e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006972:	e033      	b.n	80069dc <__swsetup_r+0x98>
 8006974:	0758      	lsls	r0, r3, #29
 8006976:	d512      	bpl.n	800699e <__swsetup_r+0x5a>
 8006978:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800697a:	b141      	cbz	r1, 800698e <__swsetup_r+0x4a>
 800697c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006980:	4299      	cmp	r1, r3
 8006982:	d002      	beq.n	800698a <__swsetup_r+0x46>
 8006984:	4628      	mov	r0, r5
 8006986:	f000 f90d 	bl	8006ba4 <_free_r>
 800698a:	2300      	movs	r3, #0
 800698c:	6363      	str	r3, [r4, #52]	@ 0x34
 800698e:	89a3      	ldrh	r3, [r4, #12]
 8006990:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006994:	81a3      	strh	r3, [r4, #12]
 8006996:	2300      	movs	r3, #0
 8006998:	6063      	str	r3, [r4, #4]
 800699a:	6923      	ldr	r3, [r4, #16]
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	f043 0308 	orr.w	r3, r3, #8
 80069a4:	81a3      	strh	r3, [r4, #12]
 80069a6:	6923      	ldr	r3, [r4, #16]
 80069a8:	b94b      	cbnz	r3, 80069be <__swsetup_r+0x7a>
 80069aa:	89a3      	ldrh	r3, [r4, #12]
 80069ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80069b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069b4:	d003      	beq.n	80069be <__swsetup_r+0x7a>
 80069b6:	4621      	mov	r1, r4
 80069b8:	4628      	mov	r0, r5
 80069ba:	f000 f83f 	bl	8006a3c <__smakebuf_r>
 80069be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069c2:	f013 0201 	ands.w	r2, r3, #1
 80069c6:	d00a      	beq.n	80069de <__swsetup_r+0x9a>
 80069c8:	2200      	movs	r2, #0
 80069ca:	60a2      	str	r2, [r4, #8]
 80069cc:	6962      	ldr	r2, [r4, #20]
 80069ce:	4252      	negs	r2, r2
 80069d0:	61a2      	str	r2, [r4, #24]
 80069d2:	6922      	ldr	r2, [r4, #16]
 80069d4:	b942      	cbnz	r2, 80069e8 <__swsetup_r+0xa4>
 80069d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80069da:	d1c5      	bne.n	8006968 <__swsetup_r+0x24>
 80069dc:	bd38      	pop	{r3, r4, r5, pc}
 80069de:	0799      	lsls	r1, r3, #30
 80069e0:	bf58      	it	pl
 80069e2:	6962      	ldrpl	r2, [r4, #20]
 80069e4:	60a2      	str	r2, [r4, #8]
 80069e6:	e7f4      	b.n	80069d2 <__swsetup_r+0x8e>
 80069e8:	2000      	movs	r0, #0
 80069ea:	e7f7      	b.n	80069dc <__swsetup_r+0x98>
 80069ec:	20000028 	.word	0x20000028

080069f0 <__swhatbuf_r>:
 80069f0:	b570      	push	{r4, r5, r6, lr}
 80069f2:	460c      	mov	r4, r1
 80069f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f8:	2900      	cmp	r1, #0
 80069fa:	b096      	sub	sp, #88	@ 0x58
 80069fc:	4615      	mov	r5, r2
 80069fe:	461e      	mov	r6, r3
 8006a00:	da0d      	bge.n	8006a1e <__swhatbuf_r+0x2e>
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a08:	f04f 0100 	mov.w	r1, #0
 8006a0c:	bf14      	ite	ne
 8006a0e:	2340      	movne	r3, #64	@ 0x40
 8006a10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a14:	2000      	movs	r0, #0
 8006a16:	6031      	str	r1, [r6, #0]
 8006a18:	602b      	str	r3, [r5, #0]
 8006a1a:	b016      	add	sp, #88	@ 0x58
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
 8006a1e:	466a      	mov	r2, sp
 8006a20:	f000 f858 	bl	8006ad4 <_fstat_r>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	dbec      	blt.n	8006a02 <__swhatbuf_r+0x12>
 8006a28:	9901      	ldr	r1, [sp, #4]
 8006a2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a32:	4259      	negs	r1, r3
 8006a34:	4159      	adcs	r1, r3
 8006a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a3a:	e7eb      	b.n	8006a14 <__swhatbuf_r+0x24>

08006a3c <__smakebuf_r>:
 8006a3c:	898b      	ldrh	r3, [r1, #12]
 8006a3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a40:	079d      	lsls	r5, r3, #30
 8006a42:	4606      	mov	r6, r0
 8006a44:	460c      	mov	r4, r1
 8006a46:	d507      	bpl.n	8006a58 <__smakebuf_r+0x1c>
 8006a48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	6123      	str	r3, [r4, #16]
 8006a50:	2301      	movs	r3, #1
 8006a52:	6163      	str	r3, [r4, #20]
 8006a54:	b003      	add	sp, #12
 8006a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a58:	ab01      	add	r3, sp, #4
 8006a5a:	466a      	mov	r2, sp
 8006a5c:	f7ff ffc8 	bl	80069f0 <__swhatbuf_r>
 8006a60:	9f00      	ldr	r7, [sp, #0]
 8006a62:	4605      	mov	r5, r0
 8006a64:	4639      	mov	r1, r7
 8006a66:	4630      	mov	r0, r6
 8006a68:	f7ff fc24 	bl	80062b4 <_malloc_r>
 8006a6c:	b948      	cbnz	r0, 8006a82 <__smakebuf_r+0x46>
 8006a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a72:	059a      	lsls	r2, r3, #22
 8006a74:	d4ee      	bmi.n	8006a54 <__smakebuf_r+0x18>
 8006a76:	f023 0303 	bic.w	r3, r3, #3
 8006a7a:	f043 0302 	orr.w	r3, r3, #2
 8006a7e:	81a3      	strh	r3, [r4, #12]
 8006a80:	e7e2      	b.n	8006a48 <__smakebuf_r+0xc>
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	6020      	str	r0, [r4, #0]
 8006a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a8a:	81a3      	strh	r3, [r4, #12]
 8006a8c:	9b01      	ldr	r3, [sp, #4]
 8006a8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a92:	b15b      	cbz	r3, 8006aac <__smakebuf_r+0x70>
 8006a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a98:	4630      	mov	r0, r6
 8006a9a:	f000 f82d 	bl	8006af8 <_isatty_r>
 8006a9e:	b128      	cbz	r0, 8006aac <__smakebuf_r+0x70>
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	f023 0303 	bic.w	r3, r3, #3
 8006aa6:	f043 0301 	orr.w	r3, r3, #1
 8006aaa:	81a3      	strh	r3, [r4, #12]
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	431d      	orrs	r5, r3
 8006ab0:	81a5      	strh	r5, [r4, #12]
 8006ab2:	e7cf      	b.n	8006a54 <__smakebuf_r+0x18>

08006ab4 <_close_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4d06      	ldr	r5, [pc, #24]	@ (8006ad0 <_close_r+0x1c>)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	4604      	mov	r4, r0
 8006abc:	4608      	mov	r0, r1
 8006abe:	602b      	str	r3, [r5, #0]
 8006ac0:	f7fa f903 	bl	8000cca <_close>
 8006ac4:	1c43      	adds	r3, r0, #1
 8006ac6:	d102      	bne.n	8006ace <_close_r+0x1a>
 8006ac8:	682b      	ldr	r3, [r5, #0]
 8006aca:	b103      	cbz	r3, 8006ace <_close_r+0x1a>
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	bd38      	pop	{r3, r4, r5, pc}
 8006ad0:	2000118c 	.word	0x2000118c

08006ad4 <_fstat_r>:
 8006ad4:	b538      	push	{r3, r4, r5, lr}
 8006ad6:	4d07      	ldr	r5, [pc, #28]	@ (8006af4 <_fstat_r+0x20>)
 8006ad8:	2300      	movs	r3, #0
 8006ada:	4604      	mov	r4, r0
 8006adc:	4608      	mov	r0, r1
 8006ade:	4611      	mov	r1, r2
 8006ae0:	602b      	str	r3, [r5, #0]
 8006ae2:	f7fa f8fe 	bl	8000ce2 <_fstat>
 8006ae6:	1c43      	adds	r3, r0, #1
 8006ae8:	d102      	bne.n	8006af0 <_fstat_r+0x1c>
 8006aea:	682b      	ldr	r3, [r5, #0]
 8006aec:	b103      	cbz	r3, 8006af0 <_fstat_r+0x1c>
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	bd38      	pop	{r3, r4, r5, pc}
 8006af2:	bf00      	nop
 8006af4:	2000118c 	.word	0x2000118c

08006af8 <_isatty_r>:
 8006af8:	b538      	push	{r3, r4, r5, lr}
 8006afa:	4d06      	ldr	r5, [pc, #24]	@ (8006b14 <_isatty_r+0x1c>)
 8006afc:	2300      	movs	r3, #0
 8006afe:	4604      	mov	r4, r0
 8006b00:	4608      	mov	r0, r1
 8006b02:	602b      	str	r3, [r5, #0]
 8006b04:	f7fa f8fd 	bl	8000d02 <_isatty>
 8006b08:	1c43      	adds	r3, r0, #1
 8006b0a:	d102      	bne.n	8006b12 <_isatty_r+0x1a>
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	b103      	cbz	r3, 8006b12 <_isatty_r+0x1a>
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	bd38      	pop	{r3, r4, r5, pc}
 8006b14:	2000118c 	.word	0x2000118c

08006b18 <_lseek_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	4d07      	ldr	r5, [pc, #28]	@ (8006b38 <_lseek_r+0x20>)
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	4608      	mov	r0, r1
 8006b20:	4611      	mov	r1, r2
 8006b22:	2200      	movs	r2, #0
 8006b24:	602a      	str	r2, [r5, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	f7fa f8f6 	bl	8000d18 <_lseek>
 8006b2c:	1c43      	adds	r3, r0, #1
 8006b2e:	d102      	bne.n	8006b36 <_lseek_r+0x1e>
 8006b30:	682b      	ldr	r3, [r5, #0]
 8006b32:	b103      	cbz	r3, 8006b36 <_lseek_r+0x1e>
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	bd38      	pop	{r3, r4, r5, pc}
 8006b38:	2000118c 	.word	0x2000118c

08006b3c <_read_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4d07      	ldr	r5, [pc, #28]	@ (8006b5c <_read_r+0x20>)
 8006b40:	4604      	mov	r4, r0
 8006b42:	4608      	mov	r0, r1
 8006b44:	4611      	mov	r1, r2
 8006b46:	2200      	movs	r2, #0
 8006b48:	602a      	str	r2, [r5, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f7fa f884 	bl	8000c58 <_read>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d102      	bne.n	8006b5a <_read_r+0x1e>
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	b103      	cbz	r3, 8006b5a <_read_r+0x1e>
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	2000118c 	.word	0x2000118c

08006b60 <_sbrk_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	4d06      	ldr	r5, [pc, #24]	@ (8006b7c <_sbrk_r+0x1c>)
 8006b64:	2300      	movs	r3, #0
 8006b66:	4604      	mov	r4, r0
 8006b68:	4608      	mov	r0, r1
 8006b6a:	602b      	str	r3, [r5, #0]
 8006b6c:	f7fa f8e2 	bl	8000d34 <_sbrk>
 8006b70:	1c43      	adds	r3, r0, #1
 8006b72:	d102      	bne.n	8006b7a <_sbrk_r+0x1a>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	b103      	cbz	r3, 8006b7a <_sbrk_r+0x1a>
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
 8006b7c:	2000118c 	.word	0x2000118c

08006b80 <_write_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4d07      	ldr	r5, [pc, #28]	@ (8006ba0 <_write_r+0x20>)
 8006b84:	4604      	mov	r4, r0
 8006b86:	4608      	mov	r0, r1
 8006b88:	4611      	mov	r1, r2
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	602a      	str	r2, [r5, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f7fa f87f 	bl	8000c92 <_write>
 8006b94:	1c43      	adds	r3, r0, #1
 8006b96:	d102      	bne.n	8006b9e <_write_r+0x1e>
 8006b98:	682b      	ldr	r3, [r5, #0]
 8006b9a:	b103      	cbz	r3, 8006b9e <_write_r+0x1e>
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ba0:	2000118c 	.word	0x2000118c

08006ba4 <_free_r>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	2900      	cmp	r1, #0
 8006baa:	d041      	beq.n	8006c30 <_free_r+0x8c>
 8006bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bb0:	1f0c      	subs	r4, r1, #4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	bfb8      	it	lt
 8006bb6:	18e4      	addlt	r4, r4, r3
 8006bb8:	f7ff fe36 	bl	8006828 <__malloc_lock>
 8006bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8006c34 <_free_r+0x90>)
 8006bbe:	6813      	ldr	r3, [r2, #0]
 8006bc0:	b933      	cbnz	r3, 8006bd0 <_free_r+0x2c>
 8006bc2:	6063      	str	r3, [r4, #4]
 8006bc4:	6014      	str	r4, [r2, #0]
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bcc:	f7ff be32 	b.w	8006834 <__malloc_unlock>
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	d908      	bls.n	8006be6 <_free_r+0x42>
 8006bd4:	6820      	ldr	r0, [r4, #0]
 8006bd6:	1821      	adds	r1, r4, r0
 8006bd8:	428b      	cmp	r3, r1
 8006bda:	bf01      	itttt	eq
 8006bdc:	6819      	ldreq	r1, [r3, #0]
 8006bde:	685b      	ldreq	r3, [r3, #4]
 8006be0:	1809      	addeq	r1, r1, r0
 8006be2:	6021      	streq	r1, [r4, #0]
 8006be4:	e7ed      	b.n	8006bc2 <_free_r+0x1e>
 8006be6:	461a      	mov	r2, r3
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	b10b      	cbz	r3, 8006bf0 <_free_r+0x4c>
 8006bec:	42a3      	cmp	r3, r4
 8006bee:	d9fa      	bls.n	8006be6 <_free_r+0x42>
 8006bf0:	6811      	ldr	r1, [r2, #0]
 8006bf2:	1850      	adds	r0, r2, r1
 8006bf4:	42a0      	cmp	r0, r4
 8006bf6:	d10b      	bne.n	8006c10 <_free_r+0x6c>
 8006bf8:	6820      	ldr	r0, [r4, #0]
 8006bfa:	4401      	add	r1, r0
 8006bfc:	1850      	adds	r0, r2, r1
 8006bfe:	4283      	cmp	r3, r0
 8006c00:	6011      	str	r1, [r2, #0]
 8006c02:	d1e0      	bne.n	8006bc6 <_free_r+0x22>
 8006c04:	6818      	ldr	r0, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	6053      	str	r3, [r2, #4]
 8006c0a:	4408      	add	r0, r1
 8006c0c:	6010      	str	r0, [r2, #0]
 8006c0e:	e7da      	b.n	8006bc6 <_free_r+0x22>
 8006c10:	d902      	bls.n	8006c18 <_free_r+0x74>
 8006c12:	230c      	movs	r3, #12
 8006c14:	602b      	str	r3, [r5, #0]
 8006c16:	e7d6      	b.n	8006bc6 <_free_r+0x22>
 8006c18:	6820      	ldr	r0, [r4, #0]
 8006c1a:	1821      	adds	r1, r4, r0
 8006c1c:	428b      	cmp	r3, r1
 8006c1e:	bf04      	itt	eq
 8006c20:	6819      	ldreq	r1, [r3, #0]
 8006c22:	685b      	ldreq	r3, [r3, #4]
 8006c24:	6063      	str	r3, [r4, #4]
 8006c26:	bf04      	itt	eq
 8006c28:	1809      	addeq	r1, r1, r0
 8006c2a:	6021      	streq	r1, [r4, #0]
 8006c2c:	6054      	str	r4, [r2, #4]
 8006c2e:	e7ca      	b.n	8006bc6 <_free_r+0x22>
 8006c30:	bd38      	pop	{r3, r4, r5, pc}
 8006c32:	bf00      	nop
 8006c34:	20001188 	.word	0x20001188

08006c38 <_init>:
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	bf00      	nop
 8006c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3e:	bc08      	pop	{r3}
 8006c40:	469e      	mov	lr, r3
 8006c42:	4770      	bx	lr

08006c44 <_fini>:
 8006c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c46:	bf00      	nop
 8006c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4a:	bc08      	pop	{r3}
 8006c4c:	469e      	mov	lr, r3
 8006c4e:	4770      	bx	lr
