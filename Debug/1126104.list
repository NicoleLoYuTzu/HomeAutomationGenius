
1126104.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a94  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e38  08008c64  08008c64  00009c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a9c  08009a9c  0000b1c0  2**0
                  CONTENTS
  4 .ARM          00000008  08009a9c  08009a9c  0000aa9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009aa4  08009aa4  0000b1c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000028  08009aa4  08009aa4  0000aaa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009acc  08009acc  0000aacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08009ad0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000080  08009b50  0000b080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000120  08009bf0  0000b120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004cfc  200001c0  08009c90  0000b1c0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20004ebc  08009c90  0000bebc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000b1c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021360  00000000  00000000  0000b1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005927  00000000  00000000  0002c550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019b8  00000000  00000000  00031e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013af  00000000  00000000  00033830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ecf8  00000000  00000000  00034bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023563  00000000  00000000  000638d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001028e2  00000000  00000000  00086e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0018971c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007128  00000000  00000000  00189760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000054  00000000  00000000  00190888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c0 	.word	0x200001c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008c4c 	.word	0x08008c4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c4 	.word	0x200001c4
 800020c:	08008c4c 	.word	0x08008c4c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000644 <MX_ETH_Init+0x84>)
 80005c6:	4a20      	ldr	r2, [pc, #128]	@ (8000648 <MX_ETH_Init+0x88>)
 80005c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005ca:	4b20      	ldr	r3, [pc, #128]	@ (800064c <MX_ETH_Init+0x8c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005d0:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <MX_ETH_Init+0x8c>)
 80005d2:	2280      	movs	r2, #128	@ 0x80
 80005d4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005d6:	4b1d      	ldr	r3, [pc, #116]	@ (800064c <MX_ETH_Init+0x8c>)
 80005d8:	22e1      	movs	r2, #225	@ 0xe1
 80005da:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005dc:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <MX_ETH_Init+0x8c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	@ (800064c <MX_ETH_Init+0x8c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005e8:	4b18      	ldr	r3, [pc, #96]	@ (800064c <MX_ETH_Init+0x8c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <MX_ETH_Init+0x84>)
 80005f0:	4a16      	ldr	r2, [pc, #88]	@ (800064c <MX_ETH_Init+0x8c>)
 80005f2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80005f4:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <MX_ETH_Init+0x84>)
 80005f6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80005fa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80005fc:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <MX_ETH_Init+0x84>)
 80005fe:	4a14      	ldr	r2, [pc, #80]	@ (8000650 <MX_ETH_Init+0x90>)
 8000600:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000602:	4b10      	ldr	r3, [pc, #64]	@ (8000644 <MX_ETH_Init+0x84>)
 8000604:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <MX_ETH_Init+0x94>)
 8000606:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000608:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <MX_ETH_Init+0x84>)
 800060a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800060e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000610:	480c      	ldr	r0, [pc, #48]	@ (8000644 <MX_ETH_Init+0x84>)
 8000612:	f002 fdd7 	bl	80031c4 <HAL_ETH_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800061c:	f000 fad8 	bl	8000bd0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000620:	2238      	movs	r2, #56	@ 0x38
 8000622:	2100      	movs	r1, #0
 8000624:	480c      	ldr	r0, [pc, #48]	@ (8000658 <MX_ETH_Init+0x98>)
 8000626:	f007 fb01 	bl	8007c2c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800062a:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <MX_ETH_Init+0x98>)
 800062c:	2221      	movs	r2, #33	@ 0x21
 800062e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000630:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <MX_ETH_Init+0x98>)
 8000632:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000636:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000638:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <MX_ETH_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000214 	.word	0x20000214
 8000648:	40028000 	.word	0x40028000
 800064c:	200002c4 	.word	0x200002c4
 8000650:	20000120 	.word	0x20000120
 8000654:	20000080 	.word	0x20000080
 8000658:	200001dc 	.word	0x200001dc

0800065c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08e      	sub	sp, #56	@ 0x38
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a4e      	ldr	r2, [pc, #312]	@ (80007b4 <HAL_ETH_MspInit+0x158>)
 800067a:	4293      	cmp	r3, r2
 800067c:	f040 8096 	bne.w	80007ac <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000680:	4b4d      	ldr	r3, [pc, #308]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000684:	4a4c      	ldr	r2, [pc, #304]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 8000686:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800068a:	6313      	str	r3, [r2, #48]	@ 0x30
 800068c:	4b4a      	ldr	r3, [pc, #296]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000694:	623b      	str	r3, [r7, #32]
 8000696:	6a3b      	ldr	r3, [r7, #32]
 8000698:	4b47      	ldr	r3, [pc, #284]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069c:	4a46      	ldr	r2, [pc, #280]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 800069e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a4:	4b44      	ldr	r3, [pc, #272]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006ac:	61fb      	str	r3, [r7, #28]
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	4b41      	ldr	r3, [pc, #260]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b4:	4a40      	ldr	r2, [pc, #256]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 80006b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80006ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80006bc:	4b3e      	ldr	r3, [pc, #248]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80006c4:	61bb      	str	r3, [r7, #24]
 80006c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c8:	4b3b      	ldr	r3, [pc, #236]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 80006ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006cc:	4a3a      	ldr	r2, [pc, #232]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 80006ce:	f043 0304 	orr.w	r3, r3, #4
 80006d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d4:	4b38      	ldr	r3, [pc, #224]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b35      	ldr	r3, [pc, #212]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e4:	4a34      	ldr	r2, [pc, #208]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ec:	4b32      	ldr	r3, [pc, #200]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	4b2f      	ldr	r3, [pc, #188]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fc:	4a2e      	ldr	r2, [pc, #184]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 80006fe:	f043 0302 	orr.w	r3, r3, #2
 8000702:	6313      	str	r3, [r2, #48]	@ 0x30
 8000704:	4b2c      	ldr	r3, [pc, #176]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000708:	f003 0302 	and.w	r3, r3, #2
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000710:	4b29      	ldr	r3, [pc, #164]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000714:	4a28      	ldr	r2, [pc, #160]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 8000716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800071a:	6313      	str	r3, [r2, #48]	@ 0x30
 800071c:	4b26      	ldr	r3, [pc, #152]	@ (80007b8 <HAL_ETH_MspInit+0x15c>)
 800071e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000728:	2332      	movs	r3, #50	@ 0x32
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000738:	230b      	movs	r3, #11
 800073a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000740:	4619      	mov	r1, r3
 8000742:	481e      	ldr	r0, [pc, #120]	@ (80007bc <HAL_ETH_MspInit+0x160>)
 8000744:	f003 f864 	bl	8003810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000748:	2386      	movs	r3, #134	@ 0x86
 800074a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000754:	2303      	movs	r3, #3
 8000756:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000758:	230b      	movs	r3, #11
 800075a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000760:	4619      	mov	r1, r3
 8000762:	4817      	ldr	r0, [pc, #92]	@ (80007c0 <HAL_ETH_MspInit+0x164>)
 8000764:	f003 f854 	bl	8003810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000768:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800077a:	230b      	movs	r3, #11
 800077c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000782:	4619      	mov	r1, r3
 8000784:	480f      	ldr	r0, [pc, #60]	@ (80007c4 <HAL_ETH_MspInit+0x168>)
 8000786:	f003 f843 	bl	8003810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800078a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800078e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800079c:	230b      	movs	r3, #11
 800079e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a4:	4619      	mov	r1, r3
 80007a6:	4808      	ldr	r0, [pc, #32]	@ (80007c8 <HAL_ETH_MspInit+0x16c>)
 80007a8:	f003 f832 	bl	8003810 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007ac:	bf00      	nop
 80007ae:	3738      	adds	r7, #56	@ 0x38
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40028000 	.word	0x40028000
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020800 	.word	0x40020800
 80007c0:	40020000 	.word	0x40020000
 80007c4:	40020400 	.word	0x40020400
 80007c8:	40021800 	.word	0x40021800

080007cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	@ 0x30
 80007d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b5b      	ldr	r3, [pc, #364]	@ (8000950 <MX_GPIO_Init+0x184>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a5a      	ldr	r2, [pc, #360]	@ (8000950 <MX_GPIO_Init+0x184>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b58      	ldr	r3, [pc, #352]	@ (8000950 <MX_GPIO_Init+0x184>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b55      	ldr	r3, [pc, #340]	@ (8000950 <MX_GPIO_Init+0x184>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a54      	ldr	r2, [pc, #336]	@ (8000950 <MX_GPIO_Init+0x184>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b52      	ldr	r3, [pc, #328]	@ (8000950 <MX_GPIO_Init+0x184>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b4f      	ldr	r3, [pc, #316]	@ (8000950 <MX_GPIO_Init+0x184>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a4e      	ldr	r2, [pc, #312]	@ (8000950 <MX_GPIO_Init+0x184>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b4c      	ldr	r3, [pc, #304]	@ (8000950 <MX_GPIO_Init+0x184>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b49      	ldr	r3, [pc, #292]	@ (8000950 <MX_GPIO_Init+0x184>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a48      	ldr	r2, [pc, #288]	@ (8000950 <MX_GPIO_Init+0x184>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b46      	ldr	r3, [pc, #280]	@ (8000950 <MX_GPIO_Init+0x184>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	4b43      	ldr	r3, [pc, #268]	@ (8000950 <MX_GPIO_Init+0x184>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a42      	ldr	r2, [pc, #264]	@ (8000950 <MX_GPIO_Init+0x184>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b40      	ldr	r3, [pc, #256]	@ (8000950 <MX_GPIO_Init+0x184>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085a:	4b3d      	ldr	r3, [pc, #244]	@ (8000950 <MX_GPIO_Init+0x184>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a3c      	ldr	r2, [pc, #240]	@ (8000950 <MX_GPIO_Init+0x184>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b3a      	ldr	r3, [pc, #232]	@ (8000950 <MX_GPIO_Init+0x184>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IRTX_GPIO_Port, IRTX_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2101      	movs	r1, #1
 8000876:	4837      	ldr	r0, [pc, #220]	@ (8000954 <MX_GPIO_Init+0x188>)
 8000878:	f003 f98e 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000882:	4835      	ldr	r0, [pc, #212]	@ (8000958 <MX_GPIO_Init+0x18c>)
 8000884:	f003 f988 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2140      	movs	r1, #64	@ 0x40
 800088c:	4833      	ldr	r0, [pc, #204]	@ (800095c <MX_GPIO_Init+0x190>)
 800088e:	f003 f983 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000892:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000898:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	482a      	ldr	r0, [pc, #168]	@ (8000954 <MX_GPIO_Init+0x188>)
 80008aa:	f002 ffb1 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRTX_Pin;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IRTX_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4823      	ldr	r0, [pc, #140]	@ (8000954 <MX_GPIO_Init+0x188>)
 80008c6:	f002 ffa3 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ca:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	481d      	ldr	r0, [pc, #116]	@ (8000958 <MX_GPIO_Init+0x18c>)
 80008e4:	f002 ff94 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRRX_Pin;
 80008e8:	2304      	movs	r3, #4
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008ec:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(IRRX_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4817      	ldr	r0, [pc, #92]	@ (800095c <MX_GPIO_Init+0x190>)
 80008fe:	f002 ff87 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000902:	2340      	movs	r3, #64	@ 0x40
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4810      	ldr	r0, [pc, #64]	@ (800095c <MX_GPIO_Init+0x190>)
 800091a:	f002 ff79 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800091e:	2380      	movs	r3, #128	@ 0x80
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	480a      	ldr	r0, [pc, #40]	@ (800095c <MX_GPIO_Init+0x190>)
 8000932:	f002 ff6d 	bl	8003810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2008      	movs	r0, #8
 800093c:	f002 fc0b 	bl	8003156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000940:	2008      	movs	r0, #8
 8000942:	f002 fc24 	bl	800318e <HAL_NVIC_EnableIRQ>

}
 8000946:	bf00      	nop
 8000948:	3730      	adds	r7, #48	@ 0x30
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40020800 	.word	0x40020800
 8000958:	40020400 	.word	0x40020400
 800095c:	40021800 	.word	0x40021800

08000960 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000964:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <MX_I2C1_Init+0x74>)
 8000966:	4a1c      	ldr	r2, [pc, #112]	@ (80009d8 <MX_I2C1_Init+0x78>)
 8000968:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_I2C1_Init+0x74>)
 800096c:	4a1b      	ldr	r2, [pc, #108]	@ (80009dc <MX_I2C1_Init+0x7c>)
 800096e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_I2C1_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000976:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <MX_I2C1_Init+0x74>)
 8000978:	2201      	movs	r2, #1
 800097a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800097c:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <MX_I2C1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000982:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_I2C1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_I2C1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_I2C1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800099a:	480e      	ldr	r0, [pc, #56]	@ (80009d4 <MX_I2C1_Init+0x74>)
 800099c:	f003 f948 	bl	8003c30 <HAL_I2C_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009a6:	f000 f913 	bl	8000bd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4809      	ldr	r0, [pc, #36]	@ (80009d4 <MX_I2C1_Init+0x74>)
 80009ae:	f003 fd29 	bl	8004404 <HAL_I2CEx_ConfigAnalogFilter>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009b8:	f000 f90a 	bl	8000bd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_I2C1_Init+0x74>)
 80009c0:	f003 fd6b 	bl	800449a <HAL_I2CEx_ConfigDigitalFilter>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ca:	f000 f901 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200002cc 	.word	0x200002cc
 80009d8:	40005400 	.word	0x40005400
 80009dc:	00808cd2 	.word	0x00808cd2

080009e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0aa      	sub	sp, #168	@ 0xa8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	2284      	movs	r2, #132	@ 0x84
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f007 f913 	bl	8007c2c <memset>
  if(i2cHandle->Instance==I2C1)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a22      	ldr	r2, [pc, #136]	@ (8000a94 <HAL_I2C_MspInit+0xb4>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d13c      	bne.n	8000a8a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a14:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f004 fbaa 	bl	8005178 <HAL_RCCEx_PeriphCLKConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a2a:	f000 f8d1 	bl	8000bd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <HAL_I2C_MspInit+0xb8>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a19      	ldr	r2, [pc, #100]	@ (8000a98 <HAL_I2C_MspInit+0xb8>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <HAL_I2C_MspInit+0xb8>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000a46:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a4e:	2312      	movs	r3, #18
 8000a50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a60:	2304      	movs	r3, #4
 8000a62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a66:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480b      	ldr	r0, [pc, #44]	@ (8000a9c <HAL_I2C_MspInit+0xbc>)
 8000a6e:	f002 fecf 	bl	8003810 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <HAL_I2C_MspInit+0xb8>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	4a08      	ldr	r2, [pc, #32]	@ (8000a98 <HAL_I2C_MspInit+0xb8>)
 8000a78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <HAL_I2C_MspInit+0xb8>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	37a8      	adds	r7, #168	@ 0xa8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40005400 	.word	0x40005400
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa6:	f002 f9fa 	bl	8002e9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aaa:	f000 f829 	bl	8000b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aae:	f7ff fe8d 	bl	80007cc <MX_GPIO_Init>
  MX_ETH_Init();
 8000ab2:	f7ff fd85 	bl	80005c0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ab6:	f000 fab9 	bl	800102c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000aba:	f000 fb47 	bl	800114c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000abe:	f000 fa01 	bl	8000ec4 <MX_TIM6_Init>
  MX_I2C1_Init();
 8000ac2:	f7ff ff4d 	bl	8000960 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000ac6:	f000 f9a3 	bl	8000e10 <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Call usermain function
  usermain();
 8000aca:	f000 ff53 	bl	8001974 <usermain>

  GPIO_PinState ldState = GPIO_PIN_RESET;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	71fb      	strb	r3, [r7, #7]

  while (1)
  {
	 HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, ldState);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ada:	4808      	ldr	r0, [pc, #32]	@ (8000afc <main+0x5c>)
 8000adc:	f003 f85c 	bl	8003b98 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_Delay(500L);
 8000ae0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ae4:	f002 fa38 	bl	8002f58 <HAL_Delay>
	 ldState = !ldState;
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf0c      	ite	eq
 8000aee:	2301      	moveq	r3, #1
 8000af0:	2300      	movne	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	71fb      	strb	r3, [r7, #7]
	 HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, ldState);
 8000af6:	bf00      	nop
 8000af8:	e7eb      	b.n	8000ad2 <main+0x32>
 8000afa:	bf00      	nop
 8000afc:	40020400 	.word	0x40020400

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b094      	sub	sp, #80	@ 0x50
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0320 	add.w	r3, r7, #32
 8000b0a:	2230      	movs	r2, #48	@ 0x30
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f007 f88c 	bl	8007c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b24:	f003 fe4e 	bl	80047c4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b28:	4b27      	ldr	r3, [pc, #156]	@ (8000bc8 <SystemClock_Config+0xc8>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	4a26      	ldr	r2, [pc, #152]	@ (8000bc8 <SystemClock_Config+0xc8>)
 8000b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b34:	4b24      	ldr	r3, [pc, #144]	@ (8000bc8 <SystemClock_Config+0xc8>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b40:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <SystemClock_Config+0xcc>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b48:	4a20      	ldr	r2, [pc, #128]	@ (8000bcc <SystemClock_Config+0xcc>)
 8000b4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <SystemClock_Config+0xcc>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b60:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b66:	2302      	movs	r3, #2
 8000b68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b74:	2348      	movs	r3, #72	@ 0x48
 8000b76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b80:	f107 0320 	add.w	r3, r7, #32
 8000b84:	4618      	mov	r0, r3
 8000b86:	f003 fe2d 	bl	80047e4 <HAL_RCC_OscConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b90:	f000 f81e 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b94:	230f      	movs	r3, #15
 8000b96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ba0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	2102      	movs	r1, #2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f004 f8bb 	bl	8004d2c <HAL_RCC_ClockConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bbc:	f000 f808 	bl	8000bd0 <Error_Handler>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3750      	adds	r7, #80	@ 0x50
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40007000 	.word	0x40007000

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <Error_Handler+0x8>

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <HAL_MspInit+0x44>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c20 <HAL_MspInit+0x44>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bee:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <HAL_MspInit+0x44>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <HAL_MspInit+0x44>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfe:	4a08      	ldr	r2, [pc, #32]	@ (8000c20 <HAL_MspInit+0x44>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_MspInit+0x44>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7a:	f002 f94d 	bl	8002f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRRX_Pin);
 8000c86:	2004      	movs	r0, #4
 8000c88:	f002 ffba 	bl	8003c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c94:	4802      	ldr	r0, [pc, #8]	@ (8000ca0 <TIM6_DAC_IRQHandler+0x10>)
 8000c96:	f005 f881 	bl	8005d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000370 	.word	0x20000370

08000ca4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e00a      	b.n	8000ccc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cb6:	f3af 8000 	nop.w
 8000cba:	4601      	mov	r1, r0
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60ba      	str	r2, [r7, #8]
 8000cc2:	b2ca      	uxtb	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf0      	blt.n	8000cb6 <_read+0x12>
  }

  return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e009      	b.n	8000d04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	60ba      	str	r2, [r7, #8]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 ff19 	bl	8001b30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dbf1      	blt.n	8000cf0 <_write+0x12>
  }
  return len;
 8000d0c:	687b      	ldr	r3, [r7, #4]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_close>:

int _close(int file)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_isatty>:

int _isatty(int file)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d88:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <_sbrk+0x5c>)
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <_sbrk+0x60>)
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <_sbrk+0x64>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <_sbrk+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da2:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d207      	bcs.n	8000dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db0:	f006 ff44 	bl	8007c3c <__errno>
 8000db4:	4603      	mov	r3, r0
 8000db6:	220c      	movs	r2, #12
 8000db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dbe:	e009      	b.n	8000dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <_sbrk+0x64>)
 8000dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20050000 	.word	0x20050000
 8000de0:	00000400 	.word	0x00000400
 8000de4:	20000320 	.word	0x20000320
 8000de8:	20004ec0 	.word	0x20004ec0

08000dec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e22:	463b      	mov	r3, r7
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
 8000e30:	615a      	str	r2, [r3, #20]
 8000e32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e34:	4b21      	ldr	r3, [pc, #132]	@ (8000ebc <MX_TIM3_Init+0xac>)
 8000e36:	4a22      	ldr	r2, [pc, #136]	@ (8000ec0 <MX_TIM3_Init+0xb0>)
 8000e38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e3a:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <MX_TIM3_Init+0xac>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e40:	4b1e      	ldr	r3, [pc, #120]	@ (8000ebc <MX_TIM3_Init+0xac>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e46:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <MX_TIM3_Init+0xac>)
 8000e48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <MX_TIM3_Init+0xac>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e54:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <MX_TIM3_Init+0xac>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e5a:	4818      	ldr	r0, [pc, #96]	@ (8000ebc <MX_TIM3_Init+0xac>)
 8000e5c:	f004 fe4c 	bl	8005af8 <HAL_TIM_PWM_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e66:	f7ff feb3 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4810      	ldr	r0, [pc, #64]	@ (8000ebc <MX_TIM3_Init+0xac>)
 8000e7a:	f005 fd0f 	bl	800689c <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e84:	f7ff fea4 	bl	8000bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e88:	2360      	movs	r3, #96	@ 0x60
 8000e8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4807      	ldr	r0, [pc, #28]	@ (8000ebc <MX_TIM3_Init+0xac>)
 8000ea0:	f005 f89c 	bl	8005fdc <HAL_TIM_PWM_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000eaa:	f7ff fe91 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000eae:	4803      	ldr	r0, [pc, #12]	@ (8000ebc <MX_TIM3_Init+0xac>)
 8000eb0:	f000 f884 	bl	8000fbc <HAL_TIM_MspPostInit>

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	@ 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000324 	.word	0x20000324
 8000ec0:	40000400 	.word	0x40000400

08000ec4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <MX_TIM6_Init+0x64>)
 8000ed6:	4a15      	ldr	r2, [pc, #84]	@ (8000f2c <MX_TIM6_Init+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8000eda:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <MX_TIM6_Init+0x64>)
 8000edc:	2247      	movs	r2, #71	@ 0x47
 8000ede:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <MX_TIM6_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <MX_TIM6_Init+0x64>)
 8000ee8:	2209      	movs	r2, #9
 8000eea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <MX_TIM6_Init+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ef2:	480d      	ldr	r0, [pc, #52]	@ (8000f28 <MX_TIM6_Init+0x64>)
 8000ef4:	f004 fd30 	bl	8005958 <HAL_TIM_Base_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000efe:	f7ff fe67 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4806      	ldr	r0, [pc, #24]	@ (8000f28 <MX_TIM6_Init+0x64>)
 8000f10:	f005 fcc4 	bl	800689c <HAL_TIMEx_MasterConfigSynchronization>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000f1a:	f7ff fe59 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000370 	.word	0x20000370
 8000f2c:	40001000 	.word	0x40001000

08000f30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <HAL_TIM_PWM_MspInit+0x38>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d10b      	bne.n	8000f5a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f42:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	4a09      	ldr	r2, [pc, #36]	@ (8000f6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4e:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40000400 	.word	0x40000400
 8000f6c:	40023800 	.word	0x40023800

08000f70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <HAL_TIM_Base_MspInit+0x44>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d113      	bne.n	8000faa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <HAL_TIM_Base_MspInit+0x48>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb8 <HAL_TIM_Base_MspInit+0x48>)
 8000f88:	f043 0310 	orr.w	r3, r3, #16
 8000f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <HAL_TIM_Base_MspInit+0x48>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2036      	movs	r0, #54	@ 0x36
 8000fa0:	f002 f8d9 	bl	8003156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fa4:	2036      	movs	r0, #54	@ 0x36
 8000fa6:	f002 f8f2 	bl	800318e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40001000 	.word	0x40001000
 8000fb8:	40023800 	.word	0x40023800

08000fbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a11      	ldr	r2, [pc, #68]	@ (8001020 <HAL_TIM_MspPostInit+0x64>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d11c      	bne.n	8001018 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <HAL_TIM_MspPostInit+0x68>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a10      	ldr	r2, [pc, #64]	@ (8001024 <HAL_TIM_MspPostInit+0x68>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <HAL_TIM_MspPostInit+0x68>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ff6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ffa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001008:	2302      	movs	r3, #2
 800100a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4619      	mov	r1, r3
 8001012:	4805      	ldr	r0, [pc, #20]	@ (8001028 <HAL_TIM_MspPostInit+0x6c>)
 8001014:	f002 fbfc 	bl	8003810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40000400 	.word	0x40000400
 8001024:	40023800 	.word	0x40023800
 8001028:	40020800 	.word	0x40020800

0800102c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001030:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <MX_USART3_UART_Init+0x58>)
 8001032:	4a15      	ldr	r2, [pc, #84]	@ (8001088 <MX_USART3_UART_Init+0x5c>)
 8001034:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001036:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <MX_USART3_UART_Init+0x58>)
 8001038:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800103c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <MX_USART3_UART_Init+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001044:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <MX_USART3_UART_Init+0x58>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <MX_USART3_UART_Init+0x58>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <MX_USART3_UART_Init+0x58>)
 8001052:	220c      	movs	r2, #12
 8001054:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <MX_USART3_UART_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800105c:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <MX_USART3_UART_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001062:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <MX_USART3_UART_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <MX_USART3_UART_Init+0x58>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	@ (8001084 <MX_USART3_UART_Init+0x58>)
 8001070:	f005 fcc0 	bl	80069f4 <HAL_UART_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800107a:	f7ff fda9 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200003bc 	.word	0x200003bc
 8001088:	40004800 	.word	0x40004800

0800108c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0aa      	sub	sp, #168	@ 0xa8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	2284      	movs	r2, #132	@ 0x84
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f006 fdbd 	bl	8007c2c <memset>
  if(uartHandle->Instance==USART3)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a22      	ldr	r2, [pc, #136]	@ (8001140 <HAL_UART_MspInit+0xb4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d13c      	bne.n	8001136 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	4618      	mov	r0, r3
 80010cc:	f004 f854 	bl	8005178 <HAL_RCCEx_PeriphCLKConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010d6:	f7ff fd7b 	bl	8000bd0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <HAL_UART_MspInit+0xb8>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	4a19      	ldr	r2, [pc, #100]	@ (8001144 <HAL_UART_MspInit+0xb8>)
 80010e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e6:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <HAL_UART_MspInit+0xb8>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f2:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <HAL_UART_MspInit+0xb8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a13      	ldr	r2, [pc, #76]	@ (8001144 <HAL_UART_MspInit+0xb8>)
 80010f8:	f043 0308 	orr.w	r3, r3, #8
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <HAL_UART_MspInit+0xb8>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800110a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800110e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001124:	2307      	movs	r3, #7
 8001126:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	@ (8001148 <HAL_UART_MspInit+0xbc>)
 8001132:	f002 fb6d 	bl	8003810 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001136:	bf00      	nop
 8001138:	37a8      	adds	r7, #168	@ 0xa8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40004800 	.word	0x40004800
 8001144:	40023800 	.word	0x40023800
 8001148:	40020c00 	.word	0x40020c00

0800114c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001152:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001156:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800115a:	2206      	movs	r2, #6
 800115c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001160:	2202      	movs	r2, #2
 8001162:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800116c:	2202      	movs	r2, #2
 800116e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001172:	2201      	movs	r2, #1
 8001174:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001184:	2201      	movs	r2, #1
 8001186:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001190:	f003 f9cf 	bl	8004532 <HAL_PCD_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800119a:	f7ff fd19 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000444 	.word	0x20000444

080011a8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b0ac      	sub	sp, #176	@ 0xb0
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c0:	f107 0318 	add.w	r3, r7, #24
 80011c4:	2284      	movs	r2, #132	@ 0x84
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f006 fd2f 	bl	8007c2c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011d6:	d159      	bne.n	800128c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011d8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80011dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e4:	f107 0318 	add.w	r3, r7, #24
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 ffc5 	bl	8005178 <HAL_RCCEx_PeriphCLKConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80011f4:	f7ff fcec 	bl	8000bd0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	4b26      	ldr	r3, [pc, #152]	@ (8001294 <HAL_PCD_MspInit+0xec>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fc:	4a25      	ldr	r2, [pc, #148]	@ (8001294 <HAL_PCD_MspInit+0xec>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6313      	str	r3, [r2, #48]	@ 0x30
 8001204:	4b23      	ldr	r3, [pc, #140]	@ (8001294 <HAL_PCD_MspInit+0xec>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001210:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001214:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800122a:	230a      	movs	r3, #10
 800122c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001234:	4619      	mov	r1, r3
 8001236:	4818      	ldr	r0, [pc, #96]	@ (8001298 <HAL_PCD_MspInit+0xf0>)
 8001238:	f002 faea 	bl	8003810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800123c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001240:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001254:	4619      	mov	r1, r3
 8001256:	4810      	ldr	r0, [pc, #64]	@ (8001298 <HAL_PCD_MspInit+0xf0>)
 8001258:	f002 fada 	bl	8003810 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800125c:	4b0d      	ldr	r3, [pc, #52]	@ (8001294 <HAL_PCD_MspInit+0xec>)
 800125e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001260:	4a0c      	ldr	r2, [pc, #48]	@ (8001294 <HAL_PCD_MspInit+0xec>)
 8001262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001266:	6353      	str	r3, [r2, #52]	@ 0x34
 8001268:	4b0a      	ldr	r3, [pc, #40]	@ (8001294 <HAL_PCD_MspInit+0xec>)
 800126a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800126c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4b07      	ldr	r3, [pc, #28]	@ (8001294 <HAL_PCD_MspInit+0xec>)
 8001276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001278:	4a06      	ldr	r2, [pc, #24]	@ (8001294 <HAL_PCD_MspInit+0xec>)
 800127a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800127e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001280:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <HAL_PCD_MspInit+0xec>)
 8001282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800128c:	bf00      	nop
 800128e:	37b0      	adds	r7, #176	@ 0xb0
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000

0800129c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a0:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012a2:	490e      	ldr	r1, [pc, #56]	@ (80012dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012a4:	4a0e      	ldr	r2, [pc, #56]	@ (80012e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0b      	ldr	r2, [pc, #44]	@ (80012e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012b8:	4c0b      	ldr	r4, [pc, #44]	@ (80012e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012c6:	f7ff fd91 	bl	8000dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ca:	f006 fcbd 	bl	8007c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ce:	f7ff fbe7 	bl	8000aa0 <main>
  bx  lr    
 80012d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012dc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80012e0:	08009ad0 	.word	0x08009ad0
  ldr r2, =_sbss
 80012e4:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 80012e8:	20004ebc 	.word	0x20004ebc

080012ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC_IRQHandler>

080012ee <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af04      	add	r7, sp, #16
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80012fa:	230a      	movs	r3, #10
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2301      	movs	r3, #1
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	1cfb      	adds	r3, r7, #3
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	2200      	movs	r2, #0
 800130a:	2178      	movs	r1, #120	@ 0x78
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f002 fd1f 	bl	8003d50 <HAL_I2C_Mem_Write>
 8001312:	4603      	mov	r3, r0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001324:	2064      	movs	r0, #100	@ 0x64
 8001326:	f001 fe17 	bl	8002f58 <HAL_Delay>
    int status = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800132e:	21ae      	movs	r1, #174	@ 0xae
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ffdc 	bl	80012ee <ssd1306_WriteCommand>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4413      	add	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001340:	2120      	movs	r1, #32
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffd3 	bl	80012ee <ssd1306_WriteCommand>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001352:	2110      	movs	r1, #16
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ffca 	bl	80012ee <ssd1306_WriteCommand>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4413      	add	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001364:	21b0      	movs	r1, #176	@ 0xb0
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ffc1 	bl	80012ee <ssd1306_WriteCommand>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001376:	21c8      	movs	r1, #200	@ 0xc8
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffb8 	bl	80012ee <ssd1306_WriteCommand>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4413      	add	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001388:	2100      	movs	r1, #0
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffaf 	bl	80012ee <ssd1306_WriteCommand>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 800139a:	2110      	movs	r1, #16
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ffa6 	bl	80012ee <ssd1306_WriteCommand>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 80013ac:	2140      	movs	r1, #64	@ 0x40
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ff9d 	bl	80012ee <ssd1306_WriteCommand>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 80013be:	2181      	movs	r1, #129	@ 0x81
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff94 	bl	80012ee <ssd1306_WriteCommand>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4413      	add	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 80013d0:	21ff      	movs	r1, #255	@ 0xff
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff8b 	bl	80012ee <ssd1306_WriteCommand>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80013e2:	21a1      	movs	r1, #161	@ 0xa1
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff82 	bl	80012ee <ssd1306_WriteCommand>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4413      	add	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80013f4:	21a6      	movs	r1, #166	@ 0xa6
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ff79 	bl	80012ee <ssd1306_WriteCommand>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001406:	21a8      	movs	r1, #168	@ 0xa8
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff70 	bl	80012ee <ssd1306_WriteCommand>
 800140e:	4603      	mov	r3, r0
 8001410:	461a      	mov	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4413      	add	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001418:	213f      	movs	r1, #63	@ 0x3f
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ff67 	bl	80012ee <ssd1306_WriteCommand>
 8001420:	4603      	mov	r3, r0
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800142a:	21a4      	movs	r1, #164	@ 0xa4
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff5e 	bl	80012ee <ssd1306_WriteCommand>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4413      	add	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 800143c:	21d3      	movs	r1, #211	@ 0xd3
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ff55 	bl	80012ee <ssd1306_WriteCommand>
 8001444:	4603      	mov	r3, r0
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 800144e:	2100      	movs	r1, #0
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ff4c 	bl	80012ee <ssd1306_WriteCommand>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4413      	add	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001460:	21d5      	movs	r1, #213	@ 0xd5
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ff43 	bl	80012ee <ssd1306_WriteCommand>
 8001468:	4603      	mov	r3, r0
 800146a:	461a      	mov	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001472:	21f0      	movs	r1, #240	@ 0xf0
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff3a 	bl	80012ee <ssd1306_WriteCommand>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001484:	21d9      	movs	r1, #217	@ 0xd9
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ff31 	bl	80012ee <ssd1306_WriteCommand>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4413      	add	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001496:	2122      	movs	r1, #34	@ 0x22
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff28 	bl	80012ee <ssd1306_WriteCommand>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4413      	add	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 80014a8:	21da      	movs	r1, #218	@ 0xda
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ff1f 	bl	80012ee <ssd1306_WriteCommand>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 80014ba:	2112      	movs	r1, #18
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff16 	bl	80012ee <ssd1306_WriteCommand>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4413      	add	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 80014cc:	21db      	movs	r1, #219	@ 0xdb
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ff0d 	bl	80012ee <ssd1306_WriteCommand>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 80014de:	2120      	movs	r1, #32
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff04 	bl	80012ee <ssd1306_WriteCommand>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4413      	add	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 80014f0:	218d      	movs	r1, #141	@ 0x8d
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fefb 	bl	80012ee <ssd1306_WriteCommand>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001502:	2114      	movs	r1, #20
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fef2 	bl	80012ee <ssd1306_WriteCommand>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4413      	add	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001514:	21af      	movs	r1, #175	@ 0xaf
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fee9 	bl	80012ee <ssd1306_WriteCommand>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <ssd1306_Init+0x214>
        return 1;
 800152c:	2301      	movs	r3, #1
 800152e:	e00f      	b.n	8001550 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001530:	2000      	movs	r0, #0
 8001532:	f000 f813 	bl	800155c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f834 	bl	80015a4 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <ssd1306_Init+0x23c>)
 800153e:	2200      	movs	r2, #0
 8001540:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001542:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <ssd1306_Init+0x23c>)
 8001544:	2200      	movs	r2, #0
 8001546:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001548:	4b03      	ldr	r3, [pc, #12]	@ (8001558 <ssd1306_Init+0x23c>)
 800154a:	2201      	movs	r2, #1
 800154c:	715a      	strb	r2, [r3, #5]

    return 0;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000d4c 	.word	0x20000d4c

0800155c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	e00d      	b.n	8001588 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <ssd1306_Fill+0x1a>
 8001572:	2100      	movs	r1, #0
 8001574:	e000      	b.n	8001578 <ssd1306_Fill+0x1c>
 8001576:	21ff      	movs	r1, #255	@ 0xff
 8001578:	4a09      	ldr	r2, [pc, #36]	@ (80015a0 <ssd1306_Fill+0x44>)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4413      	add	r3, r2
 800157e:	460a      	mov	r2, r1
 8001580:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3301      	adds	r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800158e:	d3ed      	bcc.n	800156c <ssd1306_Fill+0x10>
    }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	2000094c 	.word	0x2000094c

080015a4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af04      	add	r7, sp, #16
 80015aa:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e020      	b.n	80015f4 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	3b50      	subs	r3, #80	@ 0x50
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	4619      	mov	r1, r3
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fe97 	bl	80012ee <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 80015c0:	2100      	movs	r1, #0
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fe93 	bl	80012ee <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 80015c8:	2110      	movs	r1, #16
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fe8f 	bl	80012ee <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	01db      	lsls	r3, r3, #7
 80015d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001604 <ssd1306_UpdateScreen+0x60>)
 80015d6:	4413      	add	r3, r2
 80015d8:	2264      	movs	r2, #100	@ 0x64
 80015da:	9202      	str	r2, [sp, #8]
 80015dc:	2280      	movs	r2, #128	@ 0x80
 80015de:	9201      	str	r2, [sp, #4]
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2301      	movs	r3, #1
 80015e4:	2240      	movs	r2, #64	@ 0x40
 80015e6:	2178      	movs	r1, #120	@ 0x78
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f002 fbb1 	bl	8003d50 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	3301      	adds	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	2b07      	cmp	r3, #7
 80015f8:	d9db      	bls.n	80015b2 <ssd1306_UpdateScreen+0xe>
    }
}
 80015fa:	bf00      	nop
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000094c 	.word	0x2000094c

08001608 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	460b      	mov	r3, r1
 8001614:	71bb      	strb	r3, [r7, #6]
 8001616:	4613      	mov	r3, r2
 8001618:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	2b00      	cmp	r3, #0
 8001620:	db48      	blt.n	80016b4 <ssd1306_DrawPixel+0xac>
 8001622:	79bb      	ldrb	r3, [r7, #6]
 8001624:	2b3f      	cmp	r3, #63	@ 0x3f
 8001626:	d845      	bhi.n	80016b4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001628:	4b25      	ldr	r3, [pc, #148]	@ (80016c0 <ssd1306_DrawPixel+0xb8>)
 800162a:	791b      	ldrb	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001630:	797b      	ldrb	r3, [r7, #5]
 8001632:	2b00      	cmp	r3, #0
 8001634:	bf0c      	ite	eq
 8001636:	2301      	moveq	r3, #1
 8001638:	2300      	movne	r3, #0
 800163a:	b2db      	uxtb	r3, r3
 800163c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 800163e:	797b      	ldrb	r3, [r7, #5]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d11a      	bne.n	800167a <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001644:	79fa      	ldrb	r2, [r7, #7]
 8001646:	79bb      	ldrb	r3, [r7, #6]
 8001648:	08db      	lsrs	r3, r3, #3
 800164a:	b2d8      	uxtb	r0, r3
 800164c:	4603      	mov	r3, r0
 800164e:	01db      	lsls	r3, r3, #7
 8001650:	4413      	add	r3, r2
 8001652:	4a1c      	ldr	r2, [pc, #112]	@ (80016c4 <ssd1306_DrawPixel+0xbc>)
 8001654:	5cd3      	ldrb	r3, [r2, r3]
 8001656:	b25a      	sxtb	r2, r3
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	2101      	movs	r1, #1
 8001660:	fa01 f303 	lsl.w	r3, r1, r3
 8001664:	b25b      	sxtb	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b259      	sxtb	r1, r3
 800166a:	79fa      	ldrb	r2, [r7, #7]
 800166c:	4603      	mov	r3, r0
 800166e:	01db      	lsls	r3, r3, #7
 8001670:	4413      	add	r3, r2
 8001672:	b2c9      	uxtb	r1, r1
 8001674:	4a13      	ldr	r2, [pc, #76]	@ (80016c4 <ssd1306_DrawPixel+0xbc>)
 8001676:	54d1      	strb	r1, [r2, r3]
 8001678:	e01d      	b.n	80016b6 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800167a:	79fa      	ldrb	r2, [r7, #7]
 800167c:	79bb      	ldrb	r3, [r7, #6]
 800167e:	08db      	lsrs	r3, r3, #3
 8001680:	b2d8      	uxtb	r0, r3
 8001682:	4603      	mov	r3, r0
 8001684:	01db      	lsls	r3, r3, #7
 8001686:	4413      	add	r3, r2
 8001688:	4a0e      	ldr	r2, [pc, #56]	@ (80016c4 <ssd1306_DrawPixel+0xbc>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	b25a      	sxtb	r2, r3
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	2101      	movs	r1, #1
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	b25b      	sxtb	r3, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	4013      	ands	r3, r2
 80016a2:	b259      	sxtb	r1, r3
 80016a4:	79fa      	ldrb	r2, [r7, #7]
 80016a6:	4603      	mov	r3, r0
 80016a8:	01db      	lsls	r3, r3, #7
 80016aa:	4413      	add	r3, r2
 80016ac:	b2c9      	uxtb	r1, r1
 80016ae:	4a05      	ldr	r2, [pc, #20]	@ (80016c4 <ssd1306_DrawPixel+0xbc>)
 80016b0:	54d1      	strb	r1, [r2, r3]
 80016b2:	e000      	b.n	80016b6 <ssd1306_DrawPixel+0xae>
        return;
 80016b4:	bf00      	nop
    }
}
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	20000d4c 	.word	0x20000d4c
 80016c4:	2000094c 	.word	0x2000094c

080016c8 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b08d      	sub	sp, #52	@ 0x34
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4604      	mov	r4, r0
 80016d0:	1d38      	adds	r0, r7, #4
 80016d2:	e880 0006 	stmia.w	r0, {r1, r2}
 80016d6:	461a      	mov	r2, r3
 80016d8:	4623      	mov	r3, r4
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	4613      	mov	r3, r2
 80016de:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80016e0:	4b72      	ldr	r3, [pc, #456]	@ (80018ac <ssd1306_WriteChar+0x1e4>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	793b      	ldrb	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	2b80      	cmp	r3, #128	@ 0x80
 80016ec:	dc06      	bgt.n	80016fc <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80016ee:	4b6f      	ldr	r3, [pc, #444]	@ (80018ac <ssd1306_WriteChar+0x1e4>)
 80016f0:	885b      	ldrh	r3, [r3, #2]
 80016f2:	461a      	mov	r2, r3
 80016f4:	797b      	ldrb	r3, [r7, #5]
 80016f6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80016f8:	2b40      	cmp	r3, #64	@ 0x40
 80016fa:	dd01      	ble.n	8001700 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e0d0      	b.n	80018a2 <ssd1306_WriteChar+0x1da>
    }

    // Translate font to screenbuffer
    if (Font.FontWidth == Font_5x7.FontWidth)
 8001700:	793a      	ldrb	r2, [r7, #4]
 8001702:	4b6b      	ldr	r3, [pc, #428]	@ (80018b0 <ssd1306_WriteChar+0x1e8>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d16e      	bne.n	80017e8 <ssd1306_WriteChar+0x120>
    {
    	uint8_t *pdata = (uint8_t *) Font.data;
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	617b      	str	r3, [r7, #20]
		for (int x = 0; x < Font.FontWidth; x++)
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
 8001712:	e063      	b.n	80017dc <ssd1306_WriteChar+0x114>
		{
			uint8_t b = (ch < 0x80) ?
 8001714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db12      	blt.n	8001742 <ssd1306_WriteChar+0x7a>
					(x < Font.FontWidth - 1) ? pdata[ch * (Font.FontWidth - 1) + x] : 0 :
 800171c:	793b      	ldrb	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
			uint8_t b = (ch < 0x80) ?
 8001720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001722:	429a      	cmp	r2, r3
 8001724:	da0b      	bge.n	800173e <ssd1306_WriteChar+0x76>
					(x < Font.FontWidth - 1) ? pdata[ch * (Font.FontWidth - 1) + x] : 0 :
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	793a      	ldrb	r2, [r7, #4]
 800172a:	3a01      	subs	r2, #1
 800172c:	fb03 f202 	mul.w	r2, r3, r2
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	4413      	add	r3, r2
 8001734:	461a      	mov	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	4413      	add	r3, r2
			uint8_t b = (ch < 0x80) ?
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	e009      	b.n	8001752 <ssd1306_WriteChar+0x8a>
 800173e:	2300      	movs	r3, #0
 8001740:	e007      	b.n	8001752 <ssd1306_WriteChar+0x8a>
					(x < Font.FontWidth - 1) ? 0x7f : 0;
 8001742:	793b      	ldrb	r3, [r7, #4]
 8001744:	3b01      	subs	r3, #1
			uint8_t b = (ch < 0x80) ?
 8001746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001748:	429a      	cmp	r2, r3
 800174a:	da01      	bge.n	8001750 <ssd1306_WriteChar+0x88>
 800174c:	237f      	movs	r3, #127	@ 0x7f
 800174e:	e000      	b.n	8001752 <ssd1306_WriteChar+0x8a>
 8001750:	2300      	movs	r3, #0
 8001752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			for (int y = 0; y < Font.FontHeight; y++)
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	e037      	b.n	80017cc <ssd1306_WriteChar+0x104>
			{
				if (b & 1)
 800175c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d012      	beq.n	800178e <ssd1306_WriteChar+0xc6>
					ssd1306_DrawPixel(SSD1306.CurrentX + x, (SSD1306.CurrentY + y), (SSD1306_COLOR) color);
 8001768:	4b50      	ldr	r3, [pc, #320]	@ (80018ac <ssd1306_WriteChar+0x1e4>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	b2db      	uxtb	r3, r3
 8001772:	4413      	add	r3, r2
 8001774:	b2d8      	uxtb	r0, r3
 8001776:	4b4d      	ldr	r3, [pc, #308]	@ (80018ac <ssd1306_WriteChar+0x1e4>)
 8001778:	885b      	ldrh	r3, [r3, #2]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4413      	add	r3, r2
 8001782:	b2db      	uxtb	r3, r3
 8001784:	7bba      	ldrb	r2, [r7, #14]
 8001786:	4619      	mov	r1, r3
 8001788:	f7ff ff3e 	bl	8001608 <ssd1306_DrawPixel>
 800178c:	e016      	b.n	80017bc <ssd1306_WriteChar+0xf4>
				else
					ssd1306_DrawPixel(SSD1306.CurrentX + x, (SSD1306.CurrentY + y), (SSD1306_COLOR)!color);
 800178e:	4b47      	ldr	r3, [pc, #284]	@ (80018ac <ssd1306_WriteChar+0x1e4>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001796:	b2db      	uxtb	r3, r3
 8001798:	4413      	add	r3, r2
 800179a:	b2d8      	uxtb	r0, r3
 800179c:	4b43      	ldr	r3, [pc, #268]	@ (80018ac <ssd1306_WriteChar+0x1e4>)
 800179e:	885b      	ldrh	r3, [r3, #2]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	b2d9      	uxtb	r1, r3
 80017aa:	7bbb      	ldrb	r3, [r7, #14]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf0c      	ite	eq
 80017b0:	2301      	moveq	r3, #1
 80017b2:	2300      	movne	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	f7ff ff26 	bl	8001608 <ssd1306_DrawPixel>
				b >>= 1;
 80017bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017c0:	085b      	lsrs	r3, r3, #1
 80017c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			for (int y = 0; y < Font.FontHeight; y++)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3301      	adds	r3, #1
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	797b      	ldrb	r3, [r7, #5]
 80017ce:	461a      	mov	r2, r3
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	4293      	cmp	r3, r2
 80017d4:	dbc2      	blt.n	800175c <ssd1306_WriteChar+0x94>
		for (int x = 0; x < Font.FontWidth; x++)
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	3301      	adds	r3, #1
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
 80017dc:	793b      	ldrb	r3, [r7, #4]
 80017de:	461a      	mov	r2, r3
 80017e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e2:	4293      	cmp	r3, r2
 80017e4:	db96      	blt.n	8001714 <ssd1306_WriteChar+0x4c>
 80017e6:	e054      	b.n	8001892 <ssd1306_WriteChar+0x1ca>
			}
		}
    }
    else
    {
		for (i = 0; i < Font.FontHeight; i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ec:	e04c      	b.n	8001888 <ssd1306_WriteChar+0x1c0>
		{
			b = Font.data[(ch - 32) * Font.FontHeight + i];
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	3b20      	subs	r3, #32
 80017f4:	7979      	ldrb	r1, [r7, #5]
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4619      	mov	r1, r3
 80017fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017fe:	440b      	add	r3, r1
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	61bb      	str	r3, [r7, #24]
			for (j = 0; j < Font.FontWidth; j++)
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800180c:	e034      	b.n	8001878 <ssd1306_WriteChar+0x1b0>
				if ((b << j) & 0x8000)
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d012      	beq.n	8001844 <ssd1306_WriteChar+0x17c>
					ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800181e:	4b23      	ldr	r3, [pc, #140]	@ (80018ac <ssd1306_WriteChar+0x1e4>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001826:	b2db      	uxtb	r3, r3
 8001828:	4413      	add	r3, r2
 800182a:	b2d8      	uxtb	r0, r3
 800182c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ac <ssd1306_WriteChar+0x1e4>)
 800182e:	885b      	ldrh	r3, [r3, #2]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4413      	add	r3, r2
 8001838:	b2db      	uxtb	r3, r3
 800183a:	7bba      	ldrb	r2, [r7, #14]
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff fee3 	bl	8001608 <ssd1306_DrawPixel>
 8001842:	e016      	b.n	8001872 <ssd1306_WriteChar+0x1aa>
				else
					ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001844:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <ssd1306_WriteChar+0x1e4>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800184c:	b2db      	uxtb	r3, r3
 800184e:	4413      	add	r3, r2
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <ssd1306_WriteChar+0x1e4>)
 8001854:	885b      	ldrh	r3, [r3, #2]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185a:	b2db      	uxtb	r3, r3
 800185c:	4413      	add	r3, r2
 800185e:	b2d9      	uxtb	r1, r3
 8001860:	7bbb      	ldrb	r3, [r7, #14]
 8001862:	2b00      	cmp	r3, #0
 8001864:	bf0c      	ite	eq
 8001866:	2301      	moveq	r3, #1
 8001868:	2300      	movne	r3, #0
 800186a:	b2db      	uxtb	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	f7ff fecb 	bl	8001608 <ssd1306_DrawPixel>
			for (j = 0; j < Font.FontWidth; j++)
 8001872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001874:	3301      	adds	r3, #1
 8001876:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001878:	793b      	ldrb	r3, [r7, #4]
 800187a:	461a      	mov	r2, r3
 800187c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800187e:	4293      	cmp	r3, r2
 8001880:	d3c5      	bcc.n	800180e <ssd1306_WriteChar+0x146>
		for (i = 0; i < Font.FontHeight; i++)
 8001882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001884:	3301      	adds	r3, #1
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001888:	797b      	ldrb	r3, [r7, #5]
 800188a:	461a      	mov	r2, r3
 800188c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188e:	4293      	cmp	r3, r2
 8001890:	d3ad      	bcc.n	80017ee <ssd1306_WriteChar+0x126>
		}
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <ssd1306_WriteChar+0x1e4>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	793a      	ldrb	r2, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	b29a      	uxth	r2, r3
 800189c:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <ssd1306_WriteChar+0x1e4>)
 800189e:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3734      	adds	r7, #52	@ 0x34
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000d4c 	.word	0x20000d4c
 80018b0:	20000004 	.word	0x20000004

080018b4 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	1d38      	adds	r0, r7, #4
 80018be:	e880 0006 	stmia.w	r0, {r1, r2}
 80018c2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 80018c4:	e012      	b.n	80018ec <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	7818      	ldrb	r0, [r3, #0]
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	1d3a      	adds	r2, r7, #4
 80018ce:	ca06      	ldmia	r2, {r1, r2}
 80018d0:	f7ff fefa 	bl	80016c8 <ssd1306_WriteChar>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d002      	beq.n	80018e6 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	e008      	b.n	80018f8 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3301      	adds	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
    while (*str)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1e8      	bne.n	80018c6 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	781b      	ldrb	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	460a      	mov	r2, r1
 800190a:	71fb      	strb	r3, [r7, #7]
 800190c:	4613      	mov	r3, r2
 800190e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	b29a      	uxth	r2, r3
 8001914:	4b05      	ldr	r3, [pc, #20]	@ (800192c <ssd1306_SetCursor+0x2c>)
 8001916:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001918:	79bb      	ldrb	r3, [r7, #6]
 800191a:	b29a      	uxth	r2, r3
 800191c:	4b03      	ldr	r3, [pc, #12]	@ (800192c <ssd1306_SetCursor+0x2c>)
 800191e:	805a      	strh	r2, [r3, #2]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	20000d4c 	.word	0x20000d4c

08001930 <ssd1306_printf>:

void ssd1306_printf(FontDef Font, SSD1306_COLOR color, const char *format, ...)
{
 8001930:	b408      	push	{r3}
 8001932:	b580      	push	{r7, lr}
 8001934:	b087      	sub	sp, #28
 8001936:	af00      	add	r7, sp, #0
 8001938:	f107 0308 	add.w	r3, r7, #8
 800193c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001940:	4613      	mov	r3, r2
 8001942:	71fb      	strb	r3, [r7, #7]
	static char msg[81];

	va_list argptr;

	va_start(argptr, format);		// pre-format messages
 8001944:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001948:	617b      	str	r3, [r7, #20]
	vsprintf(msg, format, argptr);
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800194e:	4808      	ldr	r0, [pc, #32]	@ (8001970 <ssd1306_printf+0x40>)
 8001950:	f006 f8f2 	bl	8007b38 <vsiprintf>
	va_end(argptr);

	ssd1306_WriteString(msg, Font, color);
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	f107 0208 	add.w	r2, r7, #8
 800195a:	ca06      	ldmia	r2, {r1, r2}
 800195c:	4804      	ldr	r0, [pc, #16]	@ (8001970 <ssd1306_printf+0x40>)
 800195e:	f7ff ffa9 	bl	80018b4 <ssd1306_WriteString>
}
 8001962:	bf00      	nop
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800196c:	b001      	add	sp, #4
 800196e:	4770      	bx	lr
 8001970:	20000d54 	.word	0x20000d54

08001974 <usermain>:
/**	\brief usermain() in C++.
 *
 *	called by main() in C.
 */
void usermain()
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	// start timer with 10us interrupt interval.
	HAL_TIM_Base_Start_IT(&htim6);
 8001978:	480d      	ldr	r0, [pc, #52]	@ (80019b0 <usermain+0x3c>)
 800197a:	f004 f845 	bl	8005a08 <HAL_TIM_Base_Start_IT>

	// initial next wait state
	g_waitState = (HAL_GPIO_ReadPin(IRRX_GPIO_Port, IRRX_Pin) == GPIO_PIN_SET) ? MARK : SPACE;
 800197e:	2104      	movs	r1, #4
 8001980:	480c      	ldr	r0, [pc, #48]	@ (80019b4 <usermain+0x40>)
 8001982:	f002 f8f1 	bl	8003b68 <HAL_GPIO_ReadPin>
 8001986:	4603      	mov	r3, r0
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <usermain+0x1c>
 800198c:	2201      	movs	r2, #1
 800198e:	e000      	b.n	8001992 <usermain+0x1e>
 8001990:	2200      	movs	r2, #0
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <usermain+0x44>)
 8001994:	701a      	strb	r2, [r3, #0]
//	g_bEnableRelay = (HAL_GPIO_ReadPin(ENABLE_RELAY_GPIO_Port, ENABLE_RELAY_Pin) == GPIO_PIN_RESET) ? true : false;

	init_oled();
 8001996:	f000 f863 	bl	8001a60 <_Z9init_oledv>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800199a:	2108      	movs	r1, #8
 800199c:	4807      	ldr	r0, [pc, #28]	@ (80019bc <usermain+0x48>)
 800199e:	f004 f903 	bl	8005ba8 <HAL_TIM_PWM_Start>

	while(1)
	{
		flash_LD1();				// flashing LD1 in 1 Hz
 80019a2:	f000 f8a5 	bl	8001af0 <_Z9flash_LD1v>
		ir_receiver.processing();	// receive IR signals
 80019a6:	4806      	ldr	r0, [pc, #24]	@ (80019c0 <usermain+0x4c>)
 80019a8:	f000 fb74 	bl	8002094 <_ZN11IR_Receiver10processingEv>
		flash_LD1();				// flashing LD1 in 1 Hz
 80019ac:	bf00      	nop
 80019ae:	e7f8      	b.n	80019a2 <usermain+0x2e>
 80019b0:	20000370 	.word	0x20000370
 80019b4:	40021800 	.word	0x40021800
 80019b8:	20000da5 	.word	0x20000da5
 80019bc:	20000324 	.word	0x20000324
 80019c0:	20000da8 	.word	0x20000da8

080019c4 <HAL_TIM_PeriodElapsedCallback>:

/**	\brief	Timer period elapsed callback function.
 *
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	if (htim == &htim6)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a07      	ldr	r2, [pc, #28]	@ (80019ec <HAL_TIM_PeriodElapsedCallback+0x28>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d107      	bne.n	80019e4 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		sys_tick_10us++;
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3301      	adds	r3, #1
 80019da:	4a05      	ldr	r2, [pc, #20]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80019dc:	6013      	str	r3, [r2, #0]
		ir_sender.processing();		// transmit IR code
 80019de:	4805      	ldr	r0, [pc, #20]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80019e0:	f001 f940 	bl	8002c64 <_ZN9IR_Sender10processingEv>
	}
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000370 	.word	0x20000370
 80019f0:	20004d68 	.word	0x20004d68
 80019f4:	20002d2c 	.word	0x20002d2c

080019f8 <HAL_GPIO_EXTI_Callback>:

/**	\brief	EXTI handler for IR, user button, and Relay setting.
 *
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_EXTI_Callback+0x18>
 8001a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a0c:	d010      	beq.n	8001a30 <HAL_GPIO_EXTI_Callback+0x38>
//		g_bEnableRelay = (HAL_GPIO_ReadPin(ENABLE_RELAY_GPIO_Port, ENABLE_RELAY_Pin) == GPIO_PIN_RESET) ? true : false;
//		showRelayState();
//		ssd1306_UpdateScreen(&oled_i2c);
//		break;
	}
}
 8001a0e:	e019      	b.n	8001a44 <HAL_GPIO_EXTI_Callback+0x4c>
		ir_receiver.put(g_waitState);
 8001a10:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <HAL_GPIO_EXTI_Callback+0x54>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	480e      	ldr	r0, [pc, #56]	@ (8001a50 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a18:	f001 f9a4 	bl	8002d64 <_ZN9IR_Timing3putE8IR_STATE>
		g_waitState = (g_waitState == SPACE) ? MARK : SPACE;
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <HAL_GPIO_EXTI_Callback+0x54>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_GPIO_EXTI_Callback+0x30>
 8001a24:	2201      	movs	r2, #1
 8001a26:	e000      	b.n	8001a2a <HAL_GPIO_EXTI_Callback+0x32>
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <HAL_GPIO_EXTI_Callback+0x54>)
 8001a2c:	701a      	strb	r2, [r3, #0]
		break;
 8001a2e:	e009      	b.n	8001a44 <HAL_GPIO_EXTI_Callback+0x4c>
		ir_sender.SendCode(hdrplayer.GetIrCode("POWER"));
 8001a30:	4908      	ldr	r1, [pc, #32]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001a32:	4809      	ldr	r0, [pc, #36]	@ (8001a58 <HAL_GPIO_EXTI_Callback+0x60>)
 8001a34:	f000 fa32 	bl	8001e9c <_ZN12IR_CodeTable9GetIrCodeEPKc>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4807      	ldr	r0, [pc, #28]	@ (8001a5c <HAL_GPIO_EXTI_Callback+0x64>)
 8001a3e:	f001 f8b9 	bl	8002bb4 <_ZN9IR_Sender8SendCodeEm>
		break;
 8001a42:	bf00      	nop
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000da5 	.word	0x20000da5
 8001a50:	20000da8 	.word	0x20000da8
 8001a54:	08008c64 	.word	0x08008c64
 8001a58:	20004cd0 	.word	0x20004cd0
 8001a5c:	20002d2c 	.word	0x20002d2c

08001a60 <_Z9init_oledv>:

/**	\brief	Initial OLED display.
 *
 */
void	init_oled()
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
	// Init lcd using one of the stm32HAL i2c typedefs
	ssd1306_Init(&oled_i2c);
 8001a66:	481f      	ldr	r0, [pc, #124]	@ (8001ae4 <_Z9init_oledv+0x84>)
 8001a68:	f7ff fc58 	bl	800131c <ssd1306_Init>

	// Write data to local screenbuffer
	ssd1306_printf(Font_5x7, White, "IR code Test");
 8001a6c:	491e      	ldr	r1, [pc, #120]	@ (8001ae8 <_Z9init_oledv+0x88>)
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <_Z9init_oledv+0x8c>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	c903      	ldmia	r1, {r0, r1}
 8001a74:	f7ff ff5c 	bl	8001930 <ssd1306_printf>

	char ch=' ';
 8001a78:	2320      	movs	r3, #32
 8001a7a:	73fb      	strb	r3, [r7, #15]
	for (int y=2; y<8; y++)
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	e024      	b.n	8001acc <_Z9init_oledv+0x6c>
	{
		for (int x=0; x<21; x++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	e01b      	b.n	8001ac0 <_Z9init_oledv+0x60>
		{
			ssd1306_SetCursor(x*Font_5x7.FontWidth, y*Font_5x7.FontHeight);
 8001a88:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <_Z9init_oledv+0x88>)
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	fb12 f303 	smulbb	r3, r2, r3
 8001a94:	b2d8      	uxtb	r0, r3
 8001a96:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <_Z9init_oledv+0x88>)
 8001a98:	785a      	ldrb	r2, [r3, #1]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	fb12 f303 	smulbb	r3, r2, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff ff2b 	bl	8001900 <ssd1306_SetCursor>
			ssd1306_WriteChar(ch++, Font_5x7, White);
 8001aaa:	7bf8      	ldrb	r0, [r7, #15]
 8001aac:	1c43      	adds	r3, r0, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae8 <_Z9init_oledv+0x88>)
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	ca06      	ldmia	r2, {r1, r2}
 8001ab6:	f7ff fe07 	bl	80016c8 <ssd1306_WriteChar>
		for (int x=0; x<21; x++)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3301      	adds	r3, #1
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b14      	cmp	r3, #20
 8001ac4:	dde0      	ble.n	8001a88 <_Z9init_oledv+0x28>
	for (int y=2; y<8; y++)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b07      	cmp	r3, #7
 8001ad0:	ddd7      	ble.n	8001a82 <_Z9init_oledv+0x22>
		}
	}

	showRelayState();
 8001ad2:	f001 f835 	bl	8002b40 <_Z14showRelayStatev>

	// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&oled_i2c);
 8001ad6:	4803      	ldr	r0, [pc, #12]	@ (8001ae4 <_Z9init_oledv+0x84>)
 8001ad8:	f7ff fd64 	bl	80015a4 <ssd1306_UpdateScreen>
}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200002cc 	.word	0x200002cc
 8001ae8:	20000004 	.word	0x20000004
 8001aec:	08008c6c 	.word	0x08008c6c

08001af0 <_Z9flash_LD1v>:

/**	\brief	Flashing LD1 in 1 Hz.
 *
 */
void	flash_LD1()
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
	const uint32_t HALF_INTERVAL = 500L;
 8001af6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001afa:	607b      	str	r3, [r7, #4]
	// Toggle LD1 per 0.5 sec.
#if BUSY_WAIT
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	HAL_Delay(500L);
#else
	uint32_t sysTick = HAL_GetTick();
 8001afc:	f001 fa20 	bl	8002f40 <HAL_GetTick>
 8001b00:	6038      	str	r0, [r7, #0]
	if ((sysTick - lastLedToggleTime) >= HALF_INTERVAL)
 8001b02:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <_Z9flash_LD1v+0x38>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b0e:	d306      	bcc.n	8001b1e <_Z9flash_LD1v+0x2e>
	{
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001b10:	2101      	movs	r1, #1
 8001b12:	4806      	ldr	r0, [pc, #24]	@ (8001b2c <_Z9flash_LD1v+0x3c>)
 8001b14:	f002 f859 	bl	8003bca <HAL_GPIO_TogglePin>
		lastLedToggleTime = sysTick;
 8001b18:	4a03      	ldr	r2, [pc, #12]	@ (8001b28 <_Z9flash_LD1v+0x38>)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6013      	str	r3, [r2, #0]
	}
#endif
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20004cac 	.word	0x20004cac
 8001b2c:	40020400 	.word	0x40020400

08001b30 <__io_putchar>:

/**	\brief Retarget to USART3.
 *
 */
extern "C" int __io_putchar(int ch)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8001b38:	1d39      	adds	r1, r7, #4
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4803      	ldr	r0, [pc, #12]	@ (8001b50 <__io_putchar+0x20>)
 8001b42:	f004 ffa5 	bl	8006a90 <HAL_UART_Transmit>

	return 0;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200003bc 	.word	0x200003bc

08001b54 <_Z41__static_initialization_and_destruction_0ii>:
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d10a      	bne.n	8001b7a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d105      	bne.n	8001b7a <_Z41__static_initialization_and_destruction_0ii+0x26>
IR_Receiver ir_receiver;
 8001b6e:	4805      	ldr	r0, [pc, #20]	@ (8001b84 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001b70:	f000 fa7d 	bl	800206e <_ZN11IR_ReceiverC1Ev>
IR_Sender ir_sender;
 8001b74:	4804      	ldr	r0, [pc, #16]	@ (8001b88 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001b76:	f001 f809 	bl	8002b8c <_ZN9IR_SenderC1Ev>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000da8 	.word	0x20000da8
 8001b88:	20002d2c 	.word	0x20002d2c

08001b8c <_GLOBAL__sub_I_g_waitState>:
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001b94:	2001      	movs	r0, #1
 8001b96:	f7ff ffdd 	bl	8001b54 <_Z41__static_initialization_and_destruction_0ii>
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_Z41__static_initialization_and_destruction_0ii>:
	{0x5b, "AUTO"},
	{0x5c, "ASPECT"},
	{0x5d, "FUNC"},
};

IR_CodeTable casio("CASIO", CASIO, casio_codetable, LENGTH(casio_codetable));
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d10d      	bne.n	8001bc8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d108      	bne.n	8001bc8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001bb6:	231a      	movs	r3, #26
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001bbc:	f24f 4284 	movw	r2, #62596	@ 0xf484
 8001bc0:	4904      	ldr	r1, [pc, #16]	@ (8001bd4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001bc2:	4805      	ldr	r0, [pc, #20]	@ (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001bc4:	f000 f93e 	bl	8001e44 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi>
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	08009498 	.word	0x08009498
 8001bd4:	08008d3c 	.word	0x08008d3c
 8001bd8:	20004cb0 	.word	0x20004cb0

08001bdc <_GLOBAL__sub_I_casio>:
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7ff ffd9 	bl	8001b9c <_Z41__static_initialization_and_destruction_0ii>
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_Z41__static_initialization_and_destruction_0ii>:
	{0x13, "ON"},
	{0x07, "FAN -"},
	{0x0f, "FAN +"},
};

IR_CodeTable fan("FAN", FAN, fan_codetable, LENGTH(fan_codetable));
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d10d      	bne.n	8001c18 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d108      	bne.n	8001c18 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001c06:	2305      	movs	r3, #5
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001c0c:	f64f 6201 	movw	r2, #65025	@ 0xfe01
 8001c10:	4904      	ldr	r1, [pc, #16]	@ (8001c24 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001c12:	4805      	ldr	r0, [pc, #20]	@ (8001c28 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001c14:	f000 f916 	bl	8001e44 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi>
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	08009568 	.word	0x08009568
 8001c24:	08008d64 	.word	0x08008d64
 8001c28:	20004cc0 	.word	0x20004cc0

08001c2c <_GLOBAL__sub_I_fan>:
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001c34:	2001      	movs	r0, #1
 8001c36:	f7ff ffd9 	bl	8001bec <_Z41__static_initialization_and_destruction_0ii>
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_Z41__static_initialization_and_destruction_0ii>:
	{0x0c, "Cancel"},
	{0x00, "Tab"},
	{0x0e, "Recall"},
};

IR_CodeTable hdrplayer("HDR player", HDR_PLAYER, hdrplayer_codeTable, LENGTH(hdrplayer_codeTable));
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d10d      	bne.n	8001c68 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d108      	bne.n	8001c68 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001c56:	2320      	movs	r3, #32
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001c5c:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8001c60:	4904      	ldr	r1, [pc, #16]	@ (8001c74 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001c62:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001c64:	f000 f8ee 	bl	8001e44 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi>
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	08009590 	.word	0x08009590
 8001c74:	08008e34 	.word	0x08008e34
 8001c78:	20004cd0 	.word	0x20004cd0

08001c7c <_GLOBAL__sub_I_hdrplayer>:
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001c84:	2001      	movs	r0, #1
 8001c86:	f7ff ffd9 	bl	8001c3c <_Z41__static_initialization_and_destruction_0ii>
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <_Z41__static_initialization_and_destruction_0ii>:
	{0x0e, "POWER"},
	{0x44, "OFF"},
	{0x0c, "turn"},
};

IR_CodeTable kns("KNS", KNS, kns_codetable, LENGTH(kns_codetable));
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d10d      	bne.n	8001cb8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d108      	bne.n	8001cb8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001cac:	f44f 42fd 	mov.w	r2, #32384	@ 0x7e80
 8001cb0:	4904      	ldr	r1, [pc, #16]	@ (8001cc4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001cb2:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001cb4:	f000 f8c6 	bl	8001e44 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi>
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	08009690 	.word	0x08009690
 8001cc4:	08008e54 	.word	0x08008e54
 8001cc8:	20004ce0 	.word	0x20004ce0

08001ccc <_GLOBAL__sub_I_kns>:
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f7ff ffd9 	bl	8001c8c <_Z41__static_initialization_and_destruction_0ii>
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_Z41__static_initialization_and_destruction_0ii>:
	{0x2b, "G"},
	{0x2c, "Y"},
	{0x2a, "R"},
};

IR_CodeTable mod("MOD", MOD, mod_codetable, LENGTH(mod_codetable));
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d10d      	bne.n	8001d08 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d108      	bne.n	8001d08 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001cf6:	2323      	movs	r3, #35	@ 0x23
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001cfc:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 8001d00:	4904      	ldr	r1, [pc, #16]	@ (8001d14 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001d02:	4805      	ldr	r0, [pc, #20]	@ (8001d18 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001d04:	f000 f89e 	bl	8001e44 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi>
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	080096a8 	.word	0x080096a8
 8001d14:	08008f30 	.word	0x08008f30
 8001d18:	20004cf0 	.word	0x20004cf0

08001d1c <_GLOBAL__sub_I_mod>:
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001d24:	2001      	movs	r0, #1
 8001d26:	f7ff ffd9 	bl	8001cdc <_Z41__static_initialization_and_destruction_0ii>
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_Z41__static_initialization_and_destruction_0ii>:
	{0xa39f, "PAUSE"},
	{0xa39b, "REV"},
	{0xa39a, "FWD"},
};

IR_CodeTable pioneerdvd("Pioneer DVD", PioneerDVD, pioneerdvd_codeTable, LENGTH(pioneerdvd_codeTable));
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d10d      	bne.n	8001d58 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d108      	bne.n	8001d58 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001d46:	232c      	movs	r3, #44	@ 0x2c
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001d4c:	f24a 325c 	movw	r2, #41820	@ 0xa35c
 8001d50:	4904      	ldr	r1, [pc, #16]	@ (8001d64 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001d52:	4805      	ldr	r0, [pc, #20]	@ (8001d68 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001d54:	f000 f876 	bl	8001e44 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi>
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	080097c0 	.word	0x080097c0
 8001d64:	0800906c 	.word	0x0800906c
 8001d68:	20004d00 	.word	0x20004d00

08001d6c <_GLOBAL__sub_I_pioneerdvd>:
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001d74:	2001      	movs	r0, #1
 8001d76:	f7ff ffd9 	bl	8001d2c <_Z41__static_initialization_and_destruction_0ii>
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_Z41__static_initialization_and_destruction_0ii>:
	{0x1d, "CTRL<-"},
	{0x0e, "PICT"},
	{0x0d, "AUDIO"},
};

IR_CodeTable tochibatv("Toshiba TV", ToshibaTV, toshibatv_codeTable, LENGTH(toshibatv_codeTable));
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d10d      	bne.n	8001da8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d108      	bne.n	8001da8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001d96:	231e      	movs	r3, #30
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001d9c:	f244 02bf 	movw	r2, #16575	@ 0x40bf
 8001da0:	4904      	ldr	r1, [pc, #16]	@ (8001db4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001da2:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001da4:	f000 f84e 	bl	8001e44 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi>
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	08009920 	.word	0x08009920
 8001db4:	08009134 	.word	0x08009134
 8001db8:	20004d10 	.word	0x20004d10

08001dbc <_GLOBAL__sub_I_tochibatv>:
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f7ff ffd9 	bl	8001d7c <_Z41__static_initialization_and_destruction_0ii>
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_Z41__static_initialization_and_destruction_0ii>:
	{0x15, "PLAY"},
	{0x13, "FF"},
	{0x14, "STOP"},
};

IR_CodeTable tochibavcr("Toshiba VCR", ToshibaVCR, toshibavcr_codeTable, LENGTH(toshibavcr_codeTable));
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d10d      	bne.n	8001df8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d108      	bne.n	8001df8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001de6:	230b      	movs	r3, #11
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001dec:	f244 42bb 	movw	r2, #17595	@ 0x44bb
 8001df0:	4904      	ldr	r1, [pc, #16]	@ (8001e04 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001df2:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001df4:	f000 f826 	bl	8001e44 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi>
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	08009a10 	.word	0x08009a10
 8001e04:	08009184 	.word	0x08009184
 8001e08:	20004d20 	.word	0x20004d20

08001e0c <_GLOBAL__sub_I_tochibavcr>:
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e14:	2001      	movs	r0, #1
 8001e16:	f7ff ffd9 	bl	8001dcc <_Z41__static_initialization_and_destruction_0ii>
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZN7IR_BaseC1Ev>:
 */

#include "ir_base.h"

// Constructor
IR_Base::IR_Base()
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 ff84 	bl	8002d34 <_ZN9IR_TimingC1Ev>
{
	m_state = ST_START;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
}
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi>:
IR_CodeTable *IR_CodeTable::m_pController[MAX_CONTROLLER];

/**	\brief	Initial a code table.
 *
 */
IR_CodeTable::IR_CodeTable(const char *controllerName, uint16_t customCode, const IR_CODE *pCodeTable, int tableLen)
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	80fb      	strh	r3, [r7, #6]
{
	m_pControllerName = controllerName;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	601a      	str	r2, [r3, #0]
	m_customcode = customCode;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	88fa      	ldrh	r2, [r7, #6]
 8001e5e:	809a      	strh	r2, [r3, #4]
	m_pCodeTable = pCodeTable;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	609a      	str	r2, [r3, #8]
	m_nTableLen = tableLen;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	60da      	str	r2, [r3, #12]

	if (m_nController < MAX_CONTROLLER)
 8001e6c:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi+0x50>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b09      	cmp	r3, #9
 8001e72:	dc08      	bgt.n	8001e86 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi+0x42>
		m_pController[m_nController++] = this;
 8001e74:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi+0x50>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	4906      	ldr	r1, [pc, #24]	@ (8001e94 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi+0x50>)
 8001e7c:	600a      	str	r2, [r1, #0]
 8001e7e:	4906      	ldr	r1, [pc, #24]	@ (8001e98 <_ZN12IR_CodeTableC1EPKctPK7IR_CODEi+0x54>)
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	20004d30 	.word	0x20004d30
 8001e98:	20004d34 	.word	0x20004d34

08001e9c <_ZN12IR_CodeTable9GetIrCodeEPKc>:

/**	\brief	Get IR code by key name.
 *
 */
uint32_t	IR_CodeTable::GetIrCode(const char *pKeyName)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
	for (int i=0; i<m_nTableLen; i++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	e01b      	b.n	8001ee4 <_ZN12IR_CodeTable9GetIrCodeEPKc+0x48>
		if (strcmp(pKeyName, m_pCodeTable[i].keyName) == 0)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	6838      	ldr	r0, [r7, #0]
 8001ebc:	f7fe f9a8 	bl	8000210 <strcmp>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10b      	bne.n	8001ede <_ZN12IR_CodeTable9GetIrCodeEPKc+0x42>
			return IrCode(m_pCodeTable[i].irCode);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f80f 	bl	8001ef8 <_ZN12IR_CodeTable6IrCodeEt>
 8001eda:	4603      	mov	r3, r0
 8001edc:	e008      	b.n	8001ef0 <_ZN12IR_CodeTable9GetIrCodeEPKc+0x54>
	for (int i=0; i<m_nTableLen; i++)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	dbde      	blt.n	8001eac <_ZN12IR_CodeTable9GetIrCodeEPKc+0x10>

	return 0;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <_ZN12IR_CodeTable6IrCodeEt>:

/**	\brief	Build IR code.
 *
 */
uint32_t	IR_CodeTable::IrCode(const uint16_t irCode)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
	uint16_t invIrCode = ~irCode;
 8001f04:	887b      	ldrh	r3, [r7, #2]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	81fb      	strh	r3, [r7, #14]

	return (invIrCode << 24) | (irCode << 16) | m_customcode;
 8001f0a:	89fb      	ldrh	r3, [r7, #14]
 8001f0c:	061a      	lsls	r2, r3, #24
 8001f0e:	887b      	ldrh	r3, [r7, #2]
 8001f10:	041b      	lsls	r3, r3, #16
 8001f12:	4313      	orrs	r3, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	8892      	ldrh	r2, [r2, #4]
 8001f18:	4313      	orrs	r3, r2
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <_ZN12IR_CodeTable7FindKeyEthPPKcS2_>:

/**	\brief	Search all controllers for received IR code.
 *
 */
bool	IR_CodeTable::FindKey(uint16_t customcode, uint8_t datacode, const char **ppControllerName, const char **ppKeyname)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60ba      	str	r2, [r7, #8]
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	4603      	mov	r3, r0
 8001f34:	81fb      	strh	r3, [r7, #14]
 8001f36:	460b      	mov	r3, r1
 8001f38:	737b      	strb	r3, [r7, #13]
	for (int i=0; i<m_nController; i++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e015      	b.n	8001f6c <_ZN12IR_CodeTable7FindKeyEthPPKcS2_+0x44>
		if (customcode == m_pController[i]->m_customcode)
 8001f40:	4a0f      	ldr	r2, [pc, #60]	@ (8001f80 <_ZN12IR_CodeTable7FindKeyEthPPKcS2_+0x58>)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f48:	889b      	ldrh	r3, [r3, #4]
 8001f4a:	89fa      	ldrh	r2, [r7, #14]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d10a      	bne.n	8001f66 <_ZN12IR_CodeTable7FindKeyEthPPKcS2_+0x3e>
			return m_pController[i]->FindKey(datacode, ppControllerName, ppKeyname);
 8001f50:	4a0b      	ldr	r2, [pc, #44]	@ (8001f80 <_ZN12IR_CodeTable7FindKeyEthPPKcS2_+0x58>)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f58:	7b79      	ldrb	r1, [r7, #13]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	f000 f813 	bl	8001f88 <_ZN12IR_CodeTable7FindKeyEhPPKcS2_>
 8001f62:	4603      	mov	r3, r0
 8001f64:	e008      	b.n	8001f78 <_ZN12IR_CodeTable7FindKeyEthPPKcS2_+0x50>
	for (int i=0; i<m_nController; i++)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <_ZN12IR_CodeTable7FindKeyEthPPKcS2_+0x5c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	dbe4      	blt.n	8001f40 <_ZN12IR_CodeTable7FindKeyEthPPKcS2_+0x18>

	return false;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20004d34 	.word	0x20004d34
 8001f84:	20004d30 	.word	0x20004d30

08001f88 <_ZN12IR_CodeTable7FindKeyEhPPKcS2_>:

/**	\brief	Search IR code in code table.
 *
 */
bool	IR_CodeTable::FindKey(uint8_t datacode, const char **ppControllerName, const char **ppKeyname)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	460b      	mov	r3, r1
 8001f96:	72fb      	strb	r3, [r7, #11]
	*ppControllerName = m_pControllerName;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	601a      	str	r2, [r3, #0]

	for (int i=0; i<m_nTableLen; i++)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	e015      	b.n	8001fd2 <_ZN12IR_CodeTable7FindKeyEhPPKcS2_+0x4a>
	{
		if (datacode == m_pCodeTable[i].irCode)
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	6891      	ldr	r1, [r2, #8]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	00d2      	lsls	r2, r2, #3
 8001fb0:	440a      	add	r2, r1
 8001fb2:	8812      	ldrh	r2, [r2, #0]
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d109      	bne.n	8001fcc <_ZN12IR_CodeTable7FindKeyEhPPKcS2_+0x44>
		{
			*ppKeyname = m_pCodeTable[i].keyName;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	601a      	str	r2, [r3, #0]
			return true;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e00b      	b.n	8001fe4 <_ZN12IR_CodeTable7FindKeyEhPPKcS2_+0x5c>
	for (int i=0; i<m_nTableLen; i++)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	dbe4      	blt.n	8001fa6 <_ZN12IR_CodeTable7FindKeyEhPPKcS2_+0x1e>
		}
	}

	*ppKeyname = "Unknown";
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4a04      	ldr	r2, [pc, #16]	@ (8001ff0 <_ZN12IR_CodeTable7FindKeyEhPPKcS2_+0x68>)
 8001fe0:	601a      	str	r2, [r3, #0]
	return true;
 8001fe2:	2301      	movs	r3, #1
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	371c      	adds	r7, #28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	08009190 	.word	0x08009190

08001ff4 <_ZN7IR_Base7GetCodeEv>:
class IR_Base : public IR_Timing
{
public:
	IR_Base();

	uint16_t	GetCode() {return m_ircode;}
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002002:	f8b3 3f6c 	ldrh.w	r3, [r3, #3948]	@ 0xf6c
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <_ZN7IR_Base13GetControllerEv>:
	const char *GetController() {return m_pControllerName;}
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002020:	f8d3 3f70 	ldr.w	r3, [r3, #3952]	@ 0xf70
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <_ZN7IR_Base10GetBtnNameEv>:
	const char *GetBtnName() {return m_pkeyname;}
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800203e:	f8d3 3f74 	ldr.w	r3, [r3, #3956]	@ 0xf74
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <_ZN7IR_Base10ResetStateEv>:
	void	ResetState() {m_state = ST_START;}
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <_ZN11IR_ReceiverC1Ev>:
IR_CodeTable *pRelayTarget = &casio;

/**	\brief	Constructor.
 *
 */
IR_Receiver::IR_Receiver()
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fecf 	bl	8001e1c <_ZN7IR_BaseC1Ev>
{
	m_bWaitToRelay = false;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2f7c 	strb.w	r2, [r3, #3964]	@ 0xf7c
}
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_ZN11IR_Receiver10processingEv>:

/**	\brief	Process received IR code.
 *
 */
void	IR_Receiver::processing()
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	static uint32_t m_lastSignalTime = 0;

	//	process signal from remote controller
	if (m_size > 0)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	dd41      	ble.n	8002128 <_ZN11IR_Receiver10processingEv+0x94>
	{
		// toggle LD2
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80020a4:	2180      	movs	r1, #128	@ 0x80
 80020a6:	483e      	ldr	r0, [pc, #248]	@ (80021a0 <_ZN11IR_Receiver10processingEv+0x10c>)
 80020a8:	f001 fd8f 	bl	8003bca <HAL_GPIO_TogglePin>

		IrSignal signal = get();
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	f107 0308 	add.w	r3, r7, #8
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 fea6 	bl	8002e06 <_ZN9IR_Timing3getEv>

		// if pulse width > 10 ms, it may mean a new code
		uint32_t pulseWidth = signal.time - preSignalTick;
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	61fb      	str	r3, [r7, #28]
		if (pulseWidth > MAX_STATE_TIME)
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020ca:	d904      	bls.n	80020d6 <_ZN11IR_Receiver10processingEv+0x42>
		{
			pulseWidth = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
			printf("\r\n");
 80020d0:	4834      	ldr	r0, [pc, #208]	@ (80021a4 <_ZN11IR_Receiver10processingEv+0x110>)
 80020d2:	f005 fda3 	bl	8007c1c <puts>
		}

		// falling edge = end of SPACE state
		// rising edge = end of MARK state
		// a line = 17 bytes, take about 1.62 ms for 115200 bps
		if (signal.state == SPACE)
 80020d6:	7b3b      	ldrb	r3, [r7, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d104      	bne.n	80020e6 <_ZN11IR_Receiver10processingEv+0x52>
			printf("%3lu (M) ", pulseWidth);
 80020dc:	69f9      	ldr	r1, [r7, #28]
 80020de:	4832      	ldr	r0, [pc, #200]	@ (80021a8 <_ZN11IR_Receiver10processingEv+0x114>)
 80020e0:	f005 fd34 	bl	8007b4c <iprintf>
 80020e4:	e003      	b.n	80020ee <_ZN11IR_Receiver10processingEv+0x5a>
		else
			printf("%3lu (S)\r\n", pulseWidth);
 80020e6:	69f9      	ldr	r1, [r7, #28]
 80020e8:	4830      	ldr	r0, [pc, #192]	@ (80021ac <_ZN11IR_Receiver10processingEv+0x118>)
 80020ea:	f005 fd2f 	bl	8007b4c <iprintf>

		IR_State state = proc_IRsignal(pulseWidth);
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	4619      	mov	r1, r3
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f96c 	bl	80023d0 <_ZN11IR_Receiver13proc_IRsignalEi>
 80020f8:	4603      	mov	r3, r0
 80020fa:	76fb      	strb	r3, [r7, #27]
		if ((state == NEC_DONE) || (state == NEC_DONE_REPEAT) || (state == DAIKIN_DONE))
 80020fc:	7efb      	ldrb	r3, [r7, #27]
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d005      	beq.n	800210e <_ZN11IR_Receiver10processingEv+0x7a>
 8002102:	7efb      	ldrb	r3, [r7, #27]
 8002104:	2b07      	cmp	r3, #7
 8002106:	d002      	beq.n	800210e <_ZN11IR_Receiver10processingEv+0x7a>
 8002108:	7efb      	ldrb	r3, [r7, #27]
 800210a:	2b0b      	cmp	r3, #11
 800210c:	d104      	bne.n	8002118 <_ZN11IR_Receiver10processingEv+0x84>
			ShowIrCode(state);
 800210e:	7efb      	ldrb	r3, [r7, #27]
 8002110:	4619      	mov	r1, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f858 	bl	80021c8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State>

		preSignalTick = signal.time;
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	601a      	str	r2, [r3, #0]
		m_lastSignalTime = HAL_GetTick();
 800211e:	f000 ff0f 	bl	8002f40 <HAL_GetTick>
 8002122:	4603      	mov	r3, r0
 8002124:	4a22      	ldr	r2, [pc, #136]	@ (80021b0 <_ZN11IR_Receiver10processingEv+0x11c>)
 8002126:	6013      	str	r3, [r2, #0]
	}

	if (m_bWaitToRelay)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800212e:	f893 3f7c 	ldrb.w	r3, [r3, #3964]	@ 0xf7c
 8002132:	2b00      	cmp	r3, #0
 8002134:	d030      	beq.n	8002198 <_ZN11IR_Receiver10processingEv+0x104>
	{
		uint32_t elapsed = HAL_GetTick() - m_lastSignalTime;
 8002136:	f000 ff03 	bl	8002f40 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <_ZN11IR_Receiver10processingEv+0x11c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
		if (elapsed > 10)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b0a      	cmp	r3, #10
 8002148:	d926      	bls.n	8002198 <_ZN11IR_Receiver10processingEv+0x104>
		{
			uint32_t code = pRelayTarget->GetIrCode(m_pRelayBtnName);
 800214a:	4b1a      	ldr	r3, [pc, #104]	@ (80021b4 <_ZN11IR_Receiver10processingEv+0x120>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002154:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	@ 0xf80
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f7ff fe9e 	bl	8001e9c <_ZN12IR_CodeTable9GetIrCodeEPKc>
 8002160:	6138      	str	r0, [r7, #16]
			if (code == 0)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d113      	bne.n	8002190 <_ZN11IR_Receiver10processingEv+0xfc>
			{
				m_bWaitToRelay = false;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2f7c 	strb.w	r2, [r3, #3964]	@ 0xf7c
				ssd1306_SetCursor(0, 56);
 8002174:	2138      	movs	r1, #56	@ 0x38
 8002176:	2000      	movs	r0, #0
 8002178:	f7ff fbc2 	bl	8001900 <ssd1306_SetCursor>
				ssd1306_printf(Font_5x7, White, "No match button");
 800217c:	490e      	ldr	r1, [pc, #56]	@ (80021b8 <_ZN11IR_Receiver10processingEv+0x124>)
 800217e:	4b0f      	ldr	r3, [pc, #60]	@ (80021bc <_ZN11IR_Receiver10processingEv+0x128>)
 8002180:	2201      	movs	r2, #1
 8002182:	c903      	ldmia	r1, {r0, r1}
 8002184:	f7ff fbd4 	bl	8001930 <ssd1306_printf>
				ssd1306_UpdateScreen(&oled_i2c);
 8002188:	480d      	ldr	r0, [pc, #52]	@ (80021c0 <_ZN11IR_Receiver10processingEv+0x12c>)
 800218a:	f7ff fa0b 	bl	80015a4 <ssd1306_UpdateScreen>
			}
			else
				ir_sender.SendCode(code);
		}
	}
}
 800218e:	e003      	b.n	8002198 <_ZN11IR_Receiver10processingEv+0x104>
				ir_sender.SendCode(code);
 8002190:	6939      	ldr	r1, [r7, #16]
 8002192:	480c      	ldr	r0, [pc, #48]	@ (80021c4 <_ZN11IR_Receiver10processingEv+0x130>)
 8002194:	f000 fd0e 	bl	8002bb4 <_ZN9IR_Sender8SendCodeEm>
}
 8002198:	bf00      	nop
 800219a:	3720      	adds	r7, #32
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40020400 	.word	0x40020400
 80021a4:	08009198 	.word	0x08009198
 80021a8:	0800919c 	.word	0x0800919c
 80021ac:	080091a8 	.word	0x080091a8
 80021b0:	20004d5c 	.word	0x20004d5c
 80021b4:	20000010 	.word	0x20000010
 80021b8:	20000004 	.word	0x20000004
 80021bc:	080091b4 	.word	0x080091b4
 80021c0:	200002cc 	.word	0x200002cc
 80021c4:	20002d2c 	.word	0x20002d2c

080021c8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State>:

/**	\brief	Show received IR code.
 *
 */
void	IR_Receiver::ShowIrCode(IR_State state)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	@ 0x30
 80021cc:	af04      	add	r7, sp, #16
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	70fb      	strb	r3, [r7, #3]
	static int nBtn = 0;
	static int repeatX = 0;
	static int repeatY = 32;
	static SSD1306_COLOR pixelColor = White;

	if (state == NEC_DONE)
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d16d      	bne.n	80022b6 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0xee>
	{
		uint16_t irCode = GetCode();
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff09 	bl	8001ff4 <_ZN7IR_Base7GetCodeEv>
 80021e2:	4603      	mov	r3, r0
 80021e4:	827b      	strh	r3, [r7, #18]
		const char *pController = GetController();
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff12 	bl	8002012 <_ZN7IR_Base13GetControllerEv>
 80021ee:	60f8      	str	r0, [r7, #12]
		const char *pBtnName = GetBtnName();
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ff1c 	bl	8002030 <_ZN7IR_Base10GetBtnNameEv>
 80021f8:	60b8      	str	r0, [r7, #8]

		int displayLine = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]

		if (m_bWaitToRelay)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002204:	f893 3f7c 	ldrb.w	r3, [r3, #3964]	@ 0xf7c
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x56>
		{
			displayLine = 8 * 6;
 800220c:	2330      	movs	r3, #48	@ 0x30
 800220e:	61fb      	str	r3, [r7, #28]
			m_bWaitToRelay = false;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2f7c 	strb.w	r2, [r3, #3964]	@ 0xf7c
 800221c:	e022      	b.n	8002264 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x9c>
		}
		else
		{
			ssd1306_Fill(Black);
 800221e:	2000      	movs	r0, #0
 8002220:	f7ff f99c 	bl	800155c <ssd1306_Fill>

			showRelayState();
 8002224:	f000 fc8c 	bl	8002b40 <_Z14showRelayStatev>

			repeatX = 0;
 8002228:	4b5d      	ldr	r3, [pc, #372]	@ (80023a0 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1d8>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
			repeatY = 16;
 800222e:	4b5d      	ldr	r3, [pc, #372]	@ (80023a4 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1dc>)
 8002230:	2210      	movs	r2, #16
 8002232:	601a      	str	r2, [r3, #0]

			if (g_bEnableRelay && strcmp(pController, "CASIO") == 0)
 8002234:	4b5c      	ldr	r3, [pc, #368]	@ (80023a8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1e0>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x9c>
 800223c:	495b      	ldr	r1, [pc, #364]	@ (80023ac <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1e4>)
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f7fd ffe6 	bl	8000210 <strcmp>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10c      	bne.n	8002264 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x9c>
			{
				m_bWaitToRelay = true;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2f7c 	strb.w	r2, [r3, #3964]	@ 0xf7c
				m_pRelayBtnName = pBtnName;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800225c:	461a      	mov	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f8c2 3f80 	str.w	r3, [r2, #3968]	@ 0xf80
			}
		}

		ssd1306_SetCursor(0, displayLine);
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4619      	mov	r1, r3
 800226a:	2000      	movs	r0, #0
 800226c:	f7ff fb48 	bl	8001900 <ssd1306_SetCursor>
		ssd1306_printf(Font_5x7, White, "%-8s", pController);
 8002270:	494f      	ldr	r1, [pc, #316]	@ (80023b0 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1e8>)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	4b4f      	ldr	r3, [pc, #316]	@ (80023b4 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1ec>)
 8002278:	2201      	movs	r2, #1
 800227a:	c903      	ldmia	r1, {r0, r1}
 800227c:	f7ff fb58 	bl	8001930 <ssd1306_printf>

		ssd1306_SetCursor(0, displayLine+8);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	3308      	adds	r3, #8
 8002286:	b2db      	uxtb	r3, r3
 8002288:	4619      	mov	r1, r3
 800228a:	2000      	movs	r0, #0
 800228c:	f7ff fb38 	bl	8001900 <ssd1306_SetCursor>
		ssd1306_printf(Font_5x7, White, "%03d %04X %-10s", ++nBtn, irCode, pBtnName);
 8002290:	4b49      	ldr	r3, [pc, #292]	@ (80023b8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1f0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	4a48      	ldr	r2, [pc, #288]	@ (80023b8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1f0>)
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b47      	ldr	r3, [pc, #284]	@ (80023b8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1f0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	8a7a      	ldrh	r2, [r7, #18]
 80022a0:	4843      	ldr	r0, [pc, #268]	@ (80023b0 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1e8>)
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	9102      	str	r1, [sp, #8]
 80022a6:	9201      	str	r2, [sp, #4]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	4b44      	ldr	r3, [pc, #272]	@ (80023bc <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1f4>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	c803      	ldmia	r0, {r0, r1}
 80022b0:	f7ff fb3e 	bl	8001930 <ssd1306_printf>
 80022b4:	e069      	b.n	800238a <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1c2>
	}
	else if (state == NEC_DONE_REPEAT)
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	2b07      	cmp	r3, #7
 80022ba:	d130      	bne.n	800231e <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x156>
	{
		ssd1306_DrawPixel(repeatX, repeatY, pixelColor);
 80022bc:	4b38      	ldr	r3, [pc, #224]	@ (80023a0 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1d8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	4a38      	ldr	r2, [pc, #224]	@ (80023a4 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1dc>)
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	b2d1      	uxtb	r1, r2
 80022c8:	4a3d      	ldr	r2, [pc, #244]	@ (80023c0 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1f8>)
 80022ca:	7812      	ldrb	r2, [r2, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff f99b 	bl	8001608 <ssd1306_DrawPixel>

		repeatX += 2;
 80022d2:	4b33      	ldr	r3, [pc, #204]	@ (80023a0 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1d8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	3302      	adds	r3, #2
 80022d8:	4a31      	ldr	r2, [pc, #196]	@ (80023a0 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1d8>)
 80022da:	6013      	str	r3, [r2, #0]
		if (repeatX >= SSD1306_WIDTH)
 80022dc:	4b30      	ldr	r3, [pc, #192]	@ (80023a0 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1d8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80022e2:	dd52      	ble.n	800238a <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1c2>
		{
			repeatX = 0;
 80022e4:	4b2e      	ldr	r3, [pc, #184]	@ (80023a0 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1d8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
			repeatY += 2;
 80022ea:	4b2e      	ldr	r3, [pc, #184]	@ (80023a4 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1dc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3302      	adds	r3, #2
 80022f0:	4a2c      	ldr	r2, [pc, #176]	@ (80023a4 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1dc>)
 80022f2:	6013      	str	r3, [r2, #0]
			if (repeatY >= SSD1306_HEIGHT)
 80022f4:	4b2b      	ldr	r3, [pc, #172]	@ (80023a4 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1dc>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80022fa:	dd46      	ble.n	800238a <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1c2>
			{
				repeatX = 0;
 80022fc:	4b28      	ldr	r3, [pc, #160]	@ (80023a0 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1d8>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
				repeatY = 16;
 8002302:	4b28      	ldr	r3, [pc, #160]	@ (80023a4 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1dc>)
 8002304:	2210      	movs	r2, #16
 8002306:	601a      	str	r2, [r3, #0]
				pixelColor = (pixelColor == White) ? Black : White;
 8002308:	4b2d      	ldr	r3, [pc, #180]	@ (80023c0 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1f8>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	4b29      	ldr	r3, [pc, #164]	@ (80023c0 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1f8>)
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	e035      	b.n	800238a <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1c2>
			}
		}
	}
	else if (state == DAIKIN_DONE)
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	2b0b      	cmp	r3, #11
 8002322:	d132      	bne.n	800238a <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1c2>
	{
		ssd1306_Fill(Black);
 8002324:	2000      	movs	r0, #0
 8002326:	f7ff f919 	bl	800155c <ssd1306_Fill>

		int y = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
		for (int i=0; i<19; i++)
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	e027      	b.n	8002384 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1bc>
		{
			if ((i % 7) == 0)
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	4b23      	ldr	r3, [pc, #140]	@ (80023c4 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1fc>)
 8002338:	fb83 1302 	smull	r1, r3, r3, r2
 800233c:	4413      	add	r3, r2
 800233e:	1099      	asrs	r1, r3, #2
 8002340:	17d3      	asrs	r3, r2, #31
 8002342:	1ac9      	subs	r1, r1, r3
 8002344:	460b      	mov	r3, r1
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	1a5b      	subs	r3, r3, r1
 800234a:	1ad1      	subs	r1, r2, r3
 800234c:	2900      	cmp	r1, #0
 800234e:	d108      	bne.n	8002362 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x19a>
			{
				ssd1306_SetCursor(0, y);
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	4619      	mov	r1, r3
 8002356:	2000      	movs	r0, #0
 8002358:	f7ff fad2 	bl	8001900 <ssd1306_SetCursor>
				y += 8;
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	3308      	adds	r3, #8
 8002360:	61bb      	str	r3, [r7, #24]
			}

			ssd1306_printf(Font_5x7, White, "%02X ", m_datacode[i]);
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	441a      	add	r2, r3
 8002368:	f641 7350 	movw	r3, #8016	@ 0x1f50
 800236c:	4413      	add	r3, r2
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	490f      	ldr	r1, [pc, #60]	@ (80023b0 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x1e8>)
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x200>)
 8002376:	2201      	movs	r2, #1
 8002378:	c903      	ldmia	r1, {r0, r1}
 800237a:	f7ff fad9 	bl	8001930 <ssd1306_printf>
		for (int i=0; i<19; i++)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3301      	adds	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2b12      	cmp	r3, #18
 8002388:	ddd4      	ble.n	8002334 <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x16c>
		}
	}

	ssd1306_UpdateScreen(&oled_i2c);
 800238a:	4810      	ldr	r0, [pc, #64]	@ (80023cc <_ZN11IR_Receiver10ShowIrCodeE8IR_State+0x204>)
 800238c:	f7ff f90a 	bl	80015a4 <ssd1306_UpdateScreen>

	ResetState();
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fe5b 	bl	800204e <_ZN7IR_Base10ResetStateEv>
}
 8002398:	bf00      	nop
 800239a:	3720      	adds	r7, #32
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20004d64 	.word	0x20004d64
 80023a4:	20000014 	.word	0x20000014
 80023a8:	2000000c 	.word	0x2000000c
 80023ac:	080091c4 	.word	0x080091c4
 80023b0:	20000004 	.word	0x20000004
 80023b4:	080091cc 	.word	0x080091cc
 80023b8:	20004d60 	.word	0x20004d60
 80023bc:	080091d4 	.word	0x080091d4
 80023c0:	20000018 	.word	0x20000018
 80023c4:	92492493 	.word	0x92492493
 80023c8:	080091e4 	.word	0x080091e4
 80023cc:	200002cc 	.word	0x200002cc

080023d0 <_ZN11IR_Receiver13proc_IRsignalEi>:

/** \brief	Process IR signal.
	The IR signal is process by a state machine.
*/
IR_State	IR_Receiver::proc_IRsignal(int pulseWidth)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b09e      	sub	sp, #120	@ 0x78
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
	m_pulseWidth = pulseWidth;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023e0:	461a      	mov	r2, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f8c2 3f78 	str.w	r3, [r2, #3960]	@ 0xf78

	switch(m_state)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ee:	f893 3f63 	ldrb.w	r3, [r3, #3939]	@ 0xf63
 80023f2:	3b01      	subs	r3, #1
 80023f4:	2b09      	cmp	r3, #9
 80023f6:	f200 8302 	bhi.w	80029fe <_ZN11IR_Receiver13proc_IRsignalEi+0x62e>
 80023fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002400 <_ZN11IR_Receiver13proc_IRsignalEi+0x30>)
 80023fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002400:	08002429 	.word	0x08002429
 8002404:	0800249f 	.word	0x0800249f
 8002408:	0800253b 	.word	0x0800253b
 800240c:	08002581 	.word	0x08002581
 8002410:	08002753 	.word	0x08002753
 8002414:	080029ff 	.word	0x080029ff
 8002418:	080029ff 	.word	0x080029ff
 800241c:	08002799 	.word	0x08002799
 8002420:	080027fb 	.word	0x080027fb
 8002424:	08002841 	.word	0x08002841
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	677b      	str	r3, [r7, #116]	@ 0x74
 800242c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002430:	673b      	str	r3, [r7, #112]	@ 0x70
/**	\brief	Check pulse width.
 *
 */
bool	IR_Receiver::about(int nTick)
{
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 8002432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002434:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002438:	f8d3 2f78 	ldr.w	r2, [r3, #3960]	@ 0xf78
 800243c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	bfb8      	it	lt
 8002444:	425b      	neglt	r3, r3
 8002446:	2b29      	cmp	r3, #41	@ 0x29
 8002448:	bfd4      	ite	le
 800244a:	2301      	movle	r3, #1
 800244c:	2300      	movgt	r3, #0
 800244e:	b2db      	uxtb	r3, r3
		if (about(16*NEC_TICK))			// 9 ms
 8002450:	2b00      	cmp	r3, #0
 8002452:	d006      	beq.n	8002462 <_ZN11IR_Receiver13proc_IRsignalEi+0x92>
			m_state = NEC_LEADING;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 8002460:	e2cf      	b.n	8002a02 <_ZN11IR_Receiver13proc_IRsignalEi+0x632>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002466:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800246a:	66bb      	str	r3, [r7, #104]	@ 0x68
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 800246c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800246e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002472:	f8d3 2f78 	ldr.w	r2, [r3, #3960]	@ 0xf78
 8002476:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	bfb8      	it	lt
 800247e:	425b      	neglt	r3, r3
 8002480:	2b29      	cmp	r3, #41	@ 0x29
 8002482:	bfd4      	ite	le
 8002484:	2301      	movle	r3, #1
 8002486:	2300      	movgt	r3, #0
 8002488:	b2db      	uxtb	r3, r3
		else if (about(8*DAIKIN_TICK))	// 3.5 ms
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 82b9 	beq.w	8002a02 <_ZN11IR_Receiver13proc_IRsignalEi+0x632>
			m_state = DAIKIN_LEADING;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002496:	2208      	movs	r2, #8
 8002498:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 800249c:	e2b1      	b.n	8002a02 <_ZN11IR_Receiver13proc_IRsignalEi+0x632>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80024a2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80024a6:	663b      	str	r3, [r7, #96]	@ 0x60
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 80024a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ae:	f8d3 2f78 	ldr.w	r2, [r3, #3960]	@ 0xf78
 80024b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	bfb8      	it	lt
 80024ba:	425b      	neglt	r3, r3
 80024bc:	2b29      	cmp	r3, #41	@ 0x29
 80024be:	bfd4      	ite	le
 80024c0:	2301      	movle	r3, #1
 80024c2:	2300      	movgt	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
		if (about(8*NEC_TICK))			// 4.5 ms
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d014      	beq.n	80024f4 <_ZN11IR_Receiver13proc_IRsignalEi+0x124>
			m_bitNo = 0;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024d0:	461a      	mov	r2, r3
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8c2 3f64 	str.w	r3, [r2, #3940]	@ 0xf64
			m_byteNo = 0;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024de:	461a      	mov	r2, r3
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8c2 3f68 	str.w	r3, [r2, #3944]	@ 0xf68
			m_state = NEC_DATAFRAME;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ec:	2203      	movs	r2, #3
 80024ee:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 80024f2:	e28b      	b.n	8002a0c <_ZN11IR_Receiver13proc_IRsignalEi+0x63c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024f8:	23e0      	movs	r3, #224	@ 0xe0
 80024fa:	65bb      	str	r3, [r7, #88]	@ 0x58
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 80024fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002502:	f8d3 2f78 	ldr.w	r2, [r3, #3960]	@ 0xf78
 8002506:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	bfb8      	it	lt
 800250e:	425b      	neglt	r3, r3
 8002510:	2b29      	cmp	r3, #41	@ 0x29
 8002512:	bfd4      	ite	le
 8002514:	2301      	movle	r3, #1
 8002516:	2300      	movgt	r3, #0
 8002518:	b2db      	uxtb	r3, r3
		else if (about(4*NEC_TICK))		// 2.25 ms
 800251a:	2b00      	cmp	r3, #0
 800251c:	d006      	beq.n	800252c <_ZN11IR_Receiver13proc_IRsignalEi+0x15c>
			m_state = NEC_REPEATCODE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002524:	2205      	movs	r2, #5
 8002526:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 800252a:	e26f      	b.n	8002a0c <_ZN11IR_Receiver13proc_IRsignalEi+0x63c>
			m_state = ST_START;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 8002538:	e268      	b.n	8002a0c <_ZN11IR_Receiver13proc_IRsignalEi+0x63c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	657b      	str	r3, [r7, #84]	@ 0x54
 800253e:	2338      	movs	r3, #56	@ 0x38
 8002540:	653b      	str	r3, [r7, #80]	@ 0x50
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 8002542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002544:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002548:	f8d3 2f78 	ldr.w	r2, [r3, #3960]	@ 0xf78
 800254c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	bfb8      	it	lt
 8002554:	425b      	neglt	r3, r3
 8002556:	2b29      	cmp	r3, #41	@ 0x29
 8002558:	bfd4      	ite	le
 800255a:	2301      	movle	r3, #1
 800255c:	2300      	movgt	r3, #0
 800255e:	b2db      	uxtb	r3, r3
		if (about(NEC_TICK)) 			// 0.56 ms
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <_ZN11IR_Receiver13proc_IRsignalEi+0x1a2>
			m_state = NEC_DATABIT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800256a:	2204      	movs	r2, #4
 800256c:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 8002570:	e24c      	b.n	8002a0c <_ZN11IR_Receiver13proc_IRsignalEi+0x63c>
			m_state = ST_START;	// frame error
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 800257e:	e245      	b.n	8002a0c <_ZN11IR_Receiver13proc_IRsignalEi+0x63c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002584:	2338      	movs	r3, #56	@ 0x38
 8002586:	64bb      	str	r3, [r7, #72]	@ 0x48
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 8002588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800258a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800258e:	f8d3 2f78 	ldr.w	r2, [r3, #3960]	@ 0xf78
 8002592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	bfb8      	it	lt
 800259a:	425b      	neglt	r3, r3
 800259c:	2b29      	cmp	r3, #41	@ 0x29
 800259e:	bfd4      	ite	le
 80025a0:	2301      	movle	r3, #1
 80025a2:	2300      	movgt	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
		if (about(NEC_TICK) || about(3*NEC_TICK))	// 0.56 ms or 1.68 ms
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d114      	bne.n	80025d4 <_ZN11IR_Receiver13proc_IRsignalEi+0x204>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80025ae:	23a8      	movs	r3, #168	@ 0xa8
 80025b0:	643b      	str	r3, [r7, #64]	@ 0x40
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 80025b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025b8:	f8d3 2f78 	ldr.w	r2, [r3, #3960]	@ 0xf78
 80025bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bfb8      	it	lt
 80025c4:	425b      	neglt	r3, r3
 80025c6:	2b29      	cmp	r3, #41	@ 0x29
 80025c8:	bfd4      	ite	le
 80025ca:	2301      	movle	r3, #1
 80025cc:	2300      	movgt	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
		if (about(NEC_TICK) || about(3*NEC_TICK))	// 0.56 ms or 1.68 ms
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <_ZN11IR_Receiver13proc_IRsignalEi+0x208>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <_ZN11IR_Receiver13proc_IRsignalEi+0x20a>
 80025d8:	2300      	movs	r3, #0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 80b2 	beq.w	8002744 <_ZN11IR_Receiver13proc_IRsignalEi+0x374>
			m_datacode[m_byteNo] >>= 1;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025e6:	f8d3 3f68 	ldr.w	r3, [r3, #3944]	@ 0xf68
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	441a      	add	r2, r3
 80025ee:	f641 7350 	movw	r3, #8016	@ 0x1f50
 80025f2:	4413      	add	r3, r2
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025fc:	f8d3 3f68 	ldr.w	r3, [r3, #3944]	@ 0xf68
 8002600:	0852      	lsrs	r2, r2, #1
 8002602:	b2d1      	uxtb	r1, r2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	441a      	add	r2, r3
 8002608:	f641 7350 	movw	r3, #8016	@ 0x1f50
 800260c:	4413      	add	r3, r2
 800260e:	460a      	mov	r2, r1
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002616:	2338      	movs	r3, #56	@ 0x38
 8002618:	63bb      	str	r3, [r7, #56]	@ 0x38
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 800261a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800261c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002620:	f8d3 2f78 	ldr.w	r2, [r3, #3960]	@ 0xf78
 8002624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	bfb8      	it	lt
 800262c:	425b      	neglt	r3, r3
 800262e:	2b29      	cmp	r3, #41	@ 0x29
 8002630:	bfd4      	ite	le
 8002632:	2301      	movle	r3, #1
 8002634:	2300      	movgt	r3, #0
 8002636:	b2db      	uxtb	r3, r3
			if (about(NEC_TICK))
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01a      	beq.n	8002672 <_ZN11IR_Receiver13proc_IRsignalEi+0x2a2>
				m_datacode[m_byteNo] &= 0x7f;	// bit = 0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002642:	f8d3 3f68 	ldr.w	r3, [r3, #3944]	@ 0xf68
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	441a      	add	r2, r3
 800264a:	f641 7350 	movw	r3, #8016	@ 0x1f50
 800264e:	4413      	add	r3, r2
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002658:	f8d3 3f68 	ldr.w	r3, [r3, #3944]	@ 0xf68
 800265c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002660:	b2d1      	uxtb	r1, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	441a      	add	r2, r3
 8002666:	f641 7350 	movw	r3, #8016	@ 0x1f50
 800266a:	4413      	add	r3, r2
 800266c:	460a      	mov	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e019      	b.n	80026a6 <_ZN11IR_Receiver13proc_IRsignalEi+0x2d6>
				m_datacode[m_byteNo] |= 0x80;	// bit = 1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002678:	f8d3 3f68 	ldr.w	r3, [r3, #3944]	@ 0xf68
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	441a      	add	r2, r3
 8002680:	f641 7350 	movw	r3, #8016	@ 0x1f50
 8002684:	4413      	add	r3, r2
 8002686:	781a      	ldrb	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800268e:	f8d3 3f68 	ldr.w	r3, [r3, #3944]	@ 0xf68
 8002692:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002696:	b2d1      	uxtb	r1, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	441a      	add	r2, r3
 800269c:	f641 7350 	movw	r3, #8016	@ 0x1f50
 80026a0:	4413      	add	r3, r2
 80026a2:	460a      	mov	r2, r1
 80026a4:	701a      	strb	r2, [r3, #0]
			m_state = NEC_DATAFRAME;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026ac:	2203      	movs	r2, #3
 80026ae:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
			if (++m_bitNo == 8)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026b8:	f8d3 3f64 	ldr.w	r3, [r3, #3940]	@ 0xf64
 80026bc:	3301      	adds	r3, #1
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026c4:	f8c2 3f64 	str.w	r3, [r2, #3940]	@ 0xf64
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026ce:	f8d3 3f64 	ldr.w	r3, [r3, #3940]	@ 0xf64
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	bf0c      	ite	eq
 80026d6:	2301      	moveq	r3, #1
 80026d8:	2300      	movne	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 8192 	beq.w	8002a06 <_ZN11IR_Receiver13proc_IRsignalEi+0x636>
				printf("\r\n");
 80026e2:	4894      	ldr	r0, [pc, #592]	@ (8002934 <_ZN11IR_Receiver13proc_IRsignalEi+0x564>)
 80026e4:	f005 fa9a 	bl	8007c1c <puts>
				m_bitNo = 0;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026ee:	461a      	mov	r2, r3
 80026f0:	2300      	movs	r3, #0
 80026f2:	f8c2 3f64 	str.w	r3, [r2, #3940]	@ 0xf64
				if (++m_byteNo == 4)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026fc:	f8d3 3f68 	ldr.w	r3, [r3, #3944]	@ 0xf68
 8002700:	3301      	adds	r3, #1
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002708:	f8c2 3f68 	str.w	r3, [r2, #3944]	@ 0xf68
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002712:	f8d3 3f68 	ldr.w	r3, [r3, #3944]	@ 0xf68
 8002716:	2b04      	cmp	r3, #4
 8002718:	bf0c      	ite	eq
 800271a:	2301      	moveq	r3, #1
 800271c:	2300      	movne	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8170 	beq.w	8002a06 <_ZN11IR_Receiver13proc_IRsignalEi+0x636>
					m_state = (check_IRcode() >= 0) ? NEC_DONE : ST_START;
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f97a 	bl	8002a20 <_ZN11IR_Receiver12check_IRcodeEv>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	db01      	blt.n	8002736 <_ZN11IR_Receiver13proc_IRsignalEi+0x366>
 8002732:	2206      	movs	r2, #6
 8002734:	e000      	b.n	8002738 <_ZN11IR_Receiver13proc_IRsignalEi+0x368>
 8002736:	2201      	movs	r2, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800273e:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 8002742:	e160      	b.n	8002a06 <_ZN11IR_Receiver13proc_IRsignalEi+0x636>
			m_state = ST_START;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 8002750:	e159      	b.n	8002a06 <_ZN11IR_Receiver13proc_IRsignalEi+0x636>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	637b      	str	r3, [r7, #52]	@ 0x34
 8002756:	2338      	movs	r3, #56	@ 0x38
 8002758:	633b      	str	r3, [r7, #48]	@ 0x30
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 800275a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800275c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002760:	f8d3 2f78 	ldr.w	r2, [r3, #3960]	@ 0xf78
 8002764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	bfb8      	it	lt
 800276c:	425b      	neglt	r3, r3
 800276e:	2b29      	cmp	r3, #41	@ 0x29
 8002770:	bfd4      	ite	le
 8002772:	2301      	movle	r3, #1
 8002774:	2300      	movgt	r3, #0
 8002776:	b2db      	uxtb	r3, r3
		if (about(NEC_TICK)) 			// 0.56 ms
 8002778:	2b00      	cmp	r3, #0
 800277a:	d006      	beq.n	800278a <_ZN11IR_Receiver13proc_IRsignalEi+0x3ba>
			m_state = NEC_DONE_REPEAT;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002782:	2207      	movs	r2, #7
 8002784:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 8002788:	e140      	b.n	8002a0c <_ZN11IR_Receiver13proc_IRsignalEi+0x63c>
			m_state = ST_START;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 8002796:	e139      	b.n	8002a0c <_ZN11IR_Receiver13proc_IRsignalEi+0x63c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800279c:	23b0      	movs	r3, #176	@ 0xb0
 800279e:	62bb      	str	r3, [r7, #40]	@ 0x28
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 80027a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027a6:	f8d3 2f78 	ldr.w	r2, [r3, #3960]	@ 0xf78
 80027aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bfb8      	it	lt
 80027b2:	425b      	neglt	r3, r3
 80027b4:	2b29      	cmp	r3, #41	@ 0x29
 80027b6:	bfd4      	ite	le
 80027b8:	2301      	movle	r3, #1
 80027ba:	2300      	movgt	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
		if (about(4*DAIKIN_TICK))			// 1.76 ms
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d014      	beq.n	80027ec <_ZN11IR_Receiver13proc_IRsignalEi+0x41c>
			m_bitNo = 0;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027c8:	461a      	mov	r2, r3
 80027ca:	2300      	movs	r3, #0
 80027cc:	f8c2 3f64 	str.w	r3, [r2, #3940]	@ 0xf64
			m_byteNo = 0;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027d6:	461a      	mov	r2, r3
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c2 3f68 	str.w	r3, [r2, #3944]	@ 0xf68
			m_state = DAIKIN_DATAFRAME;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027e4:	2209      	movs	r2, #9
 80027e6:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 80027ea:	e10f      	b.n	8002a0c <_ZN11IR_Receiver13proc_IRsignalEi+0x63c>
			m_state = ST_START;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 80027f8:	e108      	b.n	8002a0c <_ZN11IR_Receiver13proc_IRsignalEi+0x63c>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80027fe:	232c      	movs	r3, #44	@ 0x2c
 8002800:	623b      	str	r3, [r7, #32]
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 8002802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002804:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002808:	f8d3 2f78 	ldr.w	r2, [r3, #3960]	@ 0xf78
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	bfb8      	it	lt
 8002814:	425b      	neglt	r3, r3
 8002816:	2b29      	cmp	r3, #41	@ 0x29
 8002818:	bfd4      	ite	le
 800281a:	2301      	movle	r3, #1
 800281c:	2300      	movgt	r3, #0
 800281e:	b2db      	uxtb	r3, r3
		if (about(DAIKIN_TICK)) 			// 0.44 ms
 8002820:	2b00      	cmp	r3, #0
 8002822:	d006      	beq.n	8002832 <_ZN11IR_Receiver13proc_IRsignalEi+0x462>
			m_state = DAIKIN_DATABIT;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800282a:	220a      	movs	r2, #10
 800282c:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 8002830:	e0ec      	b.n	8002a0c <_ZN11IR_Receiver13proc_IRsignalEi+0x63c>
			m_state = ST_START;	// frame error
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 800283e:	e0e5      	b.n	8002a0c <_ZN11IR_Receiver13proc_IRsignalEi+0x63c>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	232c      	movs	r3, #44	@ 0x2c
 8002846:	61bb      	str	r3, [r7, #24]
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800284e:	f8d3 2f78 	ldr.w	r2, [r3, #3960]	@ 0xf78
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	bfb8      	it	lt
 800285a:	425b      	neglt	r3, r3
 800285c:	2b29      	cmp	r3, #41	@ 0x29
 800285e:	bfd4      	ite	le
 8002860:	2301      	movle	r3, #1
 8002862:	2300      	movgt	r3, #0
 8002864:	b2db      	uxtb	r3, r3
		if (about(DAIKIN_TICK) || about(3*DAIKIN_TICK))	// 0.44 ms or 1.32 ms
 8002866:	2b00      	cmp	r3, #0
 8002868:	d114      	bne.n	8002894 <_ZN11IR_Receiver13proc_IRsignalEi+0x4c4>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	2384      	movs	r3, #132	@ 0x84
 8002870:	613b      	str	r3, [r7, #16]
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002878:	f8d3 2f78 	ldr.w	r2, [r3, #3960]	@ 0xf78
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	bfb8      	it	lt
 8002884:	425b      	neglt	r3, r3
 8002886:	2b29      	cmp	r3, #41	@ 0x29
 8002888:	bfd4      	ite	le
 800288a:	2301      	movle	r3, #1
 800288c:	2300      	movgt	r3, #0
 800288e:	b2db      	uxtb	r3, r3
		if (about(DAIKIN_TICK) || about(3*DAIKIN_TICK))	// 0.44 ms or 1.32 ms
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <_ZN11IR_Receiver13proc_IRsignalEi+0x4c8>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <_ZN11IR_Receiver13proc_IRsignalEi+0x4ca>
 8002898:	2300      	movs	r3, #0
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 80a8 	beq.w	80029f0 <_ZN11IR_Receiver13proc_IRsignalEi+0x620>
			m_datacode[m_byteNo] >>= 1;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a6:	f8d3 3f68 	ldr.w	r3, [r3, #3944]	@ 0xf68
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	441a      	add	r2, r3
 80028ae:	f641 7350 	movw	r3, #8016	@ 0x1f50
 80028b2:	4413      	add	r3, r2
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028bc:	f8d3 3f68 	ldr.w	r3, [r3, #3944]	@ 0xf68
 80028c0:	0852      	lsrs	r2, r2, #1
 80028c2:	b2d1      	uxtb	r1, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	441a      	add	r2, r3
 80028c8:	f641 7350 	movw	r3, #8016	@ 0x1f50
 80028cc:	4413      	add	r3, r2
 80028ce:	460a      	mov	r2, r1
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	232c      	movs	r3, #44	@ 0x2c
 80028d8:	60bb      	str	r3, [r7, #8]
	return abs(m_pulseWidth - nTick) < TIME_ERROR;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028e0:	f8d3 2f78 	ldr.w	r2, [r3, #3960]	@ 0xf78
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bfb8      	it	lt
 80028ec:	425b      	neglt	r3, r3
 80028ee:	2b29      	cmp	r3, #41	@ 0x29
 80028f0:	bfd4      	ite	le
 80028f2:	2301      	movle	r3, #1
 80028f4:	2300      	movgt	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
			if (about(DAIKIN_TICK))
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01d      	beq.n	8002938 <_ZN11IR_Receiver13proc_IRsignalEi+0x568>
				m_datacode[m_byteNo] &= 0x7f;	// bit = 0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002902:	f8d3 3f68 	ldr.w	r3, [r3, #3944]	@ 0xf68
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	441a      	add	r2, r3
 800290a:	f641 7350 	movw	r3, #8016	@ 0x1f50
 800290e:	4413      	add	r3, r2
 8002910:	781a      	ldrb	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002918:	f8d3 3f68 	ldr.w	r3, [r3, #3944]	@ 0xf68
 800291c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002920:	b2d1      	uxtb	r1, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	441a      	add	r2, r3
 8002926:	f641 7350 	movw	r3, #8016	@ 0x1f50
 800292a:	4413      	add	r3, r2
 800292c:	460a      	mov	r2, r1
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e01c      	b.n	800296c <_ZN11IR_Receiver13proc_IRsignalEi+0x59c>
 8002932:	bf00      	nop
 8002934:	08009198 	.word	0x08009198
				m_datacode[m_byteNo] |= 0x80;	// bit = 1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800293e:	f8d3 3f68 	ldr.w	r3, [r3, #3944]	@ 0xf68
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	441a      	add	r2, r3
 8002946:	f641 7350 	movw	r3, #8016	@ 0x1f50
 800294a:	4413      	add	r3, r2
 800294c:	781a      	ldrb	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002954:	f8d3 3f68 	ldr.w	r3, [r3, #3944]	@ 0xf68
 8002958:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800295c:	b2d1      	uxtb	r1, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	441a      	add	r2, r3
 8002962:	f641 7350 	movw	r3, #8016	@ 0x1f50
 8002966:	4413      	add	r3, r2
 8002968:	460a      	mov	r2, r1
 800296a:	701a      	strb	r2, [r3, #0]
			m_state = DAIKIN_DATAFRAME;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002972:	2209      	movs	r2, #9
 8002974:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
			if (++m_bitNo == 8)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800297e:	f8d3 3f64 	ldr.w	r3, [r3, #3940]	@ 0xf64
 8002982:	3301      	adds	r3, #1
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800298a:	f8c2 3f64 	str.w	r3, [r2, #3940]	@ 0xf64
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002994:	f8d3 3f64 	ldr.w	r3, [r3, #3940]	@ 0xf64
 8002998:	2b08      	cmp	r3, #8
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d031      	beq.n	8002a0a <_ZN11IR_Receiver13proc_IRsignalEi+0x63a>
				m_bitNo = 0;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ac:	461a      	mov	r2, r3
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8c2 3f64 	str.w	r3, [r2, #3940]	@ 0xf64
				if (++m_byteNo == 19)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ba:	f8d3 3f68 	ldr.w	r3, [r3, #3944]	@ 0xf68
 80029be:	3301      	adds	r3, #1
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029c6:	f8c2 3f68 	str.w	r3, [r2, #3944]	@ 0xf68
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029d0:	f8d3 3f68 	ldr.w	r3, [r3, #3944]	@ 0xf68
 80029d4:	2b13      	cmp	r3, #19
 80029d6:	bf0c      	ite	eq
 80029d8:	2301      	moveq	r3, #1
 80029da:	2300      	movne	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d013      	beq.n	8002a0a <_ZN11IR_Receiver13proc_IRsignalEi+0x63a>
					m_state = DAIKIN_DONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029e8:	220b      	movs	r2, #11
 80029ea:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 80029ee:	e00c      	b.n	8002a0a <_ZN11IR_Receiver13proc_IRsignalEi+0x63a>
			m_state = ST_START;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 80029fc:	e005      	b.n	8002a0a <_ZN11IR_Receiver13proc_IRsignalEi+0x63a>
		break;
 80029fe:	bf00      	nop
 8002a00:	e004      	b.n	8002a0c <_ZN11IR_Receiver13proc_IRsignalEi+0x63c>
		break;
 8002a02:	bf00      	nop
 8002a04:	e002      	b.n	8002a0c <_ZN11IR_Receiver13proc_IRsignalEi+0x63c>
		break;
 8002a06:	bf00      	nop
 8002a08:	e000      	b.n	8002a0c <_ZN11IR_Receiver13proc_IRsignalEi+0x63c>
		break;
 8002a0a:	bf00      	nop
	return m_state;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a12:	f893 3f63 	ldrb.w	r3, [r3, #3939]	@ 0xf63
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3778      	adds	r7, #120	@ 0x78
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop

08002a20 <_ZN11IR_Receiver12check_IRcodeEv>:

	The received IR code is checked against a code table that is
	retrieved from a real IR remote controller.
*/
int		IR_Receiver::check_IRcode(void)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	if (m_datacode[2] + m_datacode[3] != 0xff)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a2e:	f893 3f52 	ldrb.w	r3, [r3, #3922]	@ 0xf52
 8002a32:	461a      	mov	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a3a:	f893 3f53 	ldrb.w	r3, [r3, #3923]	@ 0xf53
 8002a3e:	4413      	add	r3, r2
 8002a40:	2bff      	cmp	r3, #255	@ 0xff
 8002a42:	d002      	beq.n	8002a4a <_ZN11IR_Receiver12check_IRcodeEv+0x2a>
		return -1;
 8002a44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a48:	e074      	b.n	8002b34 <_ZN11IR_Receiver12check_IRcodeEv+0x114>

	m_ircode = m_datacode[2];
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a50:	f893 3f52 	ldrb.w	r3, [r3, #3922]	@ 0xf52
 8002a54:	461a      	mov	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a5c:	f8a3 2f6c 	strh.w	r2, [r3, #3948]	@ 0xf6c
	uint16_t customcode = m_datacode[0] | (m_datacode[1] << 8);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a66:	f893 3f50 	ldrb.w	r3, [r3, #3920]	@ 0xf50
 8002a6a:	b21a      	sxth	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a72:	f893 3f51 	ldrb.w	r3, [r3, #3921]	@ 0xf51
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	b21b      	sxth	r3, r3
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	b21b      	sxth	r3, r3
 8002a7e:	81fb      	strh	r3, [r7, #14]

	bool bFound = IR_CodeTable::FindKey(customcode, m_ircode, &m_pControllerName, &m_pkeyname);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a86:	f8b3 3f6c 	ldrh.w	r3, [r3, #3948]	@ 0xf6c
 8002a8a:	b2dc      	uxtb	r4, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f641 7270 	movw	r2, #8048	@ 0x1f70
 8002a92:	441a      	add	r2, r3
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	f641 7374 	movw	r3, #8052	@ 0x1f74
 8002a9a:	440b      	add	r3, r1
 8002a9c:	89f8      	ldrh	r0, [r7, #14]
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	f7ff fa42 	bl	8001f28 <_ZN12IR_CodeTable7FindKeyEthPPKcS2_>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	737b      	strb	r3, [r7, #13]

	if (bFound)
 8002aa8:	7b7b      	ldrb	r3, [r7, #13]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <_ZN11IR_Receiver12check_IRcodeEv+0x92>
		return 1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e040      	b.n	8002b34 <_ZN11IR_Receiver12check_IRcodeEv+0x114>

	if ((m_datacode[0] + m_datacode[1] == 0xff) ||
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ab8:	f893 3f50 	ldrb.w	r3, [r3, #3920]	@ 0xf50
 8002abc:	461a      	mov	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ac4:	f893 3f51 	ldrb.w	r3, [r3, #3921]	@ 0xf51
 8002ac8:	4413      	add	r3, r2
 8002aca:	2bff      	cmp	r3, #255	@ 0xff
 8002acc:	d00b      	beq.n	8002ae6 <_ZN11IR_Receiver12check_IRcodeEv+0xc6>
		(m_datacode[0] == m_datacode[1]))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ad4:	f893 2f50 	ldrb.w	r2, [r3, #3920]	@ 0xf50
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ade:	f893 3f51 	ldrb.w	r3, [r3, #3921]	@ 0xf51
	if ((m_datacode[0] + m_datacode[1] == 0xff) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d124      	bne.n	8002b30 <_ZN11IR_Receiver12check_IRcodeEv+0x110>
	{
		m_ircode |= ((uint16_t) m_datacode[0] << 8);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aec:	f8b3 3f6c 	ldrh.w	r3, [r3, #3948]	@ 0xf6c
 8002af0:	b21a      	sxth	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002af8:	f893 3f50 	ldrb.w	r3, [r3, #3920]	@ 0xf50
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	b21b      	sxth	r3, r3
 8002b00:	4313      	orrs	r3, r2
 8002b02:	b21b      	sxth	r3, r3
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b0c:	f8a3 2f6c 	strh.w	r2, [r3, #3948]	@ 0xf6c
		m_pControllerName = "Unknown";
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <_ZN11IR_Receiver12check_IRcodeEv+0x11c>)
 8002b1a:	f8c2 3f70 	str.w	r3, [r2, #3952]	@ 0xf70
		m_pkeyname = "Unknown";
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b05      	ldr	r3, [pc, #20]	@ (8002b3c <_ZN11IR_Receiver12check_IRcodeEv+0x11c>)
 8002b28:	f8c2 3f74 	str.w	r3, [r2, #3956]	@ 0xf74
		return 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e001      	b.n	8002b34 <_ZN11IR_Receiver12check_IRcodeEv+0x114>
	}

	return -1;
 8002b30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd90      	pop	{r4, r7, pc}
 8002b3c:	080091ec 	.word	0x080091ec

08002b40 <_Z14showRelayStatev>:

/**	\brief	Show Relay state.
 *
 */
void	showRelayState()
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af02      	add	r7, sp, #8
	ssd1306_SetCursor(14*Font_5x7.FontWidth, 0);
 8002b46:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <_Z14showRelayStatev+0x40>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	00d2      	lsls	r2, r2, #3
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fed2 	bl	8001900 <ssd1306_SetCursor>
	ssd1306_printf(Font_5x7, White, "Relay %c", g_bEnableRelay ? 'v' : '_');
 8002b5c:	4b09      	ldr	r3, [pc, #36]	@ (8002b84 <_Z14showRelayStatev+0x44>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <_Z14showRelayStatev+0x28>
 8002b64:	2376      	movs	r3, #118	@ 0x76
 8002b66:	e000      	b.n	8002b6a <_Z14showRelayStatev+0x2a>
 8002b68:	235f      	movs	r3, #95	@ 0x5f
 8002b6a:	4905      	ldr	r1, [pc, #20]	@ (8002b80 <_Z14showRelayStatev+0x40>)
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <_Z14showRelayStatev+0x48>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	c903      	ldmia	r1, {r0, r1}
 8002b74:	f7fe fedc 	bl	8001930 <ssd1306_printf>
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000004 	.word	0x20000004
 8002b84:	2000000c 	.word	0x2000000c
 8002b88:	080091f4 	.word	0x080091f4

08002b8c <_ZN9IR_SenderC1Ev>:
#include "gpio.h"
#include "tim.h"

#include "ir_sender.h"

IR_Sender::IR_Sender()
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff f940 	bl	8001e1c <_ZN7IR_BaseC1Ev>
{
	m_state = ST_IDLE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
}
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <_ZN9IR_Sender8SendCodeEm>:

/**	\brief	Call this function to start sending an IR code.
 *
 */
void	IR_Sender::SendCode(uint32_t code)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
	uint32_t timing = sys_tick_10us;
 8002bbe:	4b28      	ldr	r3, [pc, #160]	@ (8002c60 <_ZN9IR_Sender8SendCodeEm+0xac>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]

	put(MARK, timing); timing += 16*NEC_TICK;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f8de 	bl	8002d8c <_ZN9IR_Timing3putE8IR_STATEm>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8002bd6:	60fb      	str	r3, [r7, #12]
	put(SPACE, timing); timing += 8*NEC_TICK;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f8d4 	bl	8002d8c <_ZN9IR_Timing3putE8IR_STATEm>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8002bea:	60fb      	str	r3, [r7, #12]

	for (int i=0; i<32; i++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	e01f      	b.n	8002c32 <_ZN9IR_Sender8SendCodeEm+0x7e>
	{
		put(MARK, timing); timing += NEC_TICK;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 f8c7 	bl	8002d8c <_ZN9IR_Timing3putE8IR_STATEm>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3338      	adds	r3, #56	@ 0x38
 8002c02:	60fb      	str	r3, [r7, #12]
		put(SPACE, timing); timing += (code & 1) ? 3*NEC_TICK : NEC_TICK;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f8be 	bl	8002d8c <_ZN9IR_Timing3putE8IR_STATEm>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <_ZN9IR_Sender8SendCodeEm+0x6a>
 8002c1a:	23a8      	movs	r3, #168	@ 0xa8
 8002c1c:	e000      	b.n	8002c20 <_ZN9IR_Sender8SendCodeEm+0x6c>
 8002c1e:	2338      	movs	r3, #56	@ 0x38
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
		code >>= 1;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	085b      	lsrs	r3, r3, #1
 8002c2a:	603b      	str	r3, [r7, #0]
	for (int i=0; i<32; i++)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b1f      	cmp	r3, #31
 8002c36:	dddc      	ble.n	8002bf2 <_ZN9IR_Sender8SendCodeEm+0x3e>
	}
	put(MARK, timing); timing += NEC_TICK;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f8a4 	bl	8002d8c <_ZN9IR_Timing3putE8IR_STATEm>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3338      	adds	r3, #56	@ 0x38
 8002c48:	60fb      	str	r3, [r7, #12]
	put(SPACE, timing);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 f89b 	bl	8002d8c <_ZN9IR_Timing3putE8IR_STATEm>
}
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20004d68 	.word	0x20004d68

08002c64 <_ZN9IR_Sender10processingEv>:

/**	\brief	Process IR transmission.
 *
 */
void	IR_Sender::processing()
{
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
	switch(m_state)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c72:	f893 3f63 	ldrb.w	r3, [r3, #3939]	@ 0xf63
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <_ZN9IR_Sender10processingEv+0x1c>
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d01b      	beq.n	8002cb6 <_ZN9IR_Sender10processingEv+0x52>
			m_state = ST_IDLE;
		}
		break;

	default:
		break;
 8002c7e:	e03b      	b.n	8002cf8 <_ZN9IR_Sender10processingEv+0x94>
		if (m_size == 0)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d034      	beq.n	8002cf2 <_ZN9IR_Sender10processingEv+0x8e>
		m_signal = get();
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c90:	461c      	mov	r4, r3
 8002c92:	463b      	mov	r3, r7
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f8b5 	bl	8002e06 <_ZN9IR_Timing3getEv>
 8002c9c:	f604 7378 	addw	r3, r4, #3960	@ 0xf78
 8002ca0:	463a      	mov	r2, r7
 8002ca2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ca6:	e883 0003 	stmia.w	r3, {r0, r1}
		m_state = ST_START;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		if (sys_tick_10us >= m_signal.time)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cbc:	f8d3 2f78 	ldr.w	r2, [r3, #3960]	@ 0xf78
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d00 <_ZN9IR_Sender10processingEv+0x9c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d816      	bhi.n	8002cf6 <_ZN9IR_Sender10processingEv+0x92>
			SetIR(m_signal.state);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cce:	f893 3f7c 	ldrb.w	r3, [r3, #3964]	@ 0xf7c
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf14      	ite	ne
 8002cd6:	2301      	movne	r3, #1
 8002cd8:	2300      	moveq	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	4619      	mov	r1, r3
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f810 	bl	8002d04 <_ZN9IR_Sender5SetIREb>
			m_state = ST_IDLE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2f63 	strb.w	r2, [r3, #3939]	@ 0xf63
		break;
 8002cf0:	e001      	b.n	8002cf6 <_ZN9IR_Sender10processingEv+0x92>
			break;
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <_ZN9IR_Sender10processingEv+0x94>
		break;
 8002cf6:	bf00      	nop
	}
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd90      	pop	{r4, r7, pc}
 8002d00:	20004d68 	.word	0x20004d68

08002d04 <_ZN9IR_Sender5SetIREb>:

/**	\brief	Set IR LED and loopback pin.
 *
 */
void	IR_Sender::SetIR(bool bOn)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(IRTX_GPIO_Port, IRTX_Pin, bOn ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <_ZN9IR_Sender5SetIREb+0x16>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <_ZN9IR_Sender5SetIREb+0x18>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4803      	ldr	r0, [pc, #12]	@ (8002d30 <_ZN9IR_Sender5SetIREb+0x2c>)
 8002d22:	f000 ff39 	bl	8003b98 <HAL_GPIO_WritePin>
	//AL_GPIO_WritePin(IRTX2_GPIO_Port, IRTX2_Pin, bOn ? GPIO_PIN_RESET : GPIO_PIN_SET);
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40020800 	.word	0x40020800

08002d34 <_ZN9IR_TimingC1Ev>:
uint32_t sys_tick_10us = 0;

/**	\brief Constructor.
 *
 */
IR_Timing::IR_Timing()
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
{
	m_head = 0;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	605a      	str	r2, [r3, #4]
	m_tail = 0;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
	m_size = 0;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60da      	str	r2, [r3, #12]
	preSignalTick = 0;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
}
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
	...

08002d64 <_ZN9IR_Timing3putE8IR_STATE>:

/**	\brief	Save state and time in queue.
 *
 */
void	IR_Timing::put(IR_STATE state)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	70fb      	strb	r3, [r7, #3]
	put(state, sys_tick_10us);
 8002d70:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <_ZN9IR_Timing3putE8IR_STATE+0x24>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	4619      	mov	r1, r3
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f807 	bl	8002d8c <_ZN9IR_Timing3putE8IR_STATEm>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20004d68 	.word	0x20004d68

08002d8c <_ZN9IR_Timing3putE8IR_STATEm>:

void	IR_Timing::put(IR_STATE state, uint32_t time_10us)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	460b      	mov	r3, r1
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	72fb      	strb	r3, [r7, #11]
	if (m_size >= IR_TIME_NO)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002da2:	db01      	blt.n	8002da8 <_ZN9IR_Timing3putE8IR_STATEm+0x1c>
		Error_Handler();
 8002da4:	f7fd ff14 	bl	8000bd0 <Error_Handler>

	m_timing[m_tail].time = time_10us;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	3202      	adds	r2, #2
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	m_timing[m_tail].state = state;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	7afa      	ldrb	r2, [r7, #11]
 8002dc4:	711a      	strb	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc6:	b672      	cpsid	i
}
 8002dc8:	bf00      	nop

	__disable_irq();
	m_size++;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	60da      	str	r2, [r3, #12]
	if (++m_tail >= IR_TIME_NO)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002de6:	4293      	cmp	r3, r2
 8002de8:	bfcc      	ite	gt
 8002dea:	2301      	movgt	r3, #1
 8002dec:	2300      	movle	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <_ZN9IR_Timing3putE8IR_STATEm+0x6e>
		m_tail = 0;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8002dfa:	b662      	cpsie	i
}
 8002dfc:	bf00      	nop
	__enable_irq();

}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <_ZN9IR_Timing3getEv>:

/**	\brief	Get state and time from queue.
 *
 */
IrSignal IR_Timing::get()
{
 8002e06:	b480      	push	{r7}
 8002e08:	b087      	sub	sp, #28
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
	const IrSignal nul = {0, SPACE};
 8002e10:	2300      	movs	r3, #0
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	2300      	movs	r3, #0
 8002e16:	753b      	strb	r3, [r7, #20]

	if (m_size == 0)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d108      	bne.n	8002e32 <_ZN9IR_Timing3getEv+0x2c>
		return nul;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	461a      	mov	r2, r3
 8002e24:	f107 0310 	add.w	r3, r7, #16
 8002e28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e2c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002e30:	e02f      	b.n	8002e92 <_ZN9IR_Timing3getEv+0x8c>

	IrSignal time = m_timing[m_head];
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	6839      	ldr	r1, [r7, #0]
 8002e38:	3302      	adds	r3, #2
 8002e3a:	f107 0208 	add.w	r2, r7, #8
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	440b      	add	r3, r1
 8002e42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e46:	e882 0003 	stmia.w	r2, {r0, r1}
  __ASM volatile ("cpsid i" : : : "memory");
 8002e4a:	b672      	cpsid	i
}
 8002e4c:	bf00      	nop

	__disable_irq();
	m_size--;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	1e5a      	subs	r2, r3, #1
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	60da      	str	r2, [r3, #12]
	if (++m_head >= IR_TIME_NO)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	bfcc      	ite	gt
 8002e6e:	2301      	movgt	r3, #1
 8002e70:	2300      	movle	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <_ZN9IR_Timing3getEv+0x78>
		m_head = 0;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e7e:	b662      	cpsie	i
}
 8002e80:	bf00      	nop
	__enable_irq();

	return time;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	461a      	mov	r2, r3
 8002e86:	f107 0308 	add.w	r3, r7, #8
 8002e8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e8e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea2:	2003      	movs	r0, #3
 8002ea4:	f000 f94c 	bl	8003140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f000 f805 	bl	8002eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eae:	f7fd fe95 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ec0:	4b12      	ldr	r3, [pc, #72]	@ (8002f0c <HAL_InitTick+0x54>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b12      	ldr	r3, [pc, #72]	@ (8002f10 <HAL_InitTick+0x58>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f967 	bl	80031aa <HAL_SYSTICK_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00e      	b.n	8002f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b0f      	cmp	r3, #15
 8002eea:	d80a      	bhi.n	8002f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eec:	2200      	movs	r2, #0
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ef4:	f000 f92f 	bl	8003156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ef8:	4a06      	ldr	r2, [pc, #24]	@ (8002f14 <HAL_InitTick+0x5c>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e000      	b.n	8002f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20000000 	.word	0x20000000
 8002f10:	20000020 	.word	0x20000020
 8002f14:	2000001c 	.word	0x2000001c

08002f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <HAL_IncTick+0x20>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <HAL_IncTick+0x24>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	4a04      	ldr	r2, [pc, #16]	@ (8002f3c <HAL_IncTick+0x24>)
 8002f2a:	6013      	str	r3, [r2, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000020 	.word	0x20000020
 8002f3c:	20004d6c 	.word	0x20004d6c

08002f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return uwTick;
 8002f44:	4b03      	ldr	r3, [pc, #12]	@ (8002f54 <HAL_GetTick+0x14>)
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20004d6c 	.word	0x20004d6c

08002f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f60:	f7ff ffee 	bl	8002f40 <HAL_GetTick>
 8002f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f70:	d005      	beq.n	8002f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f72:	4b0a      	ldr	r3, [pc, #40]	@ (8002f9c <HAL_Delay+0x44>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f7e:	bf00      	nop
 8002f80:	f7ff ffde 	bl	8002f40 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d8f7      	bhi.n	8002f80 <HAL_Delay+0x28>
  {
  }
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000020 	.word	0x20000020

08002fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <__NVIC_SetPriorityGrouping+0x40>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fc8:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fce:	4a04      	ldr	r2, [pc, #16]	@ (8002fe0 <__NVIC_SetPriorityGrouping+0x40>)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	60d3      	str	r3, [r2, #12]
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000ed00 	.word	0xe000ed00
 8002fe4:	05fa0000 	.word	0x05fa0000

08002fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fec:	4b04      	ldr	r3, [pc, #16]	@ (8003000 <__NVIC_GetPriorityGrouping+0x18>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	0a1b      	lsrs	r3, r3, #8
 8002ff2:	f003 0307 	and.w	r3, r3, #7
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800300e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003012:	2b00      	cmp	r3, #0
 8003014:	db0b      	blt.n	800302e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	f003 021f 	and.w	r2, r3, #31
 800301c:	4907      	ldr	r1, [pc, #28]	@ (800303c <__NVIC_EnableIRQ+0x38>)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	2001      	movs	r0, #1
 8003026:	fa00 f202 	lsl.w	r2, r0, r2
 800302a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	e000e100 	.word	0xe000e100

08003040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	6039      	str	r1, [r7, #0]
 800304a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800304c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003050:	2b00      	cmp	r3, #0
 8003052:	db0a      	blt.n	800306a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	b2da      	uxtb	r2, r3
 8003058:	490c      	ldr	r1, [pc, #48]	@ (800308c <__NVIC_SetPriority+0x4c>)
 800305a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305e:	0112      	lsls	r2, r2, #4
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	440b      	add	r3, r1
 8003064:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003068:	e00a      	b.n	8003080 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	b2da      	uxtb	r2, r3
 800306e:	4908      	ldr	r1, [pc, #32]	@ (8003090 <__NVIC_SetPriority+0x50>)
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	3b04      	subs	r3, #4
 8003078:	0112      	lsls	r2, r2, #4
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	440b      	add	r3, r1
 800307e:	761a      	strb	r2, [r3, #24]
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000e100 	.word	0xe000e100
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003094:	b480      	push	{r7}
 8003096:	b089      	sub	sp, #36	@ 0x24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f1c3 0307 	rsb	r3, r3, #7
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	bf28      	it	cs
 80030b2:	2304      	movcs	r3, #4
 80030b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3304      	adds	r3, #4
 80030ba:	2b06      	cmp	r3, #6
 80030bc:	d902      	bls.n	80030c4 <NVIC_EncodePriority+0x30>
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3b03      	subs	r3, #3
 80030c2:	e000      	b.n	80030c6 <NVIC_EncodePriority+0x32>
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43da      	mvns	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	401a      	ands	r2, r3
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	fa01 f303 	lsl.w	r3, r1, r3
 80030e6:	43d9      	mvns	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ec:	4313      	orrs	r3, r2
         );
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3724      	adds	r7, #36	@ 0x24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3b01      	subs	r3, #1
 8003108:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800310c:	d301      	bcc.n	8003112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800310e:	2301      	movs	r3, #1
 8003110:	e00f      	b.n	8003132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003112:	4a0a      	ldr	r2, [pc, #40]	@ (800313c <SysTick_Config+0x40>)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3b01      	subs	r3, #1
 8003118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800311a:	210f      	movs	r1, #15
 800311c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003120:	f7ff ff8e 	bl	8003040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003124:	4b05      	ldr	r3, [pc, #20]	@ (800313c <SysTick_Config+0x40>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800312a:	4b04      	ldr	r3, [pc, #16]	@ (800313c <SysTick_Config+0x40>)
 800312c:	2207      	movs	r2, #7
 800312e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	e000e010 	.word	0xe000e010

08003140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff ff29 	bl	8002fa0 <__NVIC_SetPriorityGrouping>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003156:	b580      	push	{r7, lr}
 8003158:	b086      	sub	sp, #24
 800315a:	af00      	add	r7, sp, #0
 800315c:	4603      	mov	r3, r0
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003168:	f7ff ff3e 	bl	8002fe8 <__NVIC_GetPriorityGrouping>
 800316c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	6978      	ldr	r0, [r7, #20]
 8003174:	f7ff ff8e 	bl	8003094 <NVIC_EncodePriority>
 8003178:	4602      	mov	r2, r0
 800317a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff5d 	bl	8003040 <__NVIC_SetPriority>
}
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	4603      	mov	r3, r0
 8003196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff ff31 	bl	8003004 <__NVIC_EnableIRQ>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff ffa2 	bl	80030fc <SysTick_Config>
 80031b8:	4603      	mov	r3, r0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e06a      	b.n	80032ac <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d106      	bne.n	80031ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2223      	movs	r2, #35	@ 0x23
 80031e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7fd fa37 	bl	800065c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ee:	4b31      	ldr	r3, [pc, #196]	@ (80032b4 <HAL_ETH_Init+0xf0>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f2:	4a30      	ldr	r2, [pc, #192]	@ (80032b4 <HAL_ETH_Init+0xf0>)
 80031f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031fa:	4b2e      	ldr	r3, [pc, #184]	@ (80032b4 <HAL_ETH_Init+0xf0>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003206:	4b2c      	ldr	r3, [pc, #176]	@ (80032b8 <HAL_ETH_Init+0xf4>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4a2b      	ldr	r2, [pc, #172]	@ (80032b8 <HAL_ETH_Init+0xf4>)
 800320c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003210:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003212:	4b29      	ldr	r3, [pc, #164]	@ (80032b8 <HAL_ETH_Init+0xf4>)
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	4927      	ldr	r1, [pc, #156]	@ (80032b8 <HAL_ETH_Init+0xf4>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003220:	4b25      	ldr	r3, [pc, #148]	@ (80032b8 <HAL_ETH_Init+0xf4>)
 8003222:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800323a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800323c:	f7ff fe80 	bl	8002f40 <HAL_GetTick>
 8003240:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003242:	e011      	b.n	8003268 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003244:	f7ff fe7c 	bl	8002f40 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003252:	d909      	bls.n	8003268 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2204      	movs	r2, #4
 8003258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	22e0      	movs	r2, #224	@ 0xe0
 8003260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e021      	b.n	80032ac <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e4      	bne.n	8003244 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f958 	bl	8003530 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f9ff 	bl	8003684 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fa55 	bl	8003736 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	461a      	mov	r2, r3
 8003292:	2100      	movs	r1, #0
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f9bd 	bl	8003614 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2210      	movs	r2, #16
 80032a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40013800 	.word	0x40013800

080032bc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4b51      	ldr	r3, [pc, #324]	@ (8003418 <ETH_SetMACConfig+0x15c>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	7c1b      	ldrb	r3, [r3, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <ETH_SetMACConfig+0x28>
 80032de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032e2:	e000      	b.n	80032e6 <ETH_SetMACConfig+0x2a>
 80032e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	7c5b      	ldrb	r3, [r3, #17]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d102      	bne.n	80032f4 <ETH_SetMACConfig+0x38>
 80032ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80032f2:	e000      	b.n	80032f6 <ETH_SetMACConfig+0x3a>
 80032f4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032f6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80032fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	7fdb      	ldrb	r3, [r3, #31]
 8003302:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003304:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800330a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	7f92      	ldrb	r2, [r2, #30]
 8003310:	2a00      	cmp	r2, #0
 8003312:	d102      	bne.n	800331a <ETH_SetMACConfig+0x5e>
 8003314:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003318:	e000      	b.n	800331c <ETH_SetMACConfig+0x60>
 800331a:	2200      	movs	r2, #0
                        macconf->Speed |
 800331c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	7f1b      	ldrb	r3, [r3, #28]
 8003322:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003324:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800332a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	791b      	ldrb	r3, [r3, #4]
 8003330:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003332:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	f892 2020 	ldrb.w	r2, [r2, #32]
 800333a:	2a00      	cmp	r2, #0
 800333c:	d102      	bne.n	8003344 <ETH_SetMACConfig+0x88>
 800333e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003342:	e000      	b.n	8003346 <ETH_SetMACConfig+0x8a>
 8003344:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003346:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	7bdb      	ldrb	r3, [r3, #15]
 800334c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800334e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003354:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800335c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800335e:	4313      	orrs	r3, r2
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003376:	2001      	movs	r0, #1
 8003378:	f7ff fdee 	bl	8002f58 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003392:	4013      	ands	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800339a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80033a2:	2a00      	cmp	r2, #0
 80033a4:	d101      	bne.n	80033aa <ETH_SetMACConfig+0xee>
 80033a6:	2280      	movs	r2, #128	@ 0x80
 80033a8:	e000      	b.n	80033ac <ETH_SetMACConfig+0xf0>
 80033aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80033ac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80033b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80033ba:	2a01      	cmp	r2, #1
 80033bc:	d101      	bne.n	80033c2 <ETH_SetMACConfig+0x106>
 80033be:	2208      	movs	r2, #8
 80033c0:	e000      	b.n	80033c4 <ETH_SetMACConfig+0x108>
 80033c2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80033c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80033cc:	2a01      	cmp	r2, #1
 80033ce:	d101      	bne.n	80033d4 <ETH_SetMACConfig+0x118>
 80033d0:	2204      	movs	r2, #4
 80033d2:	e000      	b.n	80033d6 <ETH_SetMACConfig+0x11a>
 80033d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80033d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80033de:	2a01      	cmp	r2, #1
 80033e0:	d101      	bne.n	80033e6 <ETH_SetMACConfig+0x12a>
 80033e2:	2202      	movs	r2, #2
 80033e4:	e000      	b.n	80033e8 <ETH_SetMACConfig+0x12c>
 80033e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80033e8:	4313      	orrs	r3, r2
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003400:	2001      	movs	r0, #1
 8003402:	f7ff fda9 	bl	8002f58 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	619a      	str	r2, [r3, #24]
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	ff20810f 	.word	0xff20810f

0800341c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4b3d      	ldr	r3, [pc, #244]	@ (800352c <ETH_SetDMAConfig+0x110>)
 8003436:	4013      	ands	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	7b1b      	ldrb	r3, [r3, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d102      	bne.n	8003448 <ETH_SetDMAConfig+0x2c>
 8003442:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003446:	e000      	b.n	800344a <ETH_SetDMAConfig+0x2e>
 8003448:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	7b5b      	ldrb	r3, [r3, #13]
 800344e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003450:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	7f52      	ldrb	r2, [r2, #29]
 8003456:	2a00      	cmp	r2, #0
 8003458:	d102      	bne.n	8003460 <ETH_SetDMAConfig+0x44>
 800345a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800345e:	e000      	b.n	8003462 <ETH_SetDMAConfig+0x46>
 8003460:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003462:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	7b9b      	ldrb	r3, [r3, #14]
 8003468:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800346a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003470:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	7f1b      	ldrb	r3, [r3, #28]
 8003476:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003478:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	7f9b      	ldrb	r3, [r3, #30]
 800347e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003480:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003486:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800348e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003490:	4313      	orrs	r3, r2
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034a0:	461a      	mov	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034b2:	2001      	movs	r0, #1
 80034b4:	f7ff fd50 	bl	8002f58 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034c0:	461a      	mov	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	791b      	ldrb	r3, [r3, #4]
 80034ca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034d0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80034d6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80034dc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034e4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80034e6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80034ee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80034f4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003502:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003510:	2001      	movs	r0, #1
 8003512:	f7ff fd21 	bl	8002f58 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800351e:	461a      	mov	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6013      	str	r3, [r2, #0]
}
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	f8de3f23 	.word	0xf8de3f23

08003530 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b0a6      	sub	sp, #152	@ 0x98
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003544:	2300      	movs	r3, #0
 8003546:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003548:	2300      	movs	r3, #0
 800354a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800354e:	2301      	movs	r3, #1
 8003550:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003554:	2300      	movs	r3, #0
 8003556:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800355a:	2301      	movs	r3, #1
 800355c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003560:	2300      	movs	r3, #0
 8003562:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003566:	2300      	movs	r3, #0
 8003568:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800356c:	2300      	movs	r3, #0
 800356e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003570:	2300      	movs	r3, #0
 8003572:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003576:	2300      	movs	r3, #0
 8003578:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800357a:	2300      	movs	r3, #0
 800357c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003580:	2300      	movs	r3, #0
 8003582:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003586:	2300      	movs	r3, #0
 8003588:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800358c:	2300      	movs	r3, #0
 800358e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003592:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003596:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003598:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800359c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800359e:	2300      	movs	r3, #0
 80035a0:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80035a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80035a8:	4619      	mov	r1, r3
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff fe86 	bl	80032bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80035b0:	2301      	movs	r3, #1
 80035b2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80035b4:	2301      	movs	r3, #1
 80035b6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80035be:	2301      	movs	r3, #1
 80035c0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80035cc:	2300      	movs	r3, #0
 80035ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80035d2:	2300      	movs	r3, #0
 80035d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80035dc:	2301      	movs	r3, #1
 80035de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80035e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035e4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80035e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80035ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80035ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035f0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003600:	f107 0308 	add.w	r3, r7, #8
 8003604:	4619      	mov	r1, r3
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff ff08 	bl	800341c <ETH_SetDMAConfig>
}
 800360c:	bf00      	nop
 800360e:	3798      	adds	r7, #152	@ 0x98
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3305      	adds	r3, #5
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	3204      	adds	r2, #4
 800362c:	7812      	ldrb	r2, [r2, #0]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	4b11      	ldr	r3, [pc, #68]	@ (800367c <ETH_MACAddressConfig+0x68>)
 8003636:	4413      	add	r3, r2
 8003638:	461a      	mov	r2, r3
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3303      	adds	r3, #3
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	061a      	lsls	r2, r3, #24
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3302      	adds	r3, #2
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	041b      	lsls	r3, r3, #16
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3301      	adds	r3, #1
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	4313      	orrs	r3, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	7812      	ldrb	r2, [r2, #0]
 800365e:	4313      	orrs	r3, r2
 8003660:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <ETH_MACAddressConfig+0x6c>)
 8003666:	4413      	add	r3, r2
 8003668:	461a      	mov	r2, r3
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	6013      	str	r3, [r2, #0]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40028040 	.word	0x40028040
 8003680:	40028044 	.word	0x40028044

08003684 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	e03e      	b.n	8003710 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68d9      	ldr	r1, [r3, #12]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	440b      	add	r3, r1
 80036a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2200      	movs	r2, #0
 80036ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2200      	movs	r2, #0
 80036ba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	3206      	adds	r2, #6
 80036c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d80c      	bhi.n	80036f4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68d9      	ldr	r1, [r3, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	440b      	add	r3, r1
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	e004      	b.n	80036fe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	461a      	mov	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3301      	adds	r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d9bd      	bls.n	8003692 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003728:	611a      	str	r2, [r3, #16]
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003736:	b480      	push	{r7}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	e046      	b.n	80037d2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6919      	ldr	r1, [r3, #16]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	440b      	add	r3, r1
 8003754:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2200      	movs	r2, #0
 8003760:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2200      	movs	r2, #0
 800376c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2200      	movs	r2, #0
 8003772:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2200      	movs	r2, #0
 8003778:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003780:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8003788:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	3212      	adds	r2, #18
 800379e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d80c      	bhi.n	80037c2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6919      	ldr	r1, [r3, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	440b      	add	r3, r1
 80037ba:	461a      	mov	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	60da      	str	r2, [r3, #12]
 80037c0:	e004      	b.n	80037cc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	461a      	mov	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3301      	adds	r3, #1
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d9b5      	bls.n	8003744 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003802:	60da      	str	r2, [r3, #12]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003810:	b480      	push	{r7}
 8003812:	b089      	sub	sp, #36	@ 0x24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003826:	2300      	movs	r3, #0
 8003828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	e175      	b.n	8003b1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003830:	2201      	movs	r2, #1
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4013      	ands	r3, r2
 8003842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	429a      	cmp	r2, r3
 800384a:	f040 8164 	bne.w	8003b16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b01      	cmp	r3, #1
 8003858:	d005      	beq.n	8003866 <HAL_GPIO_Init+0x56>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d130      	bne.n	80038c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	2203      	movs	r2, #3
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800389c:	2201      	movs	r2, #1
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 0201 	and.w	r2, r3, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d017      	beq.n	8003904 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	2203      	movs	r2, #3
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d123      	bne.n	8003958 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	08da      	lsrs	r2, r3, #3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3208      	adds	r2, #8
 8003918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800391c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	220f      	movs	r2, #15
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	08da      	lsrs	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3208      	adds	r2, #8
 8003952:	69b9      	ldr	r1, [r7, #24]
 8003954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	2203      	movs	r2, #3
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 0203 	and.w	r2, r3, #3
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80be 	beq.w	8003b16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800399a:	4b66      	ldr	r3, [pc, #408]	@ (8003b34 <HAL_GPIO_Init+0x324>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399e:	4a65      	ldr	r2, [pc, #404]	@ (8003b34 <HAL_GPIO_Init+0x324>)
 80039a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80039a6:	4b63      	ldr	r3, [pc, #396]	@ (8003b34 <HAL_GPIO_Init+0x324>)
 80039a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80039b2:	4a61      	ldr	r2, [pc, #388]	@ (8003b38 <HAL_GPIO_Init+0x328>)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	089b      	lsrs	r3, r3, #2
 80039b8:	3302      	adds	r3, #2
 80039ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	220f      	movs	r2, #15
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4013      	ands	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a58      	ldr	r2, [pc, #352]	@ (8003b3c <HAL_GPIO_Init+0x32c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d037      	beq.n	8003a4e <HAL_GPIO_Init+0x23e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a57      	ldr	r2, [pc, #348]	@ (8003b40 <HAL_GPIO_Init+0x330>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d031      	beq.n	8003a4a <HAL_GPIO_Init+0x23a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a56      	ldr	r2, [pc, #344]	@ (8003b44 <HAL_GPIO_Init+0x334>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d02b      	beq.n	8003a46 <HAL_GPIO_Init+0x236>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a55      	ldr	r2, [pc, #340]	@ (8003b48 <HAL_GPIO_Init+0x338>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d025      	beq.n	8003a42 <HAL_GPIO_Init+0x232>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a54      	ldr	r2, [pc, #336]	@ (8003b4c <HAL_GPIO_Init+0x33c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01f      	beq.n	8003a3e <HAL_GPIO_Init+0x22e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a53      	ldr	r2, [pc, #332]	@ (8003b50 <HAL_GPIO_Init+0x340>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d019      	beq.n	8003a3a <HAL_GPIO_Init+0x22a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a52      	ldr	r2, [pc, #328]	@ (8003b54 <HAL_GPIO_Init+0x344>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <HAL_GPIO_Init+0x226>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a51      	ldr	r2, [pc, #324]	@ (8003b58 <HAL_GPIO_Init+0x348>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00d      	beq.n	8003a32 <HAL_GPIO_Init+0x222>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a50      	ldr	r2, [pc, #320]	@ (8003b5c <HAL_GPIO_Init+0x34c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d007      	beq.n	8003a2e <HAL_GPIO_Init+0x21e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4f      	ldr	r2, [pc, #316]	@ (8003b60 <HAL_GPIO_Init+0x350>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d101      	bne.n	8003a2a <HAL_GPIO_Init+0x21a>
 8003a26:	2309      	movs	r3, #9
 8003a28:	e012      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a2a:	230a      	movs	r3, #10
 8003a2c:	e010      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a2e:	2308      	movs	r3, #8
 8003a30:	e00e      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a32:	2307      	movs	r3, #7
 8003a34:	e00c      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a36:	2306      	movs	r3, #6
 8003a38:	e00a      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a3a:	2305      	movs	r3, #5
 8003a3c:	e008      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a3e:	2304      	movs	r3, #4
 8003a40:	e006      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a42:	2303      	movs	r3, #3
 8003a44:	e004      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e002      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	69fa      	ldr	r2, [r7, #28]
 8003a52:	f002 0203 	and.w	r2, r2, #3
 8003a56:	0092      	lsls	r2, r2, #2
 8003a58:	4093      	lsls	r3, r2
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a60:	4935      	ldr	r1, [pc, #212]	@ (8003b38 <HAL_GPIO_Init+0x328>)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	3302      	adds	r3, #2
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b64 <HAL_GPIO_Init+0x354>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a92:	4a34      	ldr	r2, [pc, #208]	@ (8003b64 <HAL_GPIO_Init+0x354>)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a98:	4b32      	ldr	r3, [pc, #200]	@ (8003b64 <HAL_GPIO_Init+0x354>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003abc:	4a29      	ldr	r2, [pc, #164]	@ (8003b64 <HAL_GPIO_Init+0x354>)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ac2:	4b28      	ldr	r3, [pc, #160]	@ (8003b64 <HAL_GPIO_Init+0x354>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b64 <HAL_GPIO_Init+0x354>)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aec:	4b1d      	ldr	r3, [pc, #116]	@ (8003b64 <HAL_GPIO_Init+0x354>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4013      	ands	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b10:	4a14      	ldr	r2, [pc, #80]	@ (8003b64 <HAL_GPIO_Init+0x354>)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	2b0f      	cmp	r3, #15
 8003b20:	f67f ae86 	bls.w	8003830 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	3724      	adds	r7, #36	@ 0x24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40013800 	.word	0x40013800
 8003b3c:	40020000 	.word	0x40020000
 8003b40:	40020400 	.word	0x40020400
 8003b44:	40020800 	.word	0x40020800
 8003b48:	40020c00 	.word	0x40020c00
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40021400 	.word	0x40021400
 8003b54:	40021800 	.word	0x40021800
 8003b58:	40021c00 	.word	0x40021c00
 8003b5c:	40022000 	.word	0x40022000
 8003b60:	40022400 	.word	0x40022400
 8003b64:	40013c00 	.word	0x40013c00

08003b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	887b      	ldrh	r3, [r7, #2]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
 8003b84:	e001      	b.n	8003b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba8:	787b      	ldrb	r3, [r7, #1]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bae:	887a      	ldrh	r2, [r7, #2]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003bb4:	e003      	b.n	8003bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003bb6:	887b      	ldrh	r3, [r7, #2]
 8003bb8:	041a      	lsls	r2, r3, #16
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	619a      	str	r2, [r3, #24]
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bdc:	887a      	ldrh	r2, [r7, #2]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4013      	ands	r3, r2
 8003be2:	041a      	lsls	r2, r3, #16
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	43d9      	mvns	r1, r3
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	400b      	ands	r3, r1
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	619a      	str	r2, [r3, #24]
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c0a:	4b08      	ldr	r3, [pc, #32]	@ (8003c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d006      	beq.n	8003c24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c16:	4a05      	ldr	r2, [pc, #20]	@ (8003c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fd feea 	bl	80019f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40013c00 	.word	0x40013c00

08003c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e07f      	b.n	8003d42 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fc fec2 	bl	80009e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2224      	movs	r2, #36	@ 0x24
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d107      	bne.n	8003caa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	e006      	b.n	8003cb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003cb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d104      	bne.n	8003cca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6859      	ldr	r1, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d4c <HAL_I2C_Init+0x11c>)
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ce8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69d9      	ldr	r1, [r3, #28]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1a      	ldr	r2, [r3, #32]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	02008000 	.word	0x02008000

08003d50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	4608      	mov	r0, r1
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4603      	mov	r3, r0
 8003d60:	817b      	strh	r3, [r7, #10]
 8003d62:	460b      	mov	r3, r1
 8003d64:	813b      	strh	r3, [r7, #8]
 8003d66:	4613      	mov	r3, r2
 8003d68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	f040 80f9 	bne.w	8003f6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_I2C_Mem_Write+0x34>
 8003d7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d105      	bne.n	8003d90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d8a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0ed      	b.n	8003f6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_I2C_Mem_Write+0x4e>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e0e6      	b.n	8003f6c <HAL_I2C_Mem_Write+0x21c>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003da6:	f7ff f8cb 	bl	8002f40 <HAL_GetTick>
 8003daa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	2319      	movs	r3, #25
 8003db2:	2201      	movs	r2, #1
 8003db4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 f955 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0d1      	b.n	8003f6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2221      	movs	r2, #33	@ 0x21
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2240      	movs	r2, #64	@ 0x40
 8003dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a3a      	ldr	r2, [r7, #32]
 8003de2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003de8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003df0:	88f8      	ldrh	r0, [r7, #6]
 8003df2:	893a      	ldrh	r2, [r7, #8]
 8003df4:	8979      	ldrh	r1, [r7, #10]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	4603      	mov	r3, r0
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 f8b9 	bl	8003f78 <I2C_RequestMemoryWrite>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0a9      	b.n	8003f6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2bff      	cmp	r3, #255	@ 0xff
 8003e20:	d90e      	bls.n	8003e40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	22ff      	movs	r2, #255	@ 0xff
 8003e26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	8979      	ldrh	r1, [r7, #10]
 8003e30:	2300      	movs	r3, #0
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fab1 	bl	80043a0 <I2C_TransferConfig>
 8003e3e:	e00f      	b.n	8003e60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	8979      	ldrh	r1, [r7, #10]
 8003e52:	2300      	movs	r3, #0
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 faa0 	bl	80043a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f93f 	bl	80040e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e07b      	b.n	8003f6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	781a      	ldrb	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d034      	beq.n	8003f18 <HAL_I2C_Mem_Write+0x1c8>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d130      	bne.n	8003f18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2180      	movs	r1, #128	@ 0x80
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f8d1 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e04d      	b.n	8003f6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2bff      	cmp	r3, #255	@ 0xff
 8003ed8:	d90e      	bls.n	8003ef8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	22ff      	movs	r2, #255	@ 0xff
 8003ede:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	8979      	ldrh	r1, [r7, #10]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fa55 	bl	80043a0 <I2C_TransferConfig>
 8003ef6:	e00f      	b.n	8003f18 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	8979      	ldrh	r1, [r7, #10]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fa44 	bl	80043a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d19e      	bne.n	8003e60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f91e 	bl	8004168 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e01a      	b.n	8003f6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6859      	ldr	r1, [r3, #4]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4b0a      	ldr	r3, [pc, #40]	@ (8003f74 <HAL_I2C_Mem_Write+0x224>)
 8003f4a:	400b      	ands	r3, r1
 8003f4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	e000      	b.n	8003f6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f6a:	2302      	movs	r3, #2
  }
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	fe00e800 	.word	0xfe00e800

08003f78 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	4608      	mov	r0, r1
 8003f82:	4611      	mov	r1, r2
 8003f84:	461a      	mov	r2, r3
 8003f86:	4603      	mov	r3, r0
 8003f88:	817b      	strh	r3, [r7, #10]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	813b      	strh	r3, [r7, #8]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	8979      	ldrh	r1, [r7, #10]
 8003f98:	4b20      	ldr	r3, [pc, #128]	@ (800401c <I2C_RequestMemoryWrite+0xa4>)
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f9fd 	bl	80043a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa6:	69fa      	ldr	r2, [r7, #28]
 8003fa8:	69b9      	ldr	r1, [r7, #24]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f89c 	bl	80040e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e02c      	b.n	8004014 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d105      	bne.n	8003fcc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc0:	893b      	ldrh	r3, [r7, #8]
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fca:	e015      	b.n	8003ff8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fcc:	893b      	ldrh	r3, [r7, #8]
 8003fce:	0a1b      	lsrs	r3, r3, #8
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	69b9      	ldr	r1, [r7, #24]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f882 	bl	80040e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e012      	b.n	8004014 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fee:	893b      	ldrh	r3, [r7, #8]
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	2200      	movs	r2, #0
 8004000:	2180      	movs	r1, #128	@ 0x80
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f830 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	80002000 	.word	0x80002000

08004020 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b02      	cmp	r3, #2
 8004034:	d103      	bne.n	800403e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b01      	cmp	r3, #1
 800404a:	d007      	beq.n	800405c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	619a      	str	r2, [r3, #24]
  }
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	4613      	mov	r3, r2
 8004076:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004078:	e022      	b.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004080:	d01e      	beq.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004082:	f7fe ff5d 	bl	8002f40 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d302      	bcc.n	8004098 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d113      	bne.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e00f      	b.n	80040e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	4013      	ands	r3, r2
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	bf0c      	ite	eq
 80040d0:	2301      	moveq	r3, #1
 80040d2:	2300      	movne	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d0cd      	beq.n	800407a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040f4:	e02c      	b.n	8004150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f870 	bl	80041e0 <I2C_IsErrorOccurred>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e02a      	b.n	8004160 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004110:	d01e      	beq.n	8004150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004112:	f7fe ff15 	bl	8002f40 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	429a      	cmp	r2, r3
 8004120:	d302      	bcc.n	8004128 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d113      	bne.n	8004150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412c:	f043 0220 	orr.w	r2, r3, #32
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e007      	b.n	8004160 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b02      	cmp	r3, #2
 800415c:	d1cb      	bne.n	80040f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004174:	e028      	b.n	80041c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f830 	bl	80041e0 <I2C_IsErrorOccurred>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e026      	b.n	80041d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418a:	f7fe fed9 	bl	8002f40 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	429a      	cmp	r2, r3
 8004198:	d302      	bcc.n	80041a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d113      	bne.n	80041c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a4:	f043 0220 	orr.w	r2, r3, #32
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e007      	b.n	80041d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d1cf      	bne.n	8004176 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	@ 0x28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b00      	cmp	r3, #0
 800420a:	d068      	beq.n	80042de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2210      	movs	r2, #16
 8004212:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004214:	e049      	b.n	80042aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800421c:	d045      	beq.n	80042aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800421e:	f7fe fe8f 	bl	8002f40 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	429a      	cmp	r2, r3
 800422c:	d302      	bcc.n	8004234 <I2C_IsErrorOccurred+0x54>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d13a      	bne.n	80042aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800423e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004246:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004256:	d121      	bne.n	800429c <I2C_IsErrorOccurred+0xbc>
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800425e:	d01d      	beq.n	800429c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	2b20      	cmp	r3, #32
 8004264:	d01a      	beq.n	800429c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004274:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004276:	f7fe fe63 	bl	8002f40 <HAL_GetTick>
 800427a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800427c:	e00e      	b.n	800429c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800427e:	f7fe fe5f 	bl	8002f40 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b19      	cmp	r3, #25
 800428a:	d907      	bls.n	800429c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	f043 0320 	orr.w	r3, r3, #32
 8004292:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800429a:	e006      	b.n	80042aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	d1e9      	bne.n	800427e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d003      	beq.n	80042c0 <I2C_IsErrorOccurred+0xe0>
 80042b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0aa      	beq.n	8004216 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80042c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d103      	bne.n	80042d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2220      	movs	r2, #32
 80042ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	f043 0304 	orr.w	r3, r3, #4
 80042d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00b      	beq.n	8004308 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004300:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00b      	beq.n	800432a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	f043 0308 	orr.w	r3, r3, #8
 8004318:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004322:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00b      	beq.n	800434c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	f043 0302 	orr.w	r3, r3, #2
 800433a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004344:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800434c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01c      	beq.n	800438e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7ff fe63 	bl	8004020 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6859      	ldr	r1, [r3, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b0d      	ldr	r3, [pc, #52]	@ (800439c <I2C_IsErrorOccurred+0x1bc>)
 8004366:	400b      	ands	r3, r1
 8004368:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	431a      	orrs	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800438e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004392:	4618      	mov	r0, r3
 8004394:	3728      	adds	r7, #40	@ 0x28
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	fe00e800 	.word	0xfe00e800

080043a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	460b      	mov	r3, r1
 80043ac:	817b      	strh	r3, [r7, #10]
 80043ae:	4613      	mov	r3, r2
 80043b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043b2:	897b      	ldrh	r3, [r7, #10]
 80043b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043b8:	7a7b      	ldrb	r3, [r7, #9]
 80043ba:	041b      	lsls	r3, r3, #16
 80043bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	0d5b      	lsrs	r3, r3, #21
 80043da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80043de:	4b08      	ldr	r3, [pc, #32]	@ (8004400 <I2C_TransferConfig+0x60>)
 80043e0:	430b      	orrs	r3, r1
 80043e2:	43db      	mvns	r3, r3
 80043e4:	ea02 0103 	and.w	r1, r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	03ff63ff 	.word	0x03ff63ff

08004404 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b20      	cmp	r3, #32
 8004418:	d138      	bne.n	800448c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004424:	2302      	movs	r3, #2
 8004426:	e032      	b.n	800448e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2224      	movs	r2, #36	@ 0x24
 8004434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0201 	bic.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004456:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6819      	ldr	r1, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	e000      	b.n	800448e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800448c:	2302      	movs	r3, #2
  }
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d139      	bne.n	8004524 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e033      	b.n	8004526 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2224      	movs	r2, #36	@ 0x24
 80044ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80044ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004532:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004534:	b08f      	sub	sp, #60	@ 0x3c
 8004536:	af0a      	add	r7, sp, #40	@ 0x28
 8004538:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e116      	b.n	8004772 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fc fe22 	bl	80011a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2203      	movs	r2, #3
 8004568:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d102      	bne.n	800457e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f002 ff64 	bl	8007450 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	603b      	str	r3, [r7, #0]
 800458e:	687e      	ldr	r6, [r7, #4]
 8004590:	466d      	mov	r5, sp
 8004592:	f106 0410 	add.w	r4, r6, #16
 8004596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800459a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800459c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800459e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80045a6:	1d33      	adds	r3, r6, #4
 80045a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045aa:	6838      	ldr	r0, [r7, #0]
 80045ac:	f002 fef8 	bl	80073a0 <USB_CoreInit>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2202      	movs	r2, #2
 80045ba:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e0d7      	b.n	8004772 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2100      	movs	r1, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f002 ff52 	bl	8007472 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
 80045d2:	e04a      	b.n	800466a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045d4:	7bfa      	ldrb	r2, [r7, #15]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	333d      	adds	r3, #61	@ 0x3d
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045e8:	7bfa      	ldrb	r2, [r7, #15]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	333c      	adds	r3, #60	@ 0x3c
 80045f8:	7bfa      	ldrb	r2, [r7, #15]
 80045fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045fc:	7bfa      	ldrb	r2, [r7, #15]
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	b298      	uxth	r0, r3
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	3344      	adds	r3, #68	@ 0x44
 8004610:	4602      	mov	r2, r0
 8004612:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	3340      	adds	r3, #64	@ 0x40
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004628:	7bfa      	ldrb	r2, [r7, #15]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	3348      	adds	r3, #72	@ 0x48
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800463c:	7bfa      	ldrb	r2, [r7, #15]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	334c      	adds	r3, #76	@ 0x4c
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004650:	7bfa      	ldrb	r2, [r7, #15]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	3354      	adds	r3, #84	@ 0x54
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	3301      	adds	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
 800466a:	7bfa      	ldrb	r2, [r7, #15]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	d3af      	bcc.n	80045d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004674:	2300      	movs	r3, #0
 8004676:	73fb      	strb	r3, [r7, #15]
 8004678:	e044      	b.n	8004704 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800467a:	7bfa      	ldrb	r2, [r7, #15]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80046a2:	7bfa      	ldrb	r2, [r7, #15]
 80046a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046a6:	7bfa      	ldrb	r2, [r7, #15]
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046bc:	7bfa      	ldrb	r2, [r7, #15]
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046d2:	7bfa      	ldrb	r2, [r7, #15]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046e8:	7bfa      	ldrb	r2, [r7, #15]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	3301      	adds	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
 8004704:	7bfa      	ldrb	r2, [r7, #15]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	429a      	cmp	r2, r3
 800470c:	d3b5      	bcc.n	800467a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	687e      	ldr	r6, [r7, #4]
 8004716:	466d      	mov	r5, sp
 8004718:	f106 0410 	add.w	r4, r6, #16
 800471c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800471e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004724:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004728:	e885 0003 	stmia.w	r5, {r0, r1}
 800472c:	1d33      	adds	r3, r6, #4
 800472e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004730:	6838      	ldr	r0, [r7, #0]
 8004732:	f002 feeb 	bl	800750c <USB_DevInit>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e014      	b.n	8004772 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475c:	2b01      	cmp	r3, #1
 800475e:	d102      	bne.n	8004766 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f80b 	bl	800477c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f003 f8a9 	bl	80078c2 <USB_DevDisconnect>

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800477c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047aa:	4b05      	ldr	r3, [pc, #20]	@ (80047c0 <HAL_PCDEx_ActivateLPM+0x44>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	10000003 	.word	0x10000003

080047c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047c8:	4b05      	ldr	r3, [pc, #20]	@ (80047e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a04      	ldr	r2, [pc, #16]	@ (80047e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047d2:	6013      	str	r3, [r2, #0]
}
 80047d4:	bf00      	nop
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40007000 	.word	0x40007000

080047e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80047ec:	2300      	movs	r3, #0
 80047ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e291      	b.n	8004d1e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 8087 	beq.w	8004916 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004808:	4b96      	ldr	r3, [pc, #600]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 030c 	and.w	r3, r3, #12
 8004810:	2b04      	cmp	r3, #4
 8004812:	d00c      	beq.n	800482e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004814:	4b93      	ldr	r3, [pc, #588]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 030c 	and.w	r3, r3, #12
 800481c:	2b08      	cmp	r3, #8
 800481e:	d112      	bne.n	8004846 <HAL_RCC_OscConfig+0x62>
 8004820:	4b90      	ldr	r3, [pc, #576]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004828:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800482c:	d10b      	bne.n	8004846 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800482e:	4b8d      	ldr	r3, [pc, #564]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d06c      	beq.n	8004914 <HAL_RCC_OscConfig+0x130>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d168      	bne.n	8004914 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e26b      	b.n	8004d1e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800484e:	d106      	bne.n	800485e <HAL_RCC_OscConfig+0x7a>
 8004850:	4b84      	ldr	r3, [pc, #528]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a83      	ldr	r2, [pc, #524]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	e02e      	b.n	80048bc <HAL_RCC_OscConfig+0xd8>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10c      	bne.n	8004880 <HAL_RCC_OscConfig+0x9c>
 8004866:	4b7f      	ldr	r3, [pc, #508]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a7e      	ldr	r2, [pc, #504]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 800486c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	4b7c      	ldr	r3, [pc, #496]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a7b      	ldr	r2, [pc, #492]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004878:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e01d      	b.n	80048bc <HAL_RCC_OscConfig+0xd8>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004888:	d10c      	bne.n	80048a4 <HAL_RCC_OscConfig+0xc0>
 800488a:	4b76      	ldr	r3, [pc, #472]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a75      	ldr	r2, [pc, #468]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	4b73      	ldr	r3, [pc, #460]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a72      	ldr	r2, [pc, #456]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e00b      	b.n	80048bc <HAL_RCC_OscConfig+0xd8>
 80048a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 80048aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 80048b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d013      	beq.n	80048ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fe fb3c 	bl	8002f40 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048cc:	f7fe fb38 	bl	8002f40 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b64      	cmp	r3, #100	@ 0x64
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e21f      	b.n	8004d1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048de:	4b61      	ldr	r3, [pc, #388]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0xe8>
 80048ea:	e014      	b.n	8004916 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ec:	f7fe fb28 	bl	8002f40 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048f4:	f7fe fb24 	bl	8002f40 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b64      	cmp	r3, #100	@ 0x64
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e20b      	b.n	8004d1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004906:	4b57      	ldr	r3, [pc, #348]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0x110>
 8004912:	e000      	b.n	8004916 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d069      	beq.n	80049f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004922:	4b50      	ldr	r3, [pc, #320]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800492e:	4b4d      	ldr	r3, [pc, #308]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b08      	cmp	r3, #8
 8004938:	d11c      	bne.n	8004974 <HAL_RCC_OscConfig+0x190>
 800493a:	4b4a      	ldr	r3, [pc, #296]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d116      	bne.n	8004974 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004946:	4b47      	ldr	r3, [pc, #284]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <HAL_RCC_OscConfig+0x17a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d001      	beq.n	800495e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e1df      	b.n	8004d1e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495e:	4b41      	ldr	r3, [pc, #260]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	493d      	ldr	r1, [pc, #244]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 800496e:	4313      	orrs	r3, r2
 8004970:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004972:	e040      	b.n	80049f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d023      	beq.n	80049c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800497c:	4b39      	ldr	r3, [pc, #228]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a38      	ldr	r2, [pc, #224]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004988:	f7fe fada 	bl	8002f40 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004990:	f7fe fad6 	bl	8002f40 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e1bd      	b.n	8004d1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a2:	4b30      	ldr	r3, [pc, #192]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4929      	ldr	r1, [pc, #164]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	600b      	str	r3, [r1, #0]
 80049c2:	e018      	b.n	80049f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049c4:	4b27      	ldr	r3, [pc, #156]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a26      	ldr	r2, [pc, #152]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d0:	f7fe fab6 	bl	8002f40 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049d8:	f7fe fab2 	bl	8002f40 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e199      	b.n	8004d1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f0      	bne.n	80049d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d038      	beq.n	8004a74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d019      	beq.n	8004a3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a0a:	4b16      	ldr	r3, [pc, #88]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a0e:	4a15      	ldr	r2, [pc, #84]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a16:	f7fe fa93 	bl	8002f40 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1e:	f7fe fa8f 	bl	8002f40 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e176      	b.n	8004d1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a30:	4b0c      	ldr	r3, [pc, #48]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCC_OscConfig+0x23a>
 8004a3c:	e01a      	b.n	8004a74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a3e:	4b09      	ldr	r3, [pc, #36]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a42:	4a08      	ldr	r2, [pc, #32]	@ (8004a64 <HAL_RCC_OscConfig+0x280>)
 8004a44:	f023 0301 	bic.w	r3, r3, #1
 8004a48:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4a:	f7fe fa79 	bl	8002f40 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a50:	e00a      	b.n	8004a68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a52:	f7fe fa75 	bl	8002f40 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d903      	bls.n	8004a68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e15c      	b.n	8004d1e <HAL_RCC_OscConfig+0x53a>
 8004a64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a68:	4b91      	ldr	r3, [pc, #580]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1ee      	bne.n	8004a52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80a4 	beq.w	8004bca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a82:	4b8b      	ldr	r3, [pc, #556]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10d      	bne.n	8004aaa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a8e:	4b88      	ldr	r3, [pc, #544]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a92:	4a87      	ldr	r2, [pc, #540]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a9a:	4b85      	ldr	r3, [pc, #532]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aa2:	60bb      	str	r3, [r7, #8]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aaa:	4b82      	ldr	r3, [pc, #520]	@ (8004cb4 <HAL_RCC_OscConfig+0x4d0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d118      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8004cb4 <HAL_RCC_OscConfig+0x4d0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a7e      	ldr	r2, [pc, #504]	@ (8004cb4 <HAL_RCC_OscConfig+0x4d0>)
 8004abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ac2:	f7fe fa3d 	bl	8002f40 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aca:	f7fe fa39 	bl	8002f40 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b64      	cmp	r3, #100	@ 0x64
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e120      	b.n	8004d1e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004adc:	4b75      	ldr	r3, [pc, #468]	@ (8004cb4 <HAL_RCC_OscConfig+0x4d0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d106      	bne.n	8004afe <HAL_RCC_OscConfig+0x31a>
 8004af0:	4b6f      	ldr	r3, [pc, #444]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af4:	4a6e      	ldr	r2, [pc, #440]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004afc:	e02d      	b.n	8004b5a <HAL_RCC_OscConfig+0x376>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10c      	bne.n	8004b20 <HAL_RCC_OscConfig+0x33c>
 8004b06:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0a:	4a69      	ldr	r2, [pc, #420]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b12:	4b67      	ldr	r3, [pc, #412]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b16:	4a66      	ldr	r2, [pc, #408]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b18:	f023 0304 	bic.w	r3, r3, #4
 8004b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b1e:	e01c      	b.n	8004b5a <HAL_RCC_OscConfig+0x376>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	d10c      	bne.n	8004b42 <HAL_RCC_OscConfig+0x35e>
 8004b28:	4b61      	ldr	r3, [pc, #388]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2c:	4a60      	ldr	r2, [pc, #384]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b2e:	f043 0304 	orr.w	r3, r3, #4
 8004b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b34:	4b5e      	ldr	r3, [pc, #376]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b38:	4a5d      	ldr	r2, [pc, #372]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b40:	e00b      	b.n	8004b5a <HAL_RCC_OscConfig+0x376>
 8004b42:	4b5b      	ldr	r3, [pc, #364]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b46:	4a5a      	ldr	r2, [pc, #360]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b48:	f023 0301 	bic.w	r3, r3, #1
 8004b4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b4e:	4b58      	ldr	r3, [pc, #352]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b52:	4a57      	ldr	r2, [pc, #348]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b54:	f023 0304 	bic.w	r3, r3, #4
 8004b58:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d015      	beq.n	8004b8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b62:	f7fe f9ed 	bl	8002f40 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b68:	e00a      	b.n	8004b80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b6a:	f7fe f9e9 	bl	8002f40 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e0ce      	b.n	8004d1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b80:	4b4b      	ldr	r3, [pc, #300]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0ee      	beq.n	8004b6a <HAL_RCC_OscConfig+0x386>
 8004b8c:	e014      	b.n	8004bb8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8e:	f7fe f9d7 	bl	8002f40 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b94:	e00a      	b.n	8004bac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b96:	f7fe f9d3 	bl	8002f40 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e0b8      	b.n	8004d1e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bac:	4b40      	ldr	r3, [pc, #256]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1ee      	bne.n	8004b96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d105      	bne.n	8004bca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bbe:	4b3c      	ldr	r3, [pc, #240]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc2:	4a3b      	ldr	r2, [pc, #236]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004bc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bc8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80a4 	beq.w	8004d1c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bd4:	4b36      	ldr	r3, [pc, #216]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 030c 	and.w	r3, r3, #12
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d06b      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d149      	bne.n	8004c7c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be8:	4b31      	ldr	r3, [pc, #196]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a30      	ldr	r2, [pc, #192]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004bee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fe f9a4 	bl	8002f40 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fe f9a0 	bl	8002f40 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e087      	b.n	8004d1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0e:	4b28      	ldr	r3, [pc, #160]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69da      	ldr	r2, [r3, #28]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c28:	019b      	lsls	r3, r3, #6
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c30:	085b      	lsrs	r3, r3, #1
 8004c32:	3b01      	subs	r3, #1
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3c:	061b      	lsls	r3, r3, #24
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004c42:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c46:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c48:	4b19      	ldr	r3, [pc, #100]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a18      	ldr	r2, [pc, #96]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004c4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fe f974 	bl	8002f40 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5c:	f7fe f970 	bl	8002f40 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e057      	b.n	8004d1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c6e:	4b10      	ldr	r3, [pc, #64]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f0      	beq.n	8004c5c <HAL_RCC_OscConfig+0x478>
 8004c7a:	e04f      	b.n	8004d1c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a0b      	ldr	r2, [pc, #44]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004c82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fe f95a 	bl	8002f40 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c90:	f7fe f956 	bl	8002f40 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e03d      	b.n	8004d1e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca2:	4b03      	ldr	r3, [pc, #12]	@ (8004cb0 <HAL_RCC_OscConfig+0x4cc>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x4ac>
 8004cae:	e035      	b.n	8004d1c <HAL_RCC_OscConfig+0x538>
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d28 <HAL_RCC_OscConfig+0x544>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d028      	beq.n	8004d18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d121      	bne.n	8004d18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d11a      	bne.n	8004d18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ce8:	4013      	ands	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d111      	bne.n	8004d18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	3b01      	subs	r3, #1
 8004d02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800

08004d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0d0      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d44:	4b6a      	ldr	r3, [pc, #424]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d910      	bls.n	8004d74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d52:	4b67      	ldr	r3, [pc, #412]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f023 020f 	bic.w	r2, r3, #15
 8004d5a:	4965      	ldr	r1, [pc, #404]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d62:	4b63      	ldr	r3, [pc, #396]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0b8      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d020      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d8c:	4b59      	ldr	r3, [pc, #356]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	4a58      	ldr	r2, [pc, #352]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0308 	and.w	r3, r3, #8
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004da4:	4b53      	ldr	r3, [pc, #332]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	4a52      	ldr	r2, [pc, #328]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004daa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004dae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db0:	4b50      	ldr	r3, [pc, #320]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	494d      	ldr	r1, [pc, #308]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d040      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d107      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd6:	4b47      	ldr	r3, [pc, #284]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d115      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e07f      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d107      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dee:	4b41      	ldr	r3, [pc, #260]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e073      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfe:	4b3d      	ldr	r3, [pc, #244]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e06b      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e0e:	4b39      	ldr	r3, [pc, #228]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f023 0203 	bic.w	r2, r3, #3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	4936      	ldr	r1, [pc, #216]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e20:	f7fe f88e 	bl	8002f40 <HAL_GetTick>
 8004e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e26:	e00a      	b.n	8004e3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e28:	f7fe f88a 	bl	8002f40 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e053      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 020c 	and.w	r2, r3, #12
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d1eb      	bne.n	8004e28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e50:	4b27      	ldr	r3, [pc, #156]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 030f 	and.w	r3, r3, #15
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d210      	bcs.n	8004e80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5e:	4b24      	ldr	r3, [pc, #144]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f023 020f 	bic.w	r2, r3, #15
 8004e66:	4922      	ldr	r1, [pc, #136]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e6e:	4b20      	ldr	r3, [pc, #128]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d001      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e032      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e8c:	4b19      	ldr	r3, [pc, #100]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	4916      	ldr	r1, [pc, #88]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004eaa:	4b12      	ldr	r3, [pc, #72]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	490e      	ldr	r1, [pc, #56]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ebe:	f000 f821 	bl	8004f04 <HAL_RCC_GetSysClockFreq>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	091b      	lsrs	r3, r3, #4
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	490a      	ldr	r1, [pc, #40]	@ (8004ef8 <HAL_RCC_ClockConfig+0x1cc>)
 8004ed0:	5ccb      	ldrb	r3, [r1, r3]
 8004ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed6:	4a09      	ldr	r2, [pc, #36]	@ (8004efc <HAL_RCC_ClockConfig+0x1d0>)
 8004ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004eda:	4b09      	ldr	r3, [pc, #36]	@ (8004f00 <HAL_RCC_ClockConfig+0x1d4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fd ffea 	bl	8002eb8 <HAL_InitTick>

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40023c00 	.word	0x40023c00
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	08009200 	.word	0x08009200
 8004efc:	20000000 	.word	0x20000000
 8004f00:	2000001c 	.word	0x2000001c

08004f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f08:	b094      	sub	sp, #80	@ 0x50
 8004f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f10:	2300      	movs	r3, #0
 8004f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f14:	2300      	movs	r3, #0
 8004f16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f1c:	4b79      	ldr	r3, [pc, #484]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f003 030c 	and.w	r3, r3, #12
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d00d      	beq.n	8004f44 <HAL_RCC_GetSysClockFreq+0x40>
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	f200 80e1 	bhi.w	80050f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <HAL_RCC_GetSysClockFreq+0x34>
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d003      	beq.n	8004f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f36:	e0db      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f38:	4b73      	ldr	r3, [pc, #460]	@ (8005108 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f3c:	e0db      	b.n	80050f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f3e:	4b73      	ldr	r3, [pc, #460]	@ (800510c <HAL_RCC_GetSysClockFreq+0x208>)
 8004f40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f42:	e0d8      	b.n	80050f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f44:	4b6f      	ldr	r3, [pc, #444]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f4c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d063      	beq.n	8005022 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f5a:	4b6a      	ldr	r3, [pc, #424]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	099b      	lsrs	r3, r3, #6
 8004f60:	2200      	movs	r2, #0
 8004f62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f6e:	2300      	movs	r3, #0
 8004f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f76:	4622      	mov	r2, r4
 8004f78:	462b      	mov	r3, r5
 8004f7a:	f04f 0000 	mov.w	r0, #0
 8004f7e:	f04f 0100 	mov.w	r1, #0
 8004f82:	0159      	lsls	r1, r3, #5
 8004f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f88:	0150      	lsls	r0, r2, #5
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4621      	mov	r1, r4
 8004f90:	1a51      	subs	r1, r2, r1
 8004f92:	6139      	str	r1, [r7, #16]
 8004f94:	4629      	mov	r1, r5
 8004f96:	eb63 0301 	sbc.w	r3, r3, r1
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fa8:	4659      	mov	r1, fp
 8004faa:	018b      	lsls	r3, r1, #6
 8004fac:	4651      	mov	r1, sl
 8004fae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fb2:	4651      	mov	r1, sl
 8004fb4:	018a      	lsls	r2, r1, #6
 8004fb6:	4651      	mov	r1, sl
 8004fb8:	ebb2 0801 	subs.w	r8, r2, r1
 8004fbc:	4659      	mov	r1, fp
 8004fbe:	eb63 0901 	sbc.w	r9, r3, r1
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fd6:	4690      	mov	r8, r2
 8004fd8:	4699      	mov	r9, r3
 8004fda:	4623      	mov	r3, r4
 8004fdc:	eb18 0303 	adds.w	r3, r8, r3
 8004fe0:	60bb      	str	r3, [r7, #8]
 8004fe2:	462b      	mov	r3, r5
 8004fe4:	eb49 0303 	adc.w	r3, r9, r3
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	024b      	lsls	r3, r1, #9
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005000:	4621      	mov	r1, r4
 8005002:	024a      	lsls	r2, r1, #9
 8005004:	4610      	mov	r0, r2
 8005006:	4619      	mov	r1, r3
 8005008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800500a:	2200      	movs	r2, #0
 800500c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800500e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005014:	f7fb f95c 	bl	80002d0 <__aeabi_uldivmod>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4613      	mov	r3, r2
 800501e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005020:	e058      	b.n	80050d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005022:	4b38      	ldr	r3, [pc, #224]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x200>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	099b      	lsrs	r3, r3, #6
 8005028:	2200      	movs	r2, #0
 800502a:	4618      	mov	r0, r3
 800502c:	4611      	mov	r1, r2
 800502e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005032:	623b      	str	r3, [r7, #32]
 8005034:	2300      	movs	r3, #0
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24
 8005038:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800503c:	4642      	mov	r2, r8
 800503e:	464b      	mov	r3, r9
 8005040:	f04f 0000 	mov.w	r0, #0
 8005044:	f04f 0100 	mov.w	r1, #0
 8005048:	0159      	lsls	r1, r3, #5
 800504a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800504e:	0150      	lsls	r0, r2, #5
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4641      	mov	r1, r8
 8005056:	ebb2 0a01 	subs.w	sl, r2, r1
 800505a:	4649      	mov	r1, r9
 800505c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800506c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005070:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005074:	ebb2 040a 	subs.w	r4, r2, sl
 8005078:	eb63 050b 	sbc.w	r5, r3, fp
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	00eb      	lsls	r3, r5, #3
 8005086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800508a:	00e2      	lsls	r2, r4, #3
 800508c:	4614      	mov	r4, r2
 800508e:	461d      	mov	r5, r3
 8005090:	4643      	mov	r3, r8
 8005092:	18e3      	adds	r3, r4, r3
 8005094:	603b      	str	r3, [r7, #0]
 8005096:	464b      	mov	r3, r9
 8005098:	eb45 0303 	adc.w	r3, r5, r3
 800509c:	607b      	str	r3, [r7, #4]
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050aa:	4629      	mov	r1, r5
 80050ac:	028b      	lsls	r3, r1, #10
 80050ae:	4621      	mov	r1, r4
 80050b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050b4:	4621      	mov	r1, r4
 80050b6:	028a      	lsls	r2, r1, #10
 80050b8:	4610      	mov	r0, r2
 80050ba:	4619      	mov	r1, r3
 80050bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050be:	2200      	movs	r2, #0
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	61fa      	str	r2, [r7, #28]
 80050c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050c8:	f7fb f902 	bl	80002d0 <__aeabi_uldivmod>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4613      	mov	r3, r2
 80050d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80050d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x200>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	0c1b      	lsrs	r3, r3, #16
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	3301      	adds	r3, #1
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80050e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050ee:	e002      	b.n	80050f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050f0:	4b05      	ldr	r3, [pc, #20]	@ (8005108 <HAL_RCC_GetSysClockFreq+0x204>)
 80050f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3750      	adds	r7, #80	@ 0x50
 80050fc:	46bd      	mov	sp, r7
 80050fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005102:	bf00      	nop
 8005104:	40023800 	.word	0x40023800
 8005108:	00f42400 	.word	0x00f42400
 800510c:	007a1200 	.word	0x007a1200

08005110 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005114:	4b03      	ldr	r3, [pc, #12]	@ (8005124 <HAL_RCC_GetHCLKFreq+0x14>)
 8005116:	681b      	ldr	r3, [r3, #0]
}
 8005118:	4618      	mov	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000000 	.word	0x20000000

08005128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800512c:	f7ff fff0 	bl	8005110 <HAL_RCC_GetHCLKFreq>
 8005130:	4602      	mov	r2, r0
 8005132:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	0a9b      	lsrs	r3, r3, #10
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	4903      	ldr	r1, [pc, #12]	@ (800514c <HAL_RCC_GetPCLK1Freq+0x24>)
 800513e:	5ccb      	ldrb	r3, [r1, r3]
 8005140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005144:	4618      	mov	r0, r3
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40023800 	.word	0x40023800
 800514c:	08009210 	.word	0x08009210

08005150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005154:	f7ff ffdc 	bl	8005110 <HAL_RCC_GetHCLKFreq>
 8005158:	4602      	mov	r2, r0
 800515a:	4b05      	ldr	r3, [pc, #20]	@ (8005170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	0b5b      	lsrs	r3, r3, #13
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	4903      	ldr	r1, [pc, #12]	@ (8005174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005166:	5ccb      	ldrb	r3, [r1, r3]
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800516c:	4618      	mov	r0, r3
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40023800 	.word	0x40023800
 8005174:	08009210 	.word	0x08009210

08005178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005184:	2300      	movs	r3, #0
 8005186:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d012      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051a0:	4b69      	ldr	r3, [pc, #420]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	4a68      	ldr	r2, [pc, #416]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80051aa:	6093      	str	r3, [r2, #8]
 80051ac:	4b66      	ldr	r3, [pc, #408]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b4:	4964      	ldr	r1, [pc, #400]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80051c2:	2301      	movs	r3, #1
 80051c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d017      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051d8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e0:	4959      	ldr	r1, [pc, #356]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051f0:	d101      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80051f2:	2301      	movs	r3, #1
 80051f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80051fe:	2301      	movs	r3, #1
 8005200:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d017      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800520e:	4b4e      	ldr	r3, [pc, #312]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005210:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005214:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521c:	494a      	ldr	r1, [pc, #296]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005228:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800522c:	d101      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800522e:	2301      	movs	r3, #1
 8005230:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800523a:	2301      	movs	r3, #1
 800523c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800524a:	2301      	movs	r3, #1
 800524c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 808b 	beq.w	8005372 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800525c:	4b3a      	ldr	r3, [pc, #232]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800525e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005260:	4a39      	ldr	r2, [pc, #228]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005266:	6413      	str	r3, [r2, #64]	@ 0x40
 8005268:	4b37      	ldr	r3, [pc, #220]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005270:	60bb      	str	r3, [r7, #8]
 8005272:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005274:	4b35      	ldr	r3, [pc, #212]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a34      	ldr	r2, [pc, #208]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800527a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800527e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005280:	f7fd fe5e 	bl	8002f40 <HAL_GetTick>
 8005284:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005286:	e008      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005288:	f7fd fe5a 	bl	8002f40 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b64      	cmp	r3, #100	@ 0x64
 8005294:	d901      	bls.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e357      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800529a:	4b2c      	ldr	r3, [pc, #176]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f0      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052a6:	4b28      	ldr	r3, [pc, #160]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d035      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d02e      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052c4:	4b20      	ldr	r3, [pc, #128]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052d8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052da:	4b1b      	ldr	r3, [pc, #108]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052de:	4a1a      	ldr	r2, [pc, #104]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052e4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80052e6:	4a18      	ldr	r2, [pc, #96]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052ec:	4b16      	ldr	r3, [pc, #88]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d114      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f8:	f7fd fe22 	bl	8002f40 <HAL_GetTick>
 80052fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fe:	e00a      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005300:	f7fd fe1e 	bl	8002f40 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e319      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005316:	4b0c      	ldr	r3, [pc, #48]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0ee      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800532a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800532e:	d111      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005330:	4b05      	ldr	r3, [pc, #20]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800533c:	4b04      	ldr	r3, [pc, #16]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800533e:	400b      	ands	r3, r1
 8005340:	4901      	ldr	r1, [pc, #4]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005342:	4313      	orrs	r3, r2
 8005344:	608b      	str	r3, [r1, #8]
 8005346:	e00b      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005348:	40023800 	.word	0x40023800
 800534c:	40007000 	.word	0x40007000
 8005350:	0ffffcff 	.word	0x0ffffcff
 8005354:	4baa      	ldr	r3, [pc, #680]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4aa9      	ldr	r2, [pc, #676]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800535a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800535e:	6093      	str	r3, [r2, #8]
 8005360:	4ba7      	ldr	r3, [pc, #668]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005362:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536c:	49a4      	ldr	r1, [pc, #656]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800536e:	4313      	orrs	r3, r2
 8005370:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	d010      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800537e:	4ba0      	ldr	r3, [pc, #640]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005384:	4a9e      	ldr	r2, [pc, #632]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005386:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800538a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800538e:	4b9c      	ldr	r3, [pc, #624]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005390:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005398:	4999      	ldr	r1, [pc, #612]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053ac:	4b94      	ldr	r3, [pc, #592]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053ba:	4991      	ldr	r1, [pc, #580]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053ce:	4b8c      	ldr	r3, [pc, #560]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053dc:	4988      	ldr	r1, [pc, #544]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053f0:	4b83      	ldr	r3, [pc, #524]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053fe:	4980      	ldr	r1, [pc, #512]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005412:	4b7b      	ldr	r3, [pc, #492]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005418:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005420:	4977      	ldr	r1, [pc, #476]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005434:	4b72      	ldr	r3, [pc, #456]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543a:	f023 0203 	bic.w	r2, r3, #3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005442:	496f      	ldr	r1, [pc, #444]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005456:	4b6a      	ldr	r3, [pc, #424]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800545c:	f023 020c 	bic.w	r2, r3, #12
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005464:	4966      	ldr	r1, [pc, #408]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005478:	4b61      	ldr	r3, [pc, #388]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800547e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005486:	495e      	ldr	r1, [pc, #376]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800549a:	4b59      	ldr	r3, [pc, #356]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800549c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054a8:	4955      	ldr	r1, [pc, #340]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054bc:	4b50      	ldr	r3, [pc, #320]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ca:	494d      	ldr	r1, [pc, #308]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80054de:	4b48      	ldr	r3, [pc, #288]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ec:	4944      	ldr	r1, [pc, #272]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005500:	4b3f      	ldr	r3, [pc, #252]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005506:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800550e:	493c      	ldr	r1, [pc, #240]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005522:	4b37      	ldr	r3, [pc, #220]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005528:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005530:	4933      	ldr	r1, [pc, #204]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005544:	4b2e      	ldr	r3, [pc, #184]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800554a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005552:	492b      	ldr	r1, [pc, #172]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d011      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005566:	4b26      	ldr	r3, [pc, #152]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800556c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005574:	4922      	ldr	r1, [pc, #136]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005580:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005584:	d101      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005586:	2301      	movs	r3, #1
 8005588:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005596:	2301      	movs	r3, #1
 8005598:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055a6:	4b16      	ldr	r3, [pc, #88]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ac:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055b4:	4912      	ldr	r1, [pc, #72]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00b      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ce:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055d8:	4909      	ldr	r1, [pc, #36]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d006      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 80d9 	beq.w	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055f4:	4b02      	ldr	r3, [pc, #8]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a01      	ldr	r2, [pc, #4]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055fe:	e001      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005600:	40023800 	.word	0x40023800
 8005604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005606:	f7fd fc9b 	bl	8002f40 <HAL_GetTick>
 800560a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800560c:	e008      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800560e:	f7fd fc97 	bl	8002f40 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b64      	cmp	r3, #100	@ 0x64
 800561a:	d901      	bls.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e194      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005620:	4b6c      	ldr	r3, [pc, #432]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1f0      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d021      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563c:	2b00      	cmp	r3, #0
 800563e:	d11d      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005640:	4b64      	ldr	r3, [pc, #400]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005646:	0c1b      	lsrs	r3, r3, #16
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800564e:	4b61      	ldr	r3, [pc, #388]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005650:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005654:	0e1b      	lsrs	r3, r3, #24
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	019a      	lsls	r2, r3, #6
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	041b      	lsls	r3, r3, #16
 8005666:	431a      	orrs	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	061b      	lsls	r3, r3, #24
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	071b      	lsls	r3, r3, #28
 8005674:	4957      	ldr	r1, [pc, #348]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005676:	4313      	orrs	r3, r2
 8005678:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d004      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800569a:	2b00      	cmp	r3, #0
 800569c:	d02e      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056a6:	d129      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056a8:	4b4a      	ldr	r3, [pc, #296]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056ae:	0c1b      	lsrs	r3, r3, #16
 80056b0:	f003 0303 	and.w	r3, r3, #3
 80056b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056b6:	4b47      	ldr	r3, [pc, #284]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056bc:	0f1b      	lsrs	r3, r3, #28
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	019a      	lsls	r2, r3, #6
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	041b      	lsls	r3, r3, #16
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	061b      	lsls	r3, r3, #24
 80056d6:	431a      	orrs	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	071b      	lsls	r3, r3, #28
 80056dc:	493d      	ldr	r1, [pc, #244]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056e4:	4b3b      	ldr	r3, [pc, #236]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056ea:	f023 021f 	bic.w	r2, r3, #31
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f2:	3b01      	subs	r3, #1
 80056f4:	4937      	ldr	r1, [pc, #220]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01d      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005708:	4b32      	ldr	r3, [pc, #200]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800570a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800570e:	0e1b      	lsrs	r3, r3, #24
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005716:	4b2f      	ldr	r3, [pc, #188]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005718:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800571c:	0f1b      	lsrs	r3, r3, #28
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	019a      	lsls	r2, r3, #6
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	041b      	lsls	r3, r3, #16
 8005730:	431a      	orrs	r2, r3
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	061b      	lsls	r3, r3, #24
 8005736:	431a      	orrs	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	071b      	lsls	r3, r3, #28
 800573c:	4925      	ldr	r1, [pc, #148]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d011      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	019a      	lsls	r2, r3, #6
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	041b      	lsls	r3, r3, #16
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	061b      	lsls	r3, r3, #24
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	071b      	lsls	r3, r3, #28
 800576c:	4919      	ldr	r1, [pc, #100]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005774:	4b17      	ldr	r3, [pc, #92]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a16      	ldr	r2, [pc, #88]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800577a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800577e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005780:	f7fd fbde 	bl	8002f40 <HAL_GetTick>
 8005784:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005786:	e008      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005788:	f7fd fbda 	bl	8002f40 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b64      	cmp	r3, #100	@ 0x64
 8005794:	d901      	bls.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e0d7      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800579a:	4b0e      	ldr	r3, [pc, #56]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0f0      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	f040 80cd 	bne.w	8005948 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80057ae:	4b09      	ldr	r3, [pc, #36]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a08      	ldr	r2, [pc, #32]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ba:	f7fd fbc1 	bl	8002f40 <HAL_GetTick>
 80057be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057c0:	e00a      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057c2:	f7fd fbbd 	bl	8002f40 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b64      	cmp	r3, #100	@ 0x64
 80057ce:	d903      	bls.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e0ba      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80057d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057d8:	4b5e      	ldr	r3, [pc, #376]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057e4:	d0ed      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d009      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005802:	2b00      	cmp	r3, #0
 8005804:	d02e      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d12a      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800580e:	4b51      	ldr	r3, [pc, #324]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005814:	0c1b      	lsrs	r3, r3, #16
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800581c:	4b4d      	ldr	r3, [pc, #308]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005822:	0f1b      	lsrs	r3, r3, #28
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	019a      	lsls	r2, r3, #6
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	041b      	lsls	r3, r3, #16
 8005834:	431a      	orrs	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	061b      	lsls	r3, r3, #24
 800583c:	431a      	orrs	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	071b      	lsls	r3, r3, #28
 8005842:	4944      	ldr	r1, [pc, #272]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800584a:	4b42      	ldr	r3, [pc, #264]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800584c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005850:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005858:	3b01      	subs	r3, #1
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	493d      	ldr	r1, [pc, #244]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d022      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005874:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005878:	d11d      	bne.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800587a:	4b36      	ldr	r3, [pc, #216]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800587c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005880:	0e1b      	lsrs	r3, r3, #24
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005888:	4b32      	ldr	r3, [pc, #200]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588e:	0f1b      	lsrs	r3, r3, #28
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	019a      	lsls	r2, r3, #6
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	041b      	lsls	r3, r3, #16
 80058a2:	431a      	orrs	r2, r3
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	061b      	lsls	r3, r3, #24
 80058a8:	431a      	orrs	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	071b      	lsls	r3, r3, #28
 80058ae:	4929      	ldr	r1, [pc, #164]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d028      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058c2:	4b24      	ldr	r3, [pc, #144]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c8:	0e1b      	lsrs	r3, r3, #24
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058d0:	4b20      	ldr	r3, [pc, #128]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d6:	0c1b      	lsrs	r3, r3, #16
 80058d8:	f003 0303 	and.w	r3, r3, #3
 80058dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	019a      	lsls	r2, r3, #6
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	041b      	lsls	r3, r3, #16
 80058e8:	431a      	orrs	r2, r3
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	061b      	lsls	r3, r3, #24
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	071b      	lsls	r3, r3, #28
 80058f6:	4917      	ldr	r1, [pc, #92]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058fe:	4b15      	ldr	r3, [pc, #84]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005900:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005904:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590c:	4911      	ldr	r1, [pc, #68]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005914:	4b0f      	ldr	r3, [pc, #60]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a0e      	ldr	r2, [pc, #56]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800591a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800591e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005920:	f7fd fb0e 	bl	8002f40 <HAL_GetTick>
 8005924:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005926:	e008      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005928:	f7fd fb0a 	bl	8002f40 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b64      	cmp	r3, #100	@ 0x64
 8005934:	d901      	bls.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e007      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800593a:	4b06      	ldr	r3, [pc, #24]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005942:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005946:	d1ef      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	40023800 	.word	0x40023800

08005958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e049      	b.n	80059fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fb faf6 	bl	8000f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3304      	adds	r3, #4
 8005994:	4619      	mov	r1, r3
 8005996:	4610      	mov	r0, r2
 8005998:	f000 fc5c 	bl	8006254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d001      	beq.n	8005a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e054      	b.n	8005aca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a26      	ldr	r2, [pc, #152]	@ (8005ad8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d022      	beq.n	8005a88 <HAL_TIM_Base_Start_IT+0x80>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a4a:	d01d      	beq.n	8005a88 <HAL_TIM_Base_Start_IT+0x80>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a22      	ldr	r2, [pc, #136]	@ (8005adc <HAL_TIM_Base_Start_IT+0xd4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d018      	beq.n	8005a88 <HAL_TIM_Base_Start_IT+0x80>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a21      	ldr	r2, [pc, #132]	@ (8005ae0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d013      	beq.n	8005a88 <HAL_TIM_Base_Start_IT+0x80>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a1f      	ldr	r2, [pc, #124]	@ (8005ae4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00e      	beq.n	8005a88 <HAL_TIM_Base_Start_IT+0x80>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ae8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d009      	beq.n	8005a88 <HAL_TIM_Base_Start_IT+0x80>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1c      	ldr	r2, [pc, #112]	@ (8005aec <HAL_TIM_Base_Start_IT+0xe4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d004      	beq.n	8005a88 <HAL_TIM_Base_Start_IT+0x80>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a1b      	ldr	r2, [pc, #108]	@ (8005af0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d115      	bne.n	8005ab4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	4b19      	ldr	r3, [pc, #100]	@ (8005af4 <HAL_TIM_Base_Start_IT+0xec>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b06      	cmp	r3, #6
 8005a98:	d015      	beq.n	8005ac6 <HAL_TIM_Base_Start_IT+0xbe>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aa0:	d011      	beq.n	8005ac6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0201 	orr.w	r2, r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab2:	e008      	b.n	8005ac6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0201 	orr.w	r2, r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	e000      	b.n	8005ac8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	40010000 	.word	0x40010000
 8005adc:	40000400 	.word	0x40000400
 8005ae0:	40000800 	.word	0x40000800
 8005ae4:	40000c00 	.word	0x40000c00
 8005ae8:	40010400 	.word	0x40010400
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40001800 	.word	0x40001800
 8005af4:	00010007 	.word	0x00010007

08005af8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e049      	b.n	8005b9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fb fa06 	bl	8000f30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3304      	adds	r3, #4
 8005b34:	4619      	mov	r1, r3
 8005b36:	4610      	mov	r0, r2
 8005b38:	f000 fb8c 	bl	8006254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d109      	bne.n	8005bcc <HAL_TIM_PWM_Start+0x24>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	bf14      	ite	ne
 8005bc4:	2301      	movne	r3, #1
 8005bc6:	2300      	moveq	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	e03c      	b.n	8005c46 <HAL_TIM_PWM_Start+0x9e>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d109      	bne.n	8005be6 <HAL_TIM_PWM_Start+0x3e>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	bf14      	ite	ne
 8005bde:	2301      	movne	r3, #1
 8005be0:	2300      	moveq	r3, #0
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	e02f      	b.n	8005c46 <HAL_TIM_PWM_Start+0x9e>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d109      	bne.n	8005c00 <HAL_TIM_PWM_Start+0x58>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	bf14      	ite	ne
 8005bf8:	2301      	movne	r3, #1
 8005bfa:	2300      	moveq	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	e022      	b.n	8005c46 <HAL_TIM_PWM_Start+0x9e>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b0c      	cmp	r3, #12
 8005c04:	d109      	bne.n	8005c1a <HAL_TIM_PWM_Start+0x72>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	bf14      	ite	ne
 8005c12:	2301      	movne	r3, #1
 8005c14:	2300      	moveq	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	e015      	b.n	8005c46 <HAL_TIM_PWM_Start+0x9e>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b10      	cmp	r3, #16
 8005c1e:	d109      	bne.n	8005c34 <HAL_TIM_PWM_Start+0x8c>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	bf14      	ite	ne
 8005c2c:	2301      	movne	r3, #1
 8005c2e:	2300      	moveq	r3, #0
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	e008      	b.n	8005c46 <HAL_TIM_PWM_Start+0x9e>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	bf14      	ite	ne
 8005c40:	2301      	movne	r3, #1
 8005c42:	2300      	moveq	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e092      	b.n	8005d74 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d104      	bne.n	8005c5e <HAL_TIM_PWM_Start+0xb6>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c5c:	e023      	b.n	8005ca6 <HAL_TIM_PWM_Start+0xfe>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d104      	bne.n	8005c6e <HAL_TIM_PWM_Start+0xc6>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c6c:	e01b      	b.n	8005ca6 <HAL_TIM_PWM_Start+0xfe>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d104      	bne.n	8005c7e <HAL_TIM_PWM_Start+0xd6>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c7c:	e013      	b.n	8005ca6 <HAL_TIM_PWM_Start+0xfe>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b0c      	cmp	r3, #12
 8005c82:	d104      	bne.n	8005c8e <HAL_TIM_PWM_Start+0xe6>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c8c:	e00b      	b.n	8005ca6 <HAL_TIM_PWM_Start+0xfe>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	d104      	bne.n	8005c9e <HAL_TIM_PWM_Start+0xf6>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c9c:	e003      	b.n	8005ca6 <HAL_TIM_PWM_Start+0xfe>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2201      	movs	r2, #1
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fdce 	bl	8006850 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a30      	ldr	r2, [pc, #192]	@ (8005d7c <HAL_TIM_PWM_Start+0x1d4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_TIM_PWM_Start+0x120>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a2f      	ldr	r2, [pc, #188]	@ (8005d80 <HAL_TIM_PWM_Start+0x1d8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d101      	bne.n	8005ccc <HAL_TIM_PWM_Start+0x124>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <HAL_TIM_PWM_Start+0x126>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d007      	beq.n	8005ce2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ce0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a25      	ldr	r2, [pc, #148]	@ (8005d7c <HAL_TIM_PWM_Start+0x1d4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d022      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x18a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cf4:	d01d      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x18a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a22      	ldr	r2, [pc, #136]	@ (8005d84 <HAL_TIM_PWM_Start+0x1dc>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d018      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x18a>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a20      	ldr	r2, [pc, #128]	@ (8005d88 <HAL_TIM_PWM_Start+0x1e0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d013      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x18a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8005d8c <HAL_TIM_PWM_Start+0x1e4>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00e      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x18a>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a19      	ldr	r2, [pc, #100]	@ (8005d80 <HAL_TIM_PWM_Start+0x1d8>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d009      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x18a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a1b      	ldr	r2, [pc, #108]	@ (8005d90 <HAL_TIM_PWM_Start+0x1e8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x18a>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a19      	ldr	r2, [pc, #100]	@ (8005d94 <HAL_TIM_PWM_Start+0x1ec>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d115      	bne.n	8005d5e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	4b17      	ldr	r3, [pc, #92]	@ (8005d98 <HAL_TIM_PWM_Start+0x1f0>)
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b06      	cmp	r3, #6
 8005d42:	d015      	beq.n	8005d70 <HAL_TIM_PWM_Start+0x1c8>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d4a:	d011      	beq.n	8005d70 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5c:	e008      	b.n	8005d70 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0201 	orr.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	e000      	b.n	8005d72 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40010400 	.word	0x40010400
 8005d84:	40000400 	.word	0x40000400
 8005d88:	40000800 	.word	0x40000800
 8005d8c:	40000c00 	.word	0x40000c00
 8005d90:	40014000 	.word	0x40014000
 8005d94:	40001800 	.word	0x40001800
 8005d98:	00010007 	.word	0x00010007

08005d9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d122      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d11b      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0202 	mvn.w	r2, #2
 8005dc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa1a 	bl	8006218 <HAL_TIM_IC_CaptureCallback>
 8005de4:	e005      	b.n	8005df2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fa0c 	bl	8006204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fa1d 	bl	800622c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d122      	bne.n	8005e4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d11b      	bne.n	8005e4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0204 	mvn.w	r2, #4
 8005e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2202      	movs	r2, #2
 8005e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f9f0 	bl	8006218 <HAL_TIM_IC_CaptureCallback>
 8005e38:	e005      	b.n	8005e46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f9e2 	bl	8006204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f9f3 	bl	800622c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d122      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d11b      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0208 	mvn.w	r2, #8
 8005e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2204      	movs	r2, #4
 8005e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f9c6 	bl	8006218 <HAL_TIM_IC_CaptureCallback>
 8005e8c:	e005      	b.n	8005e9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f9b8 	bl	8006204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f9c9 	bl	800622c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0310 	and.w	r3, r3, #16
 8005eaa:	2b10      	cmp	r3, #16
 8005eac:	d122      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0310 	and.w	r3, r3, #16
 8005eb8:	2b10      	cmp	r3, #16
 8005eba:	d11b      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0210 	mvn.w	r2, #16
 8005ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2208      	movs	r2, #8
 8005eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f99c 	bl	8006218 <HAL_TIM_IC_CaptureCallback>
 8005ee0:	e005      	b.n	8005eee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f98e 	bl	8006204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f99f 	bl	800622c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d10e      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d107      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0201 	mvn.w	r2, #1
 8005f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fb fd52 	bl	80019c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2a:	2b80      	cmp	r3, #128	@ 0x80
 8005f2c:	d10e      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f38:	2b80      	cmp	r3, #128	@ 0x80
 8005f3a:	d107      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fd40 	bl	80069cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f5a:	d10e      	bne.n	8005f7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f66:	2b80      	cmp	r3, #128	@ 0x80
 8005f68:	d107      	bne.n	8005f7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fd33 	bl	80069e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f84:	2b40      	cmp	r3, #64	@ 0x40
 8005f86:	d10e      	bne.n	8005fa6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f92:	2b40      	cmp	r3, #64	@ 0x40
 8005f94:	d107      	bne.n	8005fa6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f94d 	bl	8006240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d10e      	bne.n	8005fd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d107      	bne.n	8005fd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f06f 0220 	mvn.w	r2, #32
 8005fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fcf3 	bl	80069b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fd2:	bf00      	nop
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e0ff      	b.n	80061fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b14      	cmp	r3, #20
 8006006:	f200 80f0 	bhi.w	80061ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800600a:	a201      	add	r2, pc, #4	@ (adr r2, 8006010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800600c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006010:	08006065 	.word	0x08006065
 8006014:	080061eb 	.word	0x080061eb
 8006018:	080061eb 	.word	0x080061eb
 800601c:	080061eb 	.word	0x080061eb
 8006020:	080060a5 	.word	0x080060a5
 8006024:	080061eb 	.word	0x080061eb
 8006028:	080061eb 	.word	0x080061eb
 800602c:	080061eb 	.word	0x080061eb
 8006030:	080060e7 	.word	0x080060e7
 8006034:	080061eb 	.word	0x080061eb
 8006038:	080061eb 	.word	0x080061eb
 800603c:	080061eb 	.word	0x080061eb
 8006040:	08006127 	.word	0x08006127
 8006044:	080061eb 	.word	0x080061eb
 8006048:	080061eb 	.word	0x080061eb
 800604c:	080061eb 	.word	0x080061eb
 8006050:	08006169 	.word	0x08006169
 8006054:	080061eb 	.word	0x080061eb
 8006058:	080061eb 	.word	0x080061eb
 800605c:	080061eb 	.word	0x080061eb
 8006060:	080061a9 	.word	0x080061a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 f992 	bl	8006394 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699a      	ldr	r2, [r3, #24]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0208 	orr.w	r2, r2, #8
 800607e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	699a      	ldr	r2, [r3, #24]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0204 	bic.w	r2, r2, #4
 800608e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6999      	ldr	r1, [r3, #24]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	691a      	ldr	r2, [r3, #16]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	619a      	str	r2, [r3, #24]
      break;
 80060a2:	e0a5      	b.n	80061f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 f9e4 	bl	8006478 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699a      	ldr	r2, [r3, #24]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6999      	ldr	r1, [r3, #24]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	021a      	lsls	r2, r3, #8
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	619a      	str	r2, [r3, #24]
      break;
 80060e4:	e084      	b.n	80061f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68b9      	ldr	r1, [r7, #8]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 fa3b 	bl	8006568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69da      	ldr	r2, [r3, #28]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 0208 	orr.w	r2, r2, #8
 8006100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69da      	ldr	r2, [r3, #28]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0204 	bic.w	r2, r2, #4
 8006110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69d9      	ldr	r1, [r3, #28]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	691a      	ldr	r2, [r3, #16]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	61da      	str	r2, [r3, #28]
      break;
 8006124:	e064      	b.n	80061f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fa91 	bl	8006654 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69da      	ldr	r2, [r3, #28]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69d9      	ldr	r1, [r3, #28]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	021a      	lsls	r2, r3, #8
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	61da      	str	r2, [r3, #28]
      break;
 8006166:	e043      	b.n	80061f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 fac8 	bl	8006704 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0208 	orr.w	r2, r2, #8
 8006182:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0204 	bic.w	r2, r2, #4
 8006192:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	691a      	ldr	r2, [r3, #16]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80061a6:	e023      	b.n	80061f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68b9      	ldr	r1, [r7, #8]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fafa 	bl	80067a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	021a      	lsls	r2, r3, #8
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80061e8:	e002      	b.n	80061f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	75fb      	strb	r3, [r7, #23]
      break;
 80061ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop

08006204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a40      	ldr	r2, [pc, #256]	@ (8006368 <TIM_Base_SetConfig+0x114>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d013      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006272:	d00f      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a3d      	ldr	r2, [pc, #244]	@ (800636c <TIM_Base_SetConfig+0x118>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00b      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a3c      	ldr	r2, [pc, #240]	@ (8006370 <TIM_Base_SetConfig+0x11c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d007      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a3b      	ldr	r2, [pc, #236]	@ (8006374 <TIM_Base_SetConfig+0x120>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d003      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a3a      	ldr	r2, [pc, #232]	@ (8006378 <TIM_Base_SetConfig+0x124>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d108      	bne.n	80062a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800629a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a2f      	ldr	r2, [pc, #188]	@ (8006368 <TIM_Base_SetConfig+0x114>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d02b      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b4:	d027      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2c      	ldr	r2, [pc, #176]	@ (800636c <TIM_Base_SetConfig+0x118>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d023      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006370 <TIM_Base_SetConfig+0x11c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01f      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006374 <TIM_Base_SetConfig+0x120>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d01b      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a29      	ldr	r2, [pc, #164]	@ (8006378 <TIM_Base_SetConfig+0x124>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d017      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a28      	ldr	r2, [pc, #160]	@ (800637c <TIM_Base_SetConfig+0x128>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a27      	ldr	r2, [pc, #156]	@ (8006380 <TIM_Base_SetConfig+0x12c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00f      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a26      	ldr	r2, [pc, #152]	@ (8006384 <TIM_Base_SetConfig+0x130>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00b      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a25      	ldr	r2, [pc, #148]	@ (8006388 <TIM_Base_SetConfig+0x134>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d007      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a24      	ldr	r2, [pc, #144]	@ (800638c <TIM_Base_SetConfig+0x138>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d003      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a23      	ldr	r2, [pc, #140]	@ (8006390 <TIM_Base_SetConfig+0x13c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d108      	bne.n	8006318 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800630c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a0a      	ldr	r2, [pc, #40]	@ (8006368 <TIM_Base_SetConfig+0x114>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_Base_SetConfig+0xf8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a0c      	ldr	r2, [pc, #48]	@ (8006378 <TIM_Base_SetConfig+0x124>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d103      	bne.n	8006354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	615a      	str	r2, [r3, #20]
}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40010000 	.word	0x40010000
 800636c:	40000400 	.word	0x40000400
 8006370:	40000800 	.word	0x40000800
 8006374:	40000c00 	.word	0x40000c00
 8006378:	40010400 	.word	0x40010400
 800637c:	40014000 	.word	0x40014000
 8006380:	40014400 	.word	0x40014400
 8006384:	40014800 	.word	0x40014800
 8006388:	40001800 	.word	0x40001800
 800638c:	40001c00 	.word	0x40001c00
 8006390:	40002000 	.word	0x40002000

08006394 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	f023 0201 	bic.w	r2, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4b2b      	ldr	r3, [pc, #172]	@ (800646c <TIM_OC1_SetConfig+0xd8>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0303 	bic.w	r3, r3, #3
 80063ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f023 0302 	bic.w	r3, r3, #2
 80063dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a21      	ldr	r2, [pc, #132]	@ (8006470 <TIM_OC1_SetConfig+0xdc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d003      	beq.n	80063f8 <TIM_OC1_SetConfig+0x64>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a20      	ldr	r2, [pc, #128]	@ (8006474 <TIM_OC1_SetConfig+0xe0>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d10c      	bne.n	8006412 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f023 0308 	bic.w	r3, r3, #8
 80063fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	4313      	orrs	r3, r2
 8006408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f023 0304 	bic.w	r3, r3, #4
 8006410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a16      	ldr	r2, [pc, #88]	@ (8006470 <TIM_OC1_SetConfig+0xdc>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_OC1_SetConfig+0x8e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a15      	ldr	r2, [pc, #84]	@ (8006474 <TIM_OC1_SetConfig+0xe0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d111      	bne.n	8006446 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	621a      	str	r2, [r3, #32]
}
 8006460:	bf00      	nop
 8006462:	371c      	adds	r7, #28
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	fffeff8f 	.word	0xfffeff8f
 8006470:	40010000 	.word	0x40010000
 8006474:	40010400 	.word	0x40010400

08006478 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	f023 0210 	bic.w	r2, r3, #16
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4b2e      	ldr	r3, [pc, #184]	@ (800655c <TIM_OC2_SetConfig+0xe4>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	021b      	lsls	r3, r3, #8
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f023 0320 	bic.w	r3, r3, #32
 80064c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	011b      	lsls	r3, r3, #4
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a23      	ldr	r2, [pc, #140]	@ (8006560 <TIM_OC2_SetConfig+0xe8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d003      	beq.n	80064e0 <TIM_OC2_SetConfig+0x68>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a22      	ldr	r2, [pc, #136]	@ (8006564 <TIM_OC2_SetConfig+0xec>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d10d      	bne.n	80064fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a18      	ldr	r2, [pc, #96]	@ (8006560 <TIM_OC2_SetConfig+0xe8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d003      	beq.n	800650c <TIM_OC2_SetConfig+0x94>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a17      	ldr	r2, [pc, #92]	@ (8006564 <TIM_OC2_SetConfig+0xec>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d113      	bne.n	8006534 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800651a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	621a      	str	r2, [r3, #32]
}
 800654e:	bf00      	nop
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	feff8fff 	.word	0xfeff8fff
 8006560:	40010000 	.word	0x40010000
 8006564:	40010400 	.word	0x40010400

08006568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4b2d      	ldr	r3, [pc, #180]	@ (8006648 <TIM_OC3_SetConfig+0xe0>)
 8006594:	4013      	ands	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0303 	bic.w	r3, r3, #3
 800659e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a22      	ldr	r2, [pc, #136]	@ (800664c <TIM_OC3_SetConfig+0xe4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_OC3_SetConfig+0x66>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a21      	ldr	r2, [pc, #132]	@ (8006650 <TIM_OC3_SetConfig+0xe8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d10d      	bne.n	80065ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	021b      	lsls	r3, r3, #8
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a17      	ldr	r2, [pc, #92]	@ (800664c <TIM_OC3_SetConfig+0xe4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d003      	beq.n	80065fa <TIM_OC3_SetConfig+0x92>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a16      	ldr	r2, [pc, #88]	@ (8006650 <TIM_OC3_SetConfig+0xe8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d113      	bne.n	8006622 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4313      	orrs	r3, r2
 8006614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4313      	orrs	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	621a      	str	r2, [r3, #32]
}
 800663c:	bf00      	nop
 800663e:	371c      	adds	r7, #28
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	fffeff8f 	.word	0xfffeff8f
 800664c:	40010000 	.word	0x40010000
 8006650:	40010400 	.word	0x40010400

08006654 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4b1e      	ldr	r3, [pc, #120]	@ (80066f8 <TIM_OC4_SetConfig+0xa4>)
 8006680:	4013      	ands	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800668a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800669e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	031b      	lsls	r3, r3, #12
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a13      	ldr	r2, [pc, #76]	@ (80066fc <TIM_OC4_SetConfig+0xa8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_OC4_SetConfig+0x68>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a12      	ldr	r2, [pc, #72]	@ (8006700 <TIM_OC4_SetConfig+0xac>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d109      	bne.n	80066d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	019b      	lsls	r3, r3, #6
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	621a      	str	r2, [r3, #32]
}
 80066ea:	bf00      	nop
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	feff8fff 	.word	0xfeff8fff
 80066fc:	40010000 	.word	0x40010000
 8006700:	40010400 	.word	0x40010400

08006704 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4b1b      	ldr	r3, [pc, #108]	@ (800679c <TIM_OC5_SetConfig+0x98>)
 8006730:	4013      	ands	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006744:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	041b      	lsls	r3, r3, #16
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a12      	ldr	r2, [pc, #72]	@ (80067a0 <TIM_OC5_SetConfig+0x9c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d003      	beq.n	8006762 <TIM_OC5_SetConfig+0x5e>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a11      	ldr	r2, [pc, #68]	@ (80067a4 <TIM_OC5_SetConfig+0xa0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d109      	bne.n	8006776 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006768:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	021b      	lsls	r3, r3, #8
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	621a      	str	r2, [r3, #32]
}
 8006790:	bf00      	nop
 8006792:	371c      	adds	r7, #28
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	fffeff8f 	.word	0xfffeff8f
 80067a0:	40010000 	.word	0x40010000
 80067a4:	40010400 	.word	0x40010400

080067a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4b1c      	ldr	r3, [pc, #112]	@ (8006844 <TIM_OC6_SetConfig+0x9c>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80067ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	051b      	lsls	r3, r3, #20
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a13      	ldr	r2, [pc, #76]	@ (8006848 <TIM_OC6_SetConfig+0xa0>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d003      	beq.n	8006808 <TIM_OC6_SetConfig+0x60>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a12      	ldr	r2, [pc, #72]	@ (800684c <TIM_OC6_SetConfig+0xa4>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d109      	bne.n	800681c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800680e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	029b      	lsls	r3, r3, #10
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	4313      	orrs	r3, r2
 800681a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	621a      	str	r2, [r3, #32]
}
 8006836:	bf00      	nop
 8006838:	371c      	adds	r7, #28
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	feff8fff 	.word	0xfeff8fff
 8006848:	40010000 	.word	0x40010000
 800684c:	40010400 	.word	0x40010400

08006850 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f003 031f 	and.w	r3, r3, #31
 8006862:	2201      	movs	r2, #1
 8006864:	fa02 f303 	lsl.w	r3, r2, r3
 8006868:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a1a      	ldr	r2, [r3, #32]
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	43db      	mvns	r3, r3
 8006872:	401a      	ands	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a1a      	ldr	r2, [r3, #32]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f003 031f 	and.w	r3, r3, #31
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	fa01 f303 	lsl.w	r3, r1, r3
 8006888:	431a      	orrs	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	621a      	str	r2, [r3, #32]
}
 800688e:	bf00      	nop
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
	...

0800689c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d101      	bne.n	80068b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068b0:	2302      	movs	r3, #2
 80068b2:	e06d      	b.n	8006990 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a30      	ldr	r2, [pc, #192]	@ (800699c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d004      	beq.n	80068e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a2f      	ldr	r2, [pc, #188]	@ (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d108      	bne.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80068ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006900:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a20      	ldr	r2, [pc, #128]	@ (800699c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d022      	beq.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006926:	d01d      	beq.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a1d      	ldr	r2, [pc, #116]	@ (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d018      	beq.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a1c      	ldr	r2, [pc, #112]	@ (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d013      	beq.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a1a      	ldr	r2, [pc, #104]	@ (80069ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00e      	beq.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a15      	ldr	r2, [pc, #84]	@ (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d009      	beq.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a16      	ldr	r2, [pc, #88]	@ (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d004      	beq.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a15      	ldr	r2, [pc, #84]	@ (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d10c      	bne.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800696a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	4313      	orrs	r3, r2
 8006974:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	40010000 	.word	0x40010000
 80069a0:	40010400 	.word	0x40010400
 80069a4:	40000400 	.word	0x40000400
 80069a8:	40000800 	.word	0x40000800
 80069ac:	40000c00 	.word	0x40000c00
 80069b0:	40014000 	.word	0x40014000
 80069b4:	40001800 	.word	0x40001800

080069b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e040      	b.n	8006a88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fa fb38 	bl	800108c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2224      	movs	r2, #36	@ 0x24
 8006a20:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 0201 	bic.w	r2, r2, #1
 8006a30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f8b0 	bl	8006b98 <UART_SetConfig>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e022      	b.n	8006a88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fb08 	bl	8007060 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689a      	ldr	r2, [r3, #8]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0201 	orr.w	r2, r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fb8f 	bl	80071a4 <UART_CheckIdleState>
 8006a86:	4603      	mov	r3, r0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08a      	sub	sp, #40	@ 0x28
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006aa4:	2b20      	cmp	r3, #32
 8006aa6:	d171      	bne.n	8006b8c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_UART_Transmit+0x24>
 8006aae:	88fb      	ldrh	r3, [r7, #6]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e06a      	b.n	8006b8e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2221      	movs	r2, #33	@ 0x21
 8006ac4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ac6:	f7fc fa3b 	bl	8002f40 <HAL_GetTick>
 8006aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	88fa      	ldrh	r2, [r7, #6]
 8006ad0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	88fa      	ldrh	r2, [r7, #6]
 8006ad8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ae4:	d108      	bne.n	8006af8 <HAL_UART_Transmit+0x68>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d104      	bne.n	8006af8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	61bb      	str	r3, [r7, #24]
 8006af6:	e003      	b.n	8006b00 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006afc:	2300      	movs	r3, #0
 8006afe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b00:	e02c      	b.n	8006b5c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2180      	movs	r1, #128	@ 0x80
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 fb80 	bl	8007212 <UART_WaitOnFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e038      	b.n	8006b8e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10b      	bne.n	8006b3a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	3302      	adds	r3, #2
 8006b36:	61bb      	str	r3, [r7, #24]
 8006b38:	e007      	b.n	8006b4a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	781a      	ldrb	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1cc      	bne.n	8006b02 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	2140      	movs	r1, #64	@ 0x40
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 fb4d 	bl	8007212 <UART_WaitOnFlagUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e005      	b.n	8006b8e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2220      	movs	r2, #32
 8006b86:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	e000      	b.n	8006b8e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006b8c:	2302      	movs	r3, #2
  }
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3720      	adds	r7, #32
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b088      	sub	sp, #32
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	4ba6      	ldr	r3, [pc, #664]	@ (8006e5c <UART_SetConfig+0x2c4>)
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	6812      	ldr	r2, [r2, #0]
 8006bca:	6979      	ldr	r1, [r7, #20]
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a94      	ldr	r2, [pc, #592]	@ (8006e60 <UART_SetConfig+0x2c8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d120      	bne.n	8006c56 <UART_SetConfig+0xbe>
 8006c14:	4b93      	ldr	r3, [pc, #588]	@ (8006e64 <UART_SetConfig+0x2cc>)
 8006c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d816      	bhi.n	8006c50 <UART_SetConfig+0xb8>
 8006c22:	a201      	add	r2, pc, #4	@ (adr r2, 8006c28 <UART_SetConfig+0x90>)
 8006c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c28:	08006c39 	.word	0x08006c39
 8006c2c:	08006c45 	.word	0x08006c45
 8006c30:	08006c3f 	.word	0x08006c3f
 8006c34:	08006c4b 	.word	0x08006c4b
 8006c38:	2301      	movs	r3, #1
 8006c3a:	77fb      	strb	r3, [r7, #31]
 8006c3c:	e150      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	77fb      	strb	r3, [r7, #31]
 8006c42:	e14d      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006c44:	2304      	movs	r3, #4
 8006c46:	77fb      	strb	r3, [r7, #31]
 8006c48:	e14a      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006c4a:	2308      	movs	r3, #8
 8006c4c:	77fb      	strb	r3, [r7, #31]
 8006c4e:	e147      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006c50:	2310      	movs	r3, #16
 8006c52:	77fb      	strb	r3, [r7, #31]
 8006c54:	e144      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a83      	ldr	r2, [pc, #524]	@ (8006e68 <UART_SetConfig+0x2d0>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d132      	bne.n	8006cc6 <UART_SetConfig+0x12e>
 8006c60:	4b80      	ldr	r3, [pc, #512]	@ (8006e64 <UART_SetConfig+0x2cc>)
 8006c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c66:	f003 030c 	and.w	r3, r3, #12
 8006c6a:	2b0c      	cmp	r3, #12
 8006c6c:	d828      	bhi.n	8006cc0 <UART_SetConfig+0x128>
 8006c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c74 <UART_SetConfig+0xdc>)
 8006c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c74:	08006ca9 	.word	0x08006ca9
 8006c78:	08006cc1 	.word	0x08006cc1
 8006c7c:	08006cc1 	.word	0x08006cc1
 8006c80:	08006cc1 	.word	0x08006cc1
 8006c84:	08006cb5 	.word	0x08006cb5
 8006c88:	08006cc1 	.word	0x08006cc1
 8006c8c:	08006cc1 	.word	0x08006cc1
 8006c90:	08006cc1 	.word	0x08006cc1
 8006c94:	08006caf 	.word	0x08006caf
 8006c98:	08006cc1 	.word	0x08006cc1
 8006c9c:	08006cc1 	.word	0x08006cc1
 8006ca0:	08006cc1 	.word	0x08006cc1
 8006ca4:	08006cbb 	.word	0x08006cbb
 8006ca8:	2300      	movs	r3, #0
 8006caa:	77fb      	strb	r3, [r7, #31]
 8006cac:	e118      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006cae:	2302      	movs	r3, #2
 8006cb0:	77fb      	strb	r3, [r7, #31]
 8006cb2:	e115      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006cb4:	2304      	movs	r3, #4
 8006cb6:	77fb      	strb	r3, [r7, #31]
 8006cb8:	e112      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006cba:	2308      	movs	r3, #8
 8006cbc:	77fb      	strb	r3, [r7, #31]
 8006cbe:	e10f      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006cc0:	2310      	movs	r3, #16
 8006cc2:	77fb      	strb	r3, [r7, #31]
 8006cc4:	e10c      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a68      	ldr	r2, [pc, #416]	@ (8006e6c <UART_SetConfig+0x2d4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d120      	bne.n	8006d12 <UART_SetConfig+0x17a>
 8006cd0:	4b64      	ldr	r3, [pc, #400]	@ (8006e64 <UART_SetConfig+0x2cc>)
 8006cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cd6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006cda:	2b30      	cmp	r3, #48	@ 0x30
 8006cdc:	d013      	beq.n	8006d06 <UART_SetConfig+0x16e>
 8006cde:	2b30      	cmp	r3, #48	@ 0x30
 8006ce0:	d814      	bhi.n	8006d0c <UART_SetConfig+0x174>
 8006ce2:	2b20      	cmp	r3, #32
 8006ce4:	d009      	beq.n	8006cfa <UART_SetConfig+0x162>
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d810      	bhi.n	8006d0c <UART_SetConfig+0x174>
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <UART_SetConfig+0x15c>
 8006cee:	2b10      	cmp	r3, #16
 8006cf0:	d006      	beq.n	8006d00 <UART_SetConfig+0x168>
 8006cf2:	e00b      	b.n	8006d0c <UART_SetConfig+0x174>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	77fb      	strb	r3, [r7, #31]
 8006cf8:	e0f2      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	77fb      	strb	r3, [r7, #31]
 8006cfe:	e0ef      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006d00:	2304      	movs	r3, #4
 8006d02:	77fb      	strb	r3, [r7, #31]
 8006d04:	e0ec      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006d06:	2308      	movs	r3, #8
 8006d08:	77fb      	strb	r3, [r7, #31]
 8006d0a:	e0e9      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006d0c:	2310      	movs	r3, #16
 8006d0e:	77fb      	strb	r3, [r7, #31]
 8006d10:	e0e6      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a56      	ldr	r2, [pc, #344]	@ (8006e70 <UART_SetConfig+0x2d8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d120      	bne.n	8006d5e <UART_SetConfig+0x1c6>
 8006d1c:	4b51      	ldr	r3, [pc, #324]	@ (8006e64 <UART_SetConfig+0x2cc>)
 8006d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d26:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d28:	d013      	beq.n	8006d52 <UART_SetConfig+0x1ba>
 8006d2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d2c:	d814      	bhi.n	8006d58 <UART_SetConfig+0x1c0>
 8006d2e:	2b80      	cmp	r3, #128	@ 0x80
 8006d30:	d009      	beq.n	8006d46 <UART_SetConfig+0x1ae>
 8006d32:	2b80      	cmp	r3, #128	@ 0x80
 8006d34:	d810      	bhi.n	8006d58 <UART_SetConfig+0x1c0>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <UART_SetConfig+0x1a8>
 8006d3a:	2b40      	cmp	r3, #64	@ 0x40
 8006d3c:	d006      	beq.n	8006d4c <UART_SetConfig+0x1b4>
 8006d3e:	e00b      	b.n	8006d58 <UART_SetConfig+0x1c0>
 8006d40:	2300      	movs	r3, #0
 8006d42:	77fb      	strb	r3, [r7, #31]
 8006d44:	e0cc      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006d46:	2302      	movs	r3, #2
 8006d48:	77fb      	strb	r3, [r7, #31]
 8006d4a:	e0c9      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006d4c:	2304      	movs	r3, #4
 8006d4e:	77fb      	strb	r3, [r7, #31]
 8006d50:	e0c6      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006d52:	2308      	movs	r3, #8
 8006d54:	77fb      	strb	r3, [r7, #31]
 8006d56:	e0c3      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006d58:	2310      	movs	r3, #16
 8006d5a:	77fb      	strb	r3, [r7, #31]
 8006d5c:	e0c0      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a44      	ldr	r2, [pc, #272]	@ (8006e74 <UART_SetConfig+0x2dc>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d125      	bne.n	8006db4 <UART_SetConfig+0x21c>
 8006d68:	4b3e      	ldr	r3, [pc, #248]	@ (8006e64 <UART_SetConfig+0x2cc>)
 8006d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d76:	d017      	beq.n	8006da8 <UART_SetConfig+0x210>
 8006d78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d7c:	d817      	bhi.n	8006dae <UART_SetConfig+0x216>
 8006d7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d82:	d00b      	beq.n	8006d9c <UART_SetConfig+0x204>
 8006d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d88:	d811      	bhi.n	8006dae <UART_SetConfig+0x216>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <UART_SetConfig+0x1fe>
 8006d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d92:	d006      	beq.n	8006da2 <UART_SetConfig+0x20a>
 8006d94:	e00b      	b.n	8006dae <UART_SetConfig+0x216>
 8006d96:	2300      	movs	r3, #0
 8006d98:	77fb      	strb	r3, [r7, #31]
 8006d9a:	e0a1      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	77fb      	strb	r3, [r7, #31]
 8006da0:	e09e      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006da2:	2304      	movs	r3, #4
 8006da4:	77fb      	strb	r3, [r7, #31]
 8006da6:	e09b      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006da8:	2308      	movs	r3, #8
 8006daa:	77fb      	strb	r3, [r7, #31]
 8006dac:	e098      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006dae:	2310      	movs	r3, #16
 8006db0:	77fb      	strb	r3, [r7, #31]
 8006db2:	e095      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a2f      	ldr	r2, [pc, #188]	@ (8006e78 <UART_SetConfig+0x2e0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d125      	bne.n	8006e0a <UART_SetConfig+0x272>
 8006dbe:	4b29      	ldr	r3, [pc, #164]	@ (8006e64 <UART_SetConfig+0x2cc>)
 8006dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006dc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dcc:	d017      	beq.n	8006dfe <UART_SetConfig+0x266>
 8006dce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dd2:	d817      	bhi.n	8006e04 <UART_SetConfig+0x26c>
 8006dd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dd8:	d00b      	beq.n	8006df2 <UART_SetConfig+0x25a>
 8006dda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dde:	d811      	bhi.n	8006e04 <UART_SetConfig+0x26c>
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <UART_SetConfig+0x254>
 8006de4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de8:	d006      	beq.n	8006df8 <UART_SetConfig+0x260>
 8006dea:	e00b      	b.n	8006e04 <UART_SetConfig+0x26c>
 8006dec:	2301      	movs	r3, #1
 8006dee:	77fb      	strb	r3, [r7, #31]
 8006df0:	e076      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006df2:	2302      	movs	r3, #2
 8006df4:	77fb      	strb	r3, [r7, #31]
 8006df6:	e073      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006df8:	2304      	movs	r3, #4
 8006dfa:	77fb      	strb	r3, [r7, #31]
 8006dfc:	e070      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006dfe:	2308      	movs	r3, #8
 8006e00:	77fb      	strb	r3, [r7, #31]
 8006e02:	e06d      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006e04:	2310      	movs	r3, #16
 8006e06:	77fb      	strb	r3, [r7, #31]
 8006e08:	e06a      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006e7c <UART_SetConfig+0x2e4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d138      	bne.n	8006e86 <UART_SetConfig+0x2ee>
 8006e14:	4b13      	ldr	r3, [pc, #76]	@ (8006e64 <UART_SetConfig+0x2cc>)
 8006e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e1a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006e1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e22:	d017      	beq.n	8006e54 <UART_SetConfig+0x2bc>
 8006e24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e28:	d82a      	bhi.n	8006e80 <UART_SetConfig+0x2e8>
 8006e2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e2e:	d00b      	beq.n	8006e48 <UART_SetConfig+0x2b0>
 8006e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e34:	d824      	bhi.n	8006e80 <UART_SetConfig+0x2e8>
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <UART_SetConfig+0x2aa>
 8006e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e3e:	d006      	beq.n	8006e4e <UART_SetConfig+0x2b6>
 8006e40:	e01e      	b.n	8006e80 <UART_SetConfig+0x2e8>
 8006e42:	2300      	movs	r3, #0
 8006e44:	77fb      	strb	r3, [r7, #31]
 8006e46:	e04b      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	77fb      	strb	r3, [r7, #31]
 8006e4c:	e048      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006e4e:	2304      	movs	r3, #4
 8006e50:	77fb      	strb	r3, [r7, #31]
 8006e52:	e045      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006e54:	2308      	movs	r3, #8
 8006e56:	77fb      	strb	r3, [r7, #31]
 8006e58:	e042      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006e5a:	bf00      	nop
 8006e5c:	efff69f3 	.word	0xefff69f3
 8006e60:	40011000 	.word	0x40011000
 8006e64:	40023800 	.word	0x40023800
 8006e68:	40004400 	.word	0x40004400
 8006e6c:	40004800 	.word	0x40004800
 8006e70:	40004c00 	.word	0x40004c00
 8006e74:	40005000 	.word	0x40005000
 8006e78:	40011400 	.word	0x40011400
 8006e7c:	40007800 	.word	0x40007800
 8006e80:	2310      	movs	r3, #16
 8006e82:	77fb      	strb	r3, [r7, #31]
 8006e84:	e02c      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a72      	ldr	r2, [pc, #456]	@ (8007054 <UART_SetConfig+0x4bc>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d125      	bne.n	8006edc <UART_SetConfig+0x344>
 8006e90:	4b71      	ldr	r3, [pc, #452]	@ (8007058 <UART_SetConfig+0x4c0>)
 8006e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e96:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006e9a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006e9e:	d017      	beq.n	8006ed0 <UART_SetConfig+0x338>
 8006ea0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006ea4:	d817      	bhi.n	8006ed6 <UART_SetConfig+0x33e>
 8006ea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eaa:	d00b      	beq.n	8006ec4 <UART_SetConfig+0x32c>
 8006eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eb0:	d811      	bhi.n	8006ed6 <UART_SetConfig+0x33e>
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <UART_SetConfig+0x326>
 8006eb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006eba:	d006      	beq.n	8006eca <UART_SetConfig+0x332>
 8006ebc:	e00b      	b.n	8006ed6 <UART_SetConfig+0x33e>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	77fb      	strb	r3, [r7, #31]
 8006ec2:	e00d      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	77fb      	strb	r3, [r7, #31]
 8006ec8:	e00a      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006eca:	2304      	movs	r3, #4
 8006ecc:	77fb      	strb	r3, [r7, #31]
 8006ece:	e007      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006ed0:	2308      	movs	r3, #8
 8006ed2:	77fb      	strb	r3, [r7, #31]
 8006ed4:	e004      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006ed6:	2310      	movs	r3, #16
 8006ed8:	77fb      	strb	r3, [r7, #31]
 8006eda:	e001      	b.n	8006ee0 <UART_SetConfig+0x348>
 8006edc:	2310      	movs	r3, #16
 8006ede:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ee8:	d15b      	bne.n	8006fa2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006eea:	7ffb      	ldrb	r3, [r7, #31]
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d828      	bhi.n	8006f42 <UART_SetConfig+0x3aa>
 8006ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef8 <UART_SetConfig+0x360>)
 8006ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef6:	bf00      	nop
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f25 	.word	0x08006f25
 8006f00:	08006f2d 	.word	0x08006f2d
 8006f04:	08006f43 	.word	0x08006f43
 8006f08:	08006f33 	.word	0x08006f33
 8006f0c:	08006f43 	.word	0x08006f43
 8006f10:	08006f43 	.word	0x08006f43
 8006f14:	08006f43 	.word	0x08006f43
 8006f18:	08006f3b 	.word	0x08006f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f1c:	f7fe f904 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 8006f20:	61b8      	str	r0, [r7, #24]
        break;
 8006f22:	e013      	b.n	8006f4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f24:	f7fe f914 	bl	8005150 <HAL_RCC_GetPCLK2Freq>
 8006f28:	61b8      	str	r0, [r7, #24]
        break;
 8006f2a:	e00f      	b.n	8006f4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f2c:	4b4b      	ldr	r3, [pc, #300]	@ (800705c <UART_SetConfig+0x4c4>)
 8006f2e:	61bb      	str	r3, [r7, #24]
        break;
 8006f30:	e00c      	b.n	8006f4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f32:	f7fd ffe7 	bl	8004f04 <HAL_RCC_GetSysClockFreq>
 8006f36:	61b8      	str	r0, [r7, #24]
        break;
 8006f38:	e008      	b.n	8006f4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f3e:	61bb      	str	r3, [r7, #24]
        break;
 8006f40:	e004      	b.n	8006f4c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	77bb      	strb	r3, [r7, #30]
        break;
 8006f4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d074      	beq.n	800703c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	005a      	lsls	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	441a      	add	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	2b0f      	cmp	r3, #15
 8006f6c:	d916      	bls.n	8006f9c <UART_SetConfig+0x404>
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f74:	d212      	bcs.n	8006f9c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	f023 030f 	bic.w	r3, r3, #15
 8006f7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	085b      	lsrs	r3, r3, #1
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	89fb      	ldrh	r3, [r7, #14]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	89fa      	ldrh	r2, [r7, #14]
 8006f98:	60da      	str	r2, [r3, #12]
 8006f9a:	e04f      	b.n	800703c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	77bb      	strb	r3, [r7, #30]
 8006fa0:	e04c      	b.n	800703c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fa2:	7ffb      	ldrb	r3, [r7, #31]
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d828      	bhi.n	8006ffa <UART_SetConfig+0x462>
 8006fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb0 <UART_SetConfig+0x418>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	08006fd5 	.word	0x08006fd5
 8006fb4:	08006fdd 	.word	0x08006fdd
 8006fb8:	08006fe5 	.word	0x08006fe5
 8006fbc:	08006ffb 	.word	0x08006ffb
 8006fc0:	08006feb 	.word	0x08006feb
 8006fc4:	08006ffb 	.word	0x08006ffb
 8006fc8:	08006ffb 	.word	0x08006ffb
 8006fcc:	08006ffb 	.word	0x08006ffb
 8006fd0:	08006ff3 	.word	0x08006ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd4:	f7fe f8a8 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 8006fd8:	61b8      	str	r0, [r7, #24]
        break;
 8006fda:	e013      	b.n	8007004 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fdc:	f7fe f8b8 	bl	8005150 <HAL_RCC_GetPCLK2Freq>
 8006fe0:	61b8      	str	r0, [r7, #24]
        break;
 8006fe2:	e00f      	b.n	8007004 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800705c <UART_SetConfig+0x4c4>)
 8006fe6:	61bb      	str	r3, [r7, #24]
        break;
 8006fe8:	e00c      	b.n	8007004 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fea:	f7fd ff8b 	bl	8004f04 <HAL_RCC_GetSysClockFreq>
 8006fee:	61b8      	str	r0, [r7, #24]
        break;
 8006ff0:	e008      	b.n	8007004 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ff6:	61bb      	str	r3, [r7, #24]
        break;
 8006ff8:	e004      	b.n	8007004 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	77bb      	strb	r3, [r7, #30]
        break;
 8007002:	bf00      	nop
    }

    if (pclk != 0U)
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d018      	beq.n	800703c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	085a      	lsrs	r2, r3, #1
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	441a      	add	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	fbb2 f3f3 	udiv	r3, r2, r3
 800701c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	2b0f      	cmp	r3, #15
 8007022:	d909      	bls.n	8007038 <UART_SetConfig+0x4a0>
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800702a:	d205      	bcs.n	8007038 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	b29a      	uxth	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	60da      	str	r2, [r3, #12]
 8007036:	e001      	b.n	800703c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007048:	7fbb      	ldrb	r3, [r7, #30]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3720      	adds	r7, #32
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	40007c00 	.word	0x40007c00
 8007058:	40023800 	.word	0x40023800
 800705c:	00f42400 	.word	0x00f42400

08007060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00a      	beq.n	800708a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00a      	beq.n	80070ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f4:	f003 0310 	and.w	r3, r3, #16
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00a      	beq.n	8007112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01a      	beq.n	8007176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800715e:	d10a      	bne.n	8007176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800717a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	605a      	str	r2, [r3, #4]
  }
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071b4:	f7fb fec4 	bl	8002f40 <HAL_GetTick>
 80071b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0308 	and.w	r3, r3, #8
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d10e      	bne.n	80071e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f81b 	bl	8007212 <UART_WaitOnFlagUntilTimeout>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e011      	b.n	800720a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2220      	movs	r2, #32
 80071ea:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b09c      	sub	sp, #112	@ 0x70
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	603b      	str	r3, [r7, #0]
 800721e:	4613      	mov	r3, r2
 8007220:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007222:	e0a7      	b.n	8007374 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007224:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800722a:	f000 80a3 	beq.w	8007374 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800722e:	f7fb fe87 	bl	8002f40 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800723a:	429a      	cmp	r2, r3
 800723c:	d302      	bcc.n	8007244 <UART_WaitOnFlagUntilTimeout+0x32>
 800723e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007240:	2b00      	cmp	r3, #0
 8007242:	d13f      	bne.n	80072c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007254:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007258:	667b      	str	r3, [r7, #100]	@ 0x64
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007262:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007264:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007268:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e6      	bne.n	8007244 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3308      	adds	r3, #8
 800727c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007288:	f023 0301 	bic.w	r3, r3, #1
 800728c:	663b      	str	r3, [r7, #96]	@ 0x60
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007296:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007298:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800729c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80072a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e5      	bne.n	8007276 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2220      	movs	r2, #32
 80072ae:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e068      	b.n	8007396 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0304 	and.w	r3, r3, #4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d050      	beq.n	8007374 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072e0:	d148      	bne.n	8007374 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007300:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800730a:	637b      	str	r3, [r7, #52]	@ 0x34
 800730c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007310:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007312:	e841 2300 	strex	r3, r2, [r1]
 8007316:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1e6      	bne.n	80072ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3308      	adds	r3, #8
 8007324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	e853 3f00 	ldrex	r3, [r3]
 800732c:	613b      	str	r3, [r7, #16]
   return(result);
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f023 0301 	bic.w	r3, r3, #1
 8007334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3308      	adds	r3, #8
 800733c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800733e:	623a      	str	r2, [r7, #32]
 8007340:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	69f9      	ldr	r1, [r7, #28]
 8007344:	6a3a      	ldr	r2, [r7, #32]
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	61bb      	str	r3, [r7, #24]
   return(result);
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e5      	bne.n	800731e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2220      	movs	r2, #32
 8007356:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2220      	movs	r2, #32
 800735c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2220      	movs	r2, #32
 8007364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e010      	b.n	8007396 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	69da      	ldr	r2, [r3, #28]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	4013      	ands	r3, r2
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	429a      	cmp	r2, r3
 8007382:	bf0c      	ite	eq
 8007384:	2301      	moveq	r3, #1
 8007386:	2300      	movne	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	461a      	mov	r2, r3
 800738c:	79fb      	ldrb	r3, [r7, #7]
 800738e:	429a      	cmp	r2, r3
 8007390:	f43f af48 	beq.w	8007224 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3770      	adds	r7, #112	@ 0x70
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073a0:	b084      	sub	sp, #16
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	f107 001c 	add.w	r0, r7, #28
 80073ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d120      	bne.n	80073fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68da      	ldr	r2, [r3, #12]
 80073c8:	4b20      	ldr	r3, [pc, #128]	@ (800744c <USB_CoreInit+0xac>)
 80073ca:	4013      	ands	r3, r2
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d105      	bne.n	80073ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fa96 	bl	8007920 <USB_CoreReset>
 80073f4:	4603      	mov	r3, r0
 80073f6:	73fb      	strb	r3, [r7, #15]
 80073f8:	e010      	b.n	800741c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fa8a 	bl	8007920 <USB_CoreReset>
 800740c:	4603      	mov	r3, r0
 800740e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007414:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800741c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741e:	2b01      	cmp	r3, #1
 8007420:	d10b      	bne.n	800743a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f043 0206 	orr.w	r2, r3, #6
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f043 0220 	orr.w	r2, r3, #32
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007446:	b004      	add	sp, #16
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	ffbdffbf 	.word	0xffbdffbf

08007450 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f023 0201 	bic.w	r2, r3, #1
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	460b      	mov	r3, r1
 800747c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800747e:	2300      	movs	r3, #0
 8007480:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800748e:	78fb      	ldrb	r3, [r7, #3]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d115      	bne.n	80074c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074a0:	2001      	movs	r0, #1
 80074a2:	f7fb fd59 	bl	8002f58 <HAL_Delay>
      ms++;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3301      	adds	r3, #1
 80074aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fa29 	bl	8007904 <USB_GetMode>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d01e      	beq.n	80074f6 <USB_SetCurrentMode+0x84>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2b31      	cmp	r3, #49	@ 0x31
 80074bc:	d9f0      	bls.n	80074a0 <USB_SetCurrentMode+0x2e>
 80074be:	e01a      	b.n	80074f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074c0:	78fb      	ldrb	r3, [r7, #3]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d115      	bne.n	80074f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074d2:	2001      	movs	r0, #1
 80074d4:	f7fb fd40 	bl	8002f58 <HAL_Delay>
      ms++;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3301      	adds	r3, #1
 80074dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fa10 	bl	8007904 <USB_GetMode>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <USB_SetCurrentMode+0x84>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b31      	cmp	r3, #49	@ 0x31
 80074ee:	d9f0      	bls.n	80074d2 <USB_SetCurrentMode+0x60>
 80074f0:	e001      	b.n	80074f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e005      	b.n	8007502 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b32      	cmp	r3, #50	@ 0x32
 80074fa:	d101      	bne.n	8007500 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e000      	b.n	8007502 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800750c:	b084      	sub	sp, #16
 800750e:	b580      	push	{r7, lr}
 8007510:	b086      	sub	sp, #24
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800751a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007526:	2300      	movs	r3, #0
 8007528:	613b      	str	r3, [r7, #16]
 800752a:	e009      	b.n	8007540 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	3340      	adds	r3, #64	@ 0x40
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	2200      	movs	r2, #0
 8007538:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	3301      	adds	r3, #1
 800753e:	613b      	str	r3, [r7, #16]
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	2b0e      	cmp	r3, #14
 8007544:	d9f2      	bls.n	800752c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007548:	2b00      	cmp	r3, #0
 800754a:	d11c      	bne.n	8007586 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800755a:	f043 0302 	orr.w	r3, r3, #2
 800755e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007564:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	e005      	b.n	8007592 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007598:	461a      	mov	r2, r3
 800759a:	2300      	movs	r3, #0
 800759c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075a4:	4619      	mov	r1, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ac:	461a      	mov	r2, r3
 80075ae:	680b      	ldr	r3, [r1, #0]
 80075b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d10c      	bne.n	80075d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80075b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d104      	bne.n	80075c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075be:	2100      	movs	r1, #0
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f965 	bl	8007890 <USB_SetDevSpeed>
 80075c6:	e008      	b.n	80075da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80075c8:	2101      	movs	r1, #1
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f960 	bl	8007890 <USB_SetDevSpeed>
 80075d0:	e003      	b.n	80075da <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075d2:	2103      	movs	r1, #3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f95b 	bl	8007890 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075da:	2110      	movs	r1, #16
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f8f3 	bl	80077c8 <USB_FlushTxFifo>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f91f 	bl	8007830 <USB_FlushRxFifo>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007602:	461a      	mov	r2, r3
 8007604:	2300      	movs	r3, #0
 8007606:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800760e:	461a      	mov	r2, r3
 8007610:	2300      	movs	r3, #0
 8007612:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800761a:	461a      	mov	r2, r3
 800761c:	2300      	movs	r3, #0
 800761e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007620:	2300      	movs	r3, #0
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	e043      	b.n	80076ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007638:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800763c:	d118      	bne.n	8007670 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007650:	461a      	mov	r2, r3
 8007652:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	e013      	b.n	8007682 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007666:	461a      	mov	r2, r3
 8007668:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	e008      	b.n	8007682 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800767c:	461a      	mov	r2, r3
 800767e:	2300      	movs	r3, #0
 8007680:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800768e:	461a      	mov	r2, r3
 8007690:	2300      	movs	r3, #0
 8007692:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a0:	461a      	mov	r2, r3
 80076a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80076a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	3301      	adds	r3, #1
 80076ac:	613b      	str	r3, [r7, #16]
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d3b7      	bcc.n	8007626 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076b6:	2300      	movs	r3, #0
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	e043      	b.n	8007744 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076d2:	d118      	bne.n	8007706 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10a      	bne.n	80076f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e6:	461a      	mov	r2, r3
 80076e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80076ec:	6013      	str	r3, [r2, #0]
 80076ee:	e013      	b.n	8007718 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076fc:	461a      	mov	r2, r3
 80076fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007702:	6013      	str	r3, [r2, #0]
 8007704:	e008      	b.n	8007718 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007712:	461a      	mov	r2, r3
 8007714:	2300      	movs	r3, #0
 8007716:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007724:	461a      	mov	r2, r3
 8007726:	2300      	movs	r3, #0
 8007728:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	4413      	add	r3, r2
 8007732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007736:	461a      	mov	r2, r3
 8007738:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800773c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	3301      	adds	r3, #1
 8007742:	613b      	str	r3, [r7, #16]
 8007744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	429a      	cmp	r2, r3
 800774a:	d3b7      	bcc.n	80076bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800775a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800775e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800776c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800776e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007770:	2b00      	cmp	r3, #0
 8007772:	d105      	bne.n	8007780 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	f043 0210 	orr.w	r2, r3, #16
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	699a      	ldr	r2, [r3, #24]
 8007784:	4b0e      	ldr	r3, [pc, #56]	@ (80077c0 <USB_DevInit+0x2b4>)
 8007786:	4313      	orrs	r3, r2
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800778c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800778e:	2b00      	cmp	r3, #0
 8007790:	d005      	beq.n	800779e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	f043 0208 	orr.w	r2, r3, #8
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800779e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d105      	bne.n	80077b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	699a      	ldr	r2, [r3, #24]
 80077a8:	4b06      	ldr	r3, [pc, #24]	@ (80077c4 <USB_DevInit+0x2b8>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077bc:	b004      	add	sp, #16
 80077be:	4770      	bx	lr
 80077c0:	803c3800 	.word	0x803c3800
 80077c4:	40000004 	.word	0x40000004

080077c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3301      	adds	r3, #1
 80077da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4a13      	ldr	r2, [pc, #76]	@ (800782c <USB_FlushTxFifo+0x64>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d901      	bls.n	80077e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e01b      	b.n	8007820 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	daf2      	bge.n	80077d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80077f0:	2300      	movs	r3, #0
 80077f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	019b      	lsls	r3, r3, #6
 80077f8:	f043 0220 	orr.w	r2, r3, #32
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3301      	adds	r3, #1
 8007804:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	4a08      	ldr	r2, [pc, #32]	@ (800782c <USB_FlushTxFifo+0x64>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d901      	bls.n	8007812 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e006      	b.n	8007820 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b20      	cmp	r3, #32
 800781c:	d0f0      	beq.n	8007800 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	00030d40 	.word	0x00030d40

08007830 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	3301      	adds	r3, #1
 8007840:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4a11      	ldr	r2, [pc, #68]	@ (800788c <USB_FlushRxFifo+0x5c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d901      	bls.n	800784e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e018      	b.n	8007880 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	daf2      	bge.n	800783c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2210      	movs	r2, #16
 800785e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	3301      	adds	r3, #1
 8007864:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4a08      	ldr	r2, [pc, #32]	@ (800788c <USB_FlushRxFifo+0x5c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d901      	bls.n	8007872 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e006      	b.n	8007880 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	f003 0310 	and.w	r3, r3, #16
 800787a:	2b10      	cmp	r3, #16
 800787c:	d0f0      	beq.n	8007860 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	00030d40 	.word	0x00030d40

08007890 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	78fb      	ldrb	r3, [r7, #3]
 80078aa:	68f9      	ldr	r1, [r7, #12]
 80078ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078b0:	4313      	orrs	r3, r2
 80078b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b085      	sub	sp, #20
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80078dc:	f023 0303 	bic.w	r3, r3, #3
 80078e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078f0:	f043 0302 	orr.w	r3, r3, #2
 80078f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	f003 0301 	and.w	r3, r3, #1
}
 8007914:	4618      	mov	r0, r3
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3301      	adds	r3, #1
 8007930:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	4a13      	ldr	r2, [pc, #76]	@ (8007984 <USB_CoreReset+0x64>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d901      	bls.n	800793e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e01b      	b.n	8007976 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	daf2      	bge.n	800792c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	f043 0201 	orr.w	r2, r3, #1
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3301      	adds	r3, #1
 800795a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4a09      	ldr	r2, [pc, #36]	@ (8007984 <USB_CoreReset+0x64>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d901      	bls.n	8007968 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e006      	b.n	8007976 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b01      	cmp	r3, #1
 8007972:	d0f0      	beq.n	8007956 <USB_CoreReset+0x36>

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	00030d40 	.word	0x00030d40

08007988 <std>:
 8007988:	2300      	movs	r3, #0
 800798a:	b510      	push	{r4, lr}
 800798c:	4604      	mov	r4, r0
 800798e:	e9c0 3300 	strd	r3, r3, [r0]
 8007992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007996:	6083      	str	r3, [r0, #8]
 8007998:	8181      	strh	r1, [r0, #12]
 800799a:	6643      	str	r3, [r0, #100]	@ 0x64
 800799c:	81c2      	strh	r2, [r0, #14]
 800799e:	6183      	str	r3, [r0, #24]
 80079a0:	4619      	mov	r1, r3
 80079a2:	2208      	movs	r2, #8
 80079a4:	305c      	adds	r0, #92	@ 0x5c
 80079a6:	f000 f941 	bl	8007c2c <memset>
 80079aa:	4b0d      	ldr	r3, [pc, #52]	@ (80079e0 <std+0x58>)
 80079ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80079ae:	4b0d      	ldr	r3, [pc, #52]	@ (80079e4 <std+0x5c>)
 80079b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80079b2:	4b0d      	ldr	r3, [pc, #52]	@ (80079e8 <std+0x60>)
 80079b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80079b6:	4b0d      	ldr	r3, [pc, #52]	@ (80079ec <std+0x64>)
 80079b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80079ba:	4b0d      	ldr	r3, [pc, #52]	@ (80079f0 <std+0x68>)
 80079bc:	6224      	str	r4, [r4, #32]
 80079be:	429c      	cmp	r4, r3
 80079c0:	d006      	beq.n	80079d0 <std+0x48>
 80079c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80079c6:	4294      	cmp	r4, r2
 80079c8:	d002      	beq.n	80079d0 <std+0x48>
 80079ca:	33d0      	adds	r3, #208	@ 0xd0
 80079cc:	429c      	cmp	r4, r3
 80079ce:	d105      	bne.n	80079dc <std+0x54>
 80079d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80079d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079d8:	f000 b95a 	b.w	8007c90 <__retarget_lock_init_recursive>
 80079dc:	bd10      	pop	{r4, pc}
 80079de:	bf00      	nop
 80079e0:	08008799 	.word	0x08008799
 80079e4:	080087bb 	.word	0x080087bb
 80079e8:	080087f3 	.word	0x080087f3
 80079ec:	08008817 	.word	0x08008817
 80079f0:	20004d70 	.word	0x20004d70

080079f4 <stdio_exit_handler>:
 80079f4:	4a02      	ldr	r2, [pc, #8]	@ (8007a00 <stdio_exit_handler+0xc>)
 80079f6:	4903      	ldr	r1, [pc, #12]	@ (8007a04 <stdio_exit_handler+0x10>)
 80079f8:	4803      	ldr	r0, [pc, #12]	@ (8007a08 <stdio_exit_handler+0x14>)
 80079fa:	f000 b869 	b.w	8007ad0 <_fwalk_sglue>
 80079fe:	bf00      	nop
 8007a00:	20000024 	.word	0x20000024
 8007a04:	08008731 	.word	0x08008731
 8007a08:	20000034 	.word	0x20000034

08007a0c <cleanup_stdio>:
 8007a0c:	6841      	ldr	r1, [r0, #4]
 8007a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a40 <cleanup_stdio+0x34>)
 8007a10:	4299      	cmp	r1, r3
 8007a12:	b510      	push	{r4, lr}
 8007a14:	4604      	mov	r4, r0
 8007a16:	d001      	beq.n	8007a1c <cleanup_stdio+0x10>
 8007a18:	f000 fe8a 	bl	8008730 <_fflush_r>
 8007a1c:	68a1      	ldr	r1, [r4, #8]
 8007a1e:	4b09      	ldr	r3, [pc, #36]	@ (8007a44 <cleanup_stdio+0x38>)
 8007a20:	4299      	cmp	r1, r3
 8007a22:	d002      	beq.n	8007a2a <cleanup_stdio+0x1e>
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 fe83 	bl	8008730 <_fflush_r>
 8007a2a:	68e1      	ldr	r1, [r4, #12]
 8007a2c:	4b06      	ldr	r3, [pc, #24]	@ (8007a48 <cleanup_stdio+0x3c>)
 8007a2e:	4299      	cmp	r1, r3
 8007a30:	d004      	beq.n	8007a3c <cleanup_stdio+0x30>
 8007a32:	4620      	mov	r0, r4
 8007a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a38:	f000 be7a 	b.w	8008730 <_fflush_r>
 8007a3c:	bd10      	pop	{r4, pc}
 8007a3e:	bf00      	nop
 8007a40:	20004d70 	.word	0x20004d70
 8007a44:	20004dd8 	.word	0x20004dd8
 8007a48:	20004e40 	.word	0x20004e40

08007a4c <global_stdio_init.part.0>:
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a7c <global_stdio_init.part.0+0x30>)
 8007a50:	4c0b      	ldr	r4, [pc, #44]	@ (8007a80 <global_stdio_init.part.0+0x34>)
 8007a52:	4a0c      	ldr	r2, [pc, #48]	@ (8007a84 <global_stdio_init.part.0+0x38>)
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	4620      	mov	r0, r4
 8007a58:	2200      	movs	r2, #0
 8007a5a:	2104      	movs	r1, #4
 8007a5c:	f7ff ff94 	bl	8007988 <std>
 8007a60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a64:	2201      	movs	r2, #1
 8007a66:	2109      	movs	r1, #9
 8007a68:	f7ff ff8e 	bl	8007988 <std>
 8007a6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a70:	2202      	movs	r2, #2
 8007a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a76:	2112      	movs	r1, #18
 8007a78:	f7ff bf86 	b.w	8007988 <std>
 8007a7c:	20004ea8 	.word	0x20004ea8
 8007a80:	20004d70 	.word	0x20004d70
 8007a84:	080079f5 	.word	0x080079f5

08007a88 <__sfp_lock_acquire>:
 8007a88:	4801      	ldr	r0, [pc, #4]	@ (8007a90 <__sfp_lock_acquire+0x8>)
 8007a8a:	f000 b902 	b.w	8007c92 <__retarget_lock_acquire_recursive>
 8007a8e:	bf00      	nop
 8007a90:	20004ead 	.word	0x20004ead

08007a94 <__sfp_lock_release>:
 8007a94:	4801      	ldr	r0, [pc, #4]	@ (8007a9c <__sfp_lock_release+0x8>)
 8007a96:	f000 b8fd 	b.w	8007c94 <__retarget_lock_release_recursive>
 8007a9a:	bf00      	nop
 8007a9c:	20004ead 	.word	0x20004ead

08007aa0 <__sinit>:
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	f7ff fff0 	bl	8007a88 <__sfp_lock_acquire>
 8007aa8:	6a23      	ldr	r3, [r4, #32]
 8007aaa:	b11b      	cbz	r3, 8007ab4 <__sinit+0x14>
 8007aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ab0:	f7ff bff0 	b.w	8007a94 <__sfp_lock_release>
 8007ab4:	4b04      	ldr	r3, [pc, #16]	@ (8007ac8 <__sinit+0x28>)
 8007ab6:	6223      	str	r3, [r4, #32]
 8007ab8:	4b04      	ldr	r3, [pc, #16]	@ (8007acc <__sinit+0x2c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1f5      	bne.n	8007aac <__sinit+0xc>
 8007ac0:	f7ff ffc4 	bl	8007a4c <global_stdio_init.part.0>
 8007ac4:	e7f2      	b.n	8007aac <__sinit+0xc>
 8007ac6:	bf00      	nop
 8007ac8:	08007a0d 	.word	0x08007a0d
 8007acc:	20004ea8 	.word	0x20004ea8

08007ad0 <_fwalk_sglue>:
 8007ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad4:	4607      	mov	r7, r0
 8007ad6:	4688      	mov	r8, r1
 8007ad8:	4614      	mov	r4, r2
 8007ada:	2600      	movs	r6, #0
 8007adc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ae0:	f1b9 0901 	subs.w	r9, r9, #1
 8007ae4:	d505      	bpl.n	8007af2 <_fwalk_sglue+0x22>
 8007ae6:	6824      	ldr	r4, [r4, #0]
 8007ae8:	2c00      	cmp	r4, #0
 8007aea:	d1f7      	bne.n	8007adc <_fwalk_sglue+0xc>
 8007aec:	4630      	mov	r0, r6
 8007aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007af2:	89ab      	ldrh	r3, [r5, #12]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d907      	bls.n	8007b08 <_fwalk_sglue+0x38>
 8007af8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007afc:	3301      	adds	r3, #1
 8007afe:	d003      	beq.n	8007b08 <_fwalk_sglue+0x38>
 8007b00:	4629      	mov	r1, r5
 8007b02:	4638      	mov	r0, r7
 8007b04:	47c0      	blx	r8
 8007b06:	4306      	orrs	r6, r0
 8007b08:	3568      	adds	r5, #104	@ 0x68
 8007b0a:	e7e9      	b.n	8007ae0 <_fwalk_sglue+0x10>

08007b0c <_vsiprintf_r>:
 8007b0c:	b500      	push	{lr}
 8007b0e:	b09b      	sub	sp, #108	@ 0x6c
 8007b10:	9100      	str	r1, [sp, #0]
 8007b12:	9104      	str	r1, [sp, #16]
 8007b14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007b18:	9105      	str	r1, [sp, #20]
 8007b1a:	9102      	str	r1, [sp, #8]
 8007b1c:	4905      	ldr	r1, [pc, #20]	@ (8007b34 <_vsiprintf_r+0x28>)
 8007b1e:	9103      	str	r1, [sp, #12]
 8007b20:	4669      	mov	r1, sp
 8007b22:	f000 f913 	bl	8007d4c <_svfiprintf_r>
 8007b26:	9b00      	ldr	r3, [sp, #0]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	701a      	strb	r2, [r3, #0]
 8007b2c:	b01b      	add	sp, #108	@ 0x6c
 8007b2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b32:	bf00      	nop
 8007b34:	ffff0208 	.word	0xffff0208

08007b38 <vsiprintf>:
 8007b38:	4613      	mov	r3, r2
 8007b3a:	460a      	mov	r2, r1
 8007b3c:	4601      	mov	r1, r0
 8007b3e:	4802      	ldr	r0, [pc, #8]	@ (8007b48 <vsiprintf+0x10>)
 8007b40:	6800      	ldr	r0, [r0, #0]
 8007b42:	f7ff bfe3 	b.w	8007b0c <_vsiprintf_r>
 8007b46:	bf00      	nop
 8007b48:	20000030 	.word	0x20000030

08007b4c <iprintf>:
 8007b4c:	b40f      	push	{r0, r1, r2, r3}
 8007b4e:	b507      	push	{r0, r1, r2, lr}
 8007b50:	4906      	ldr	r1, [pc, #24]	@ (8007b6c <iprintf+0x20>)
 8007b52:	ab04      	add	r3, sp, #16
 8007b54:	6808      	ldr	r0, [r1, #0]
 8007b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b5a:	6881      	ldr	r1, [r0, #8]
 8007b5c:	9301      	str	r3, [sp, #4]
 8007b5e:	f000 fa1b 	bl	8007f98 <_vfiprintf_r>
 8007b62:	b003      	add	sp, #12
 8007b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b68:	b004      	add	sp, #16
 8007b6a:	4770      	bx	lr
 8007b6c:	20000030 	.word	0x20000030

08007b70 <_puts_r>:
 8007b70:	6a03      	ldr	r3, [r0, #32]
 8007b72:	b570      	push	{r4, r5, r6, lr}
 8007b74:	6884      	ldr	r4, [r0, #8]
 8007b76:	4605      	mov	r5, r0
 8007b78:	460e      	mov	r6, r1
 8007b7a:	b90b      	cbnz	r3, 8007b80 <_puts_r+0x10>
 8007b7c:	f7ff ff90 	bl	8007aa0 <__sinit>
 8007b80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b82:	07db      	lsls	r3, r3, #31
 8007b84:	d405      	bmi.n	8007b92 <_puts_r+0x22>
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	0598      	lsls	r0, r3, #22
 8007b8a:	d402      	bmi.n	8007b92 <_puts_r+0x22>
 8007b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b8e:	f000 f880 	bl	8007c92 <__retarget_lock_acquire_recursive>
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	0719      	lsls	r1, r3, #28
 8007b96:	d502      	bpl.n	8007b9e <_puts_r+0x2e>
 8007b98:	6923      	ldr	r3, [r4, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d135      	bne.n	8007c0a <_puts_r+0x9a>
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f000 fea9 	bl	80088f8 <__swsetup_r>
 8007ba6:	b380      	cbz	r0, 8007c0a <_puts_r+0x9a>
 8007ba8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007bac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bae:	07da      	lsls	r2, r3, #31
 8007bb0:	d405      	bmi.n	8007bbe <_puts_r+0x4e>
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	059b      	lsls	r3, r3, #22
 8007bb6:	d402      	bmi.n	8007bbe <_puts_r+0x4e>
 8007bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bba:	f000 f86b 	bl	8007c94 <__retarget_lock_release_recursive>
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	bd70      	pop	{r4, r5, r6, pc}
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	da04      	bge.n	8007bd0 <_puts_r+0x60>
 8007bc6:	69a2      	ldr	r2, [r4, #24]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	dc17      	bgt.n	8007bfc <_puts_r+0x8c>
 8007bcc:	290a      	cmp	r1, #10
 8007bce:	d015      	beq.n	8007bfc <_puts_r+0x8c>
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	6022      	str	r2, [r4, #0]
 8007bd6:	7019      	strb	r1, [r3, #0]
 8007bd8:	68a3      	ldr	r3, [r4, #8]
 8007bda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bde:	3b01      	subs	r3, #1
 8007be0:	60a3      	str	r3, [r4, #8]
 8007be2:	2900      	cmp	r1, #0
 8007be4:	d1ed      	bne.n	8007bc2 <_puts_r+0x52>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	da11      	bge.n	8007c0e <_puts_r+0x9e>
 8007bea:	4622      	mov	r2, r4
 8007bec:	210a      	movs	r1, #10
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 fe43 	bl	800887a <__swbuf_r>
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d0d7      	beq.n	8007ba8 <_puts_r+0x38>
 8007bf8:	250a      	movs	r5, #10
 8007bfa:	e7d7      	b.n	8007bac <_puts_r+0x3c>
 8007bfc:	4622      	mov	r2, r4
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f000 fe3b 	bl	800887a <__swbuf_r>
 8007c04:	3001      	adds	r0, #1
 8007c06:	d1e7      	bne.n	8007bd8 <_puts_r+0x68>
 8007c08:	e7ce      	b.n	8007ba8 <_puts_r+0x38>
 8007c0a:	3e01      	subs	r6, #1
 8007c0c:	e7e4      	b.n	8007bd8 <_puts_r+0x68>
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	6022      	str	r2, [r4, #0]
 8007c14:	220a      	movs	r2, #10
 8007c16:	701a      	strb	r2, [r3, #0]
 8007c18:	e7ee      	b.n	8007bf8 <_puts_r+0x88>
	...

08007c1c <puts>:
 8007c1c:	4b02      	ldr	r3, [pc, #8]	@ (8007c28 <puts+0xc>)
 8007c1e:	4601      	mov	r1, r0
 8007c20:	6818      	ldr	r0, [r3, #0]
 8007c22:	f7ff bfa5 	b.w	8007b70 <_puts_r>
 8007c26:	bf00      	nop
 8007c28:	20000030 	.word	0x20000030

08007c2c <memset>:
 8007c2c:	4402      	add	r2, r0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d100      	bne.n	8007c36 <memset+0xa>
 8007c34:	4770      	bx	lr
 8007c36:	f803 1b01 	strb.w	r1, [r3], #1
 8007c3a:	e7f9      	b.n	8007c30 <memset+0x4>

08007c3c <__errno>:
 8007c3c:	4b01      	ldr	r3, [pc, #4]	@ (8007c44 <__errno+0x8>)
 8007c3e:	6818      	ldr	r0, [r3, #0]
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	20000030 	.word	0x20000030

08007c48 <__libc_init_array>:
 8007c48:	b570      	push	{r4, r5, r6, lr}
 8007c4a:	4d0d      	ldr	r5, [pc, #52]	@ (8007c80 <__libc_init_array+0x38>)
 8007c4c:	4c0d      	ldr	r4, [pc, #52]	@ (8007c84 <__libc_init_array+0x3c>)
 8007c4e:	1b64      	subs	r4, r4, r5
 8007c50:	10a4      	asrs	r4, r4, #2
 8007c52:	2600      	movs	r6, #0
 8007c54:	42a6      	cmp	r6, r4
 8007c56:	d109      	bne.n	8007c6c <__libc_init_array+0x24>
 8007c58:	4d0b      	ldr	r5, [pc, #44]	@ (8007c88 <__libc_init_array+0x40>)
 8007c5a:	4c0c      	ldr	r4, [pc, #48]	@ (8007c8c <__libc_init_array+0x44>)
 8007c5c:	f000 fff6 	bl	8008c4c <_init>
 8007c60:	1b64      	subs	r4, r4, r5
 8007c62:	10a4      	asrs	r4, r4, #2
 8007c64:	2600      	movs	r6, #0
 8007c66:	42a6      	cmp	r6, r4
 8007c68:	d105      	bne.n	8007c76 <__libc_init_array+0x2e>
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c70:	4798      	blx	r3
 8007c72:	3601      	adds	r6, #1
 8007c74:	e7ee      	b.n	8007c54 <__libc_init_array+0xc>
 8007c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c7a:	4798      	blx	r3
 8007c7c:	3601      	adds	r6, #1
 8007c7e:	e7f2      	b.n	8007c66 <__libc_init_array+0x1e>
 8007c80:	08009aa4 	.word	0x08009aa4
 8007c84:	08009aa4 	.word	0x08009aa4
 8007c88:	08009aa4 	.word	0x08009aa4
 8007c8c:	08009acc 	.word	0x08009acc

08007c90 <__retarget_lock_init_recursive>:
 8007c90:	4770      	bx	lr

08007c92 <__retarget_lock_acquire_recursive>:
 8007c92:	4770      	bx	lr

08007c94 <__retarget_lock_release_recursive>:
 8007c94:	4770      	bx	lr

08007c96 <__ssputs_r>:
 8007c96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c9a:	688e      	ldr	r6, [r1, #8]
 8007c9c:	461f      	mov	r7, r3
 8007c9e:	42be      	cmp	r6, r7
 8007ca0:	680b      	ldr	r3, [r1, #0]
 8007ca2:	4682      	mov	sl, r0
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	4690      	mov	r8, r2
 8007ca8:	d82d      	bhi.n	8007d06 <__ssputs_r+0x70>
 8007caa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cae:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007cb2:	d026      	beq.n	8007d02 <__ssputs_r+0x6c>
 8007cb4:	6965      	ldr	r5, [r4, #20]
 8007cb6:	6909      	ldr	r1, [r1, #16]
 8007cb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cbc:	eba3 0901 	sub.w	r9, r3, r1
 8007cc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cc4:	1c7b      	adds	r3, r7, #1
 8007cc6:	444b      	add	r3, r9
 8007cc8:	106d      	asrs	r5, r5, #1
 8007cca:	429d      	cmp	r5, r3
 8007ccc:	bf38      	it	cc
 8007cce:	461d      	movcc	r5, r3
 8007cd0:	0553      	lsls	r3, r2, #21
 8007cd2:	d527      	bpl.n	8007d24 <__ssputs_r+0x8e>
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	f000 fa99 	bl	800820c <_malloc_r>
 8007cda:	4606      	mov	r6, r0
 8007cdc:	b360      	cbz	r0, 8007d38 <__ssputs_r+0xa2>
 8007cde:	6921      	ldr	r1, [r4, #16]
 8007ce0:	464a      	mov	r2, r9
 8007ce2:	f000 ff53 	bl	8008b8c <memcpy>
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cf0:	81a3      	strh	r3, [r4, #12]
 8007cf2:	6126      	str	r6, [r4, #16]
 8007cf4:	6165      	str	r5, [r4, #20]
 8007cf6:	444e      	add	r6, r9
 8007cf8:	eba5 0509 	sub.w	r5, r5, r9
 8007cfc:	6026      	str	r6, [r4, #0]
 8007cfe:	60a5      	str	r5, [r4, #8]
 8007d00:	463e      	mov	r6, r7
 8007d02:	42be      	cmp	r6, r7
 8007d04:	d900      	bls.n	8007d08 <__ssputs_r+0x72>
 8007d06:	463e      	mov	r6, r7
 8007d08:	6820      	ldr	r0, [r4, #0]
 8007d0a:	4632      	mov	r2, r6
 8007d0c:	4641      	mov	r1, r8
 8007d0e:	f000 feab 	bl	8008a68 <memmove>
 8007d12:	68a3      	ldr	r3, [r4, #8]
 8007d14:	1b9b      	subs	r3, r3, r6
 8007d16:	60a3      	str	r3, [r4, #8]
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	4433      	add	r3, r6
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	2000      	movs	r0, #0
 8007d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d24:	462a      	mov	r2, r5
 8007d26:	f000 fd7a 	bl	800881e <_realloc_r>
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d1e0      	bne.n	8007cf2 <__ssputs_r+0x5c>
 8007d30:	6921      	ldr	r1, [r4, #16]
 8007d32:	4650      	mov	r0, sl
 8007d34:	f000 ff38 	bl	8008ba8 <_free_r>
 8007d38:	230c      	movs	r3, #12
 8007d3a:	f8ca 3000 	str.w	r3, [sl]
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d44:	81a3      	strh	r3, [r4, #12]
 8007d46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d4a:	e7e9      	b.n	8007d20 <__ssputs_r+0x8a>

08007d4c <_svfiprintf_r>:
 8007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	4698      	mov	r8, r3
 8007d52:	898b      	ldrh	r3, [r1, #12]
 8007d54:	061b      	lsls	r3, r3, #24
 8007d56:	b09d      	sub	sp, #116	@ 0x74
 8007d58:	4607      	mov	r7, r0
 8007d5a:	460d      	mov	r5, r1
 8007d5c:	4614      	mov	r4, r2
 8007d5e:	d510      	bpl.n	8007d82 <_svfiprintf_r+0x36>
 8007d60:	690b      	ldr	r3, [r1, #16]
 8007d62:	b973      	cbnz	r3, 8007d82 <_svfiprintf_r+0x36>
 8007d64:	2140      	movs	r1, #64	@ 0x40
 8007d66:	f000 fa51 	bl	800820c <_malloc_r>
 8007d6a:	6028      	str	r0, [r5, #0]
 8007d6c:	6128      	str	r0, [r5, #16]
 8007d6e:	b930      	cbnz	r0, 8007d7e <_svfiprintf_r+0x32>
 8007d70:	230c      	movs	r3, #12
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d78:	b01d      	add	sp, #116	@ 0x74
 8007d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7e:	2340      	movs	r3, #64	@ 0x40
 8007d80:	616b      	str	r3, [r5, #20]
 8007d82:	2300      	movs	r3, #0
 8007d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d86:	2320      	movs	r3, #32
 8007d88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d90:	2330      	movs	r3, #48	@ 0x30
 8007d92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f30 <_svfiprintf_r+0x1e4>
 8007d96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d9a:	f04f 0901 	mov.w	r9, #1
 8007d9e:	4623      	mov	r3, r4
 8007da0:	469a      	mov	sl, r3
 8007da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007da6:	b10a      	cbz	r2, 8007dac <_svfiprintf_r+0x60>
 8007da8:	2a25      	cmp	r2, #37	@ 0x25
 8007daa:	d1f9      	bne.n	8007da0 <_svfiprintf_r+0x54>
 8007dac:	ebba 0b04 	subs.w	fp, sl, r4
 8007db0:	d00b      	beq.n	8007dca <_svfiprintf_r+0x7e>
 8007db2:	465b      	mov	r3, fp
 8007db4:	4622      	mov	r2, r4
 8007db6:	4629      	mov	r1, r5
 8007db8:	4638      	mov	r0, r7
 8007dba:	f7ff ff6c 	bl	8007c96 <__ssputs_r>
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	f000 80a7 	beq.w	8007f12 <_svfiprintf_r+0x1c6>
 8007dc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dc6:	445a      	add	r2, fp
 8007dc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dca:	f89a 3000 	ldrb.w	r3, [sl]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 809f 	beq.w	8007f12 <_svfiprintf_r+0x1c6>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007dda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dde:	f10a 0a01 	add.w	sl, sl, #1
 8007de2:	9304      	str	r3, [sp, #16]
 8007de4:	9307      	str	r3, [sp, #28]
 8007de6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dea:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dec:	4654      	mov	r4, sl
 8007dee:	2205      	movs	r2, #5
 8007df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df4:	484e      	ldr	r0, [pc, #312]	@ (8007f30 <_svfiprintf_r+0x1e4>)
 8007df6:	f7f8 fa1b 	bl	8000230 <memchr>
 8007dfa:	9a04      	ldr	r2, [sp, #16]
 8007dfc:	b9d8      	cbnz	r0, 8007e36 <_svfiprintf_r+0xea>
 8007dfe:	06d0      	lsls	r0, r2, #27
 8007e00:	bf44      	itt	mi
 8007e02:	2320      	movmi	r3, #32
 8007e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e08:	0711      	lsls	r1, r2, #28
 8007e0a:	bf44      	itt	mi
 8007e0c:	232b      	movmi	r3, #43	@ 0x2b
 8007e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e12:	f89a 3000 	ldrb.w	r3, [sl]
 8007e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e18:	d015      	beq.n	8007e46 <_svfiprintf_r+0xfa>
 8007e1a:	9a07      	ldr	r2, [sp, #28]
 8007e1c:	4654      	mov	r4, sl
 8007e1e:	2000      	movs	r0, #0
 8007e20:	f04f 0c0a 	mov.w	ip, #10
 8007e24:	4621      	mov	r1, r4
 8007e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e2a:	3b30      	subs	r3, #48	@ 0x30
 8007e2c:	2b09      	cmp	r3, #9
 8007e2e:	d94b      	bls.n	8007ec8 <_svfiprintf_r+0x17c>
 8007e30:	b1b0      	cbz	r0, 8007e60 <_svfiprintf_r+0x114>
 8007e32:	9207      	str	r2, [sp, #28]
 8007e34:	e014      	b.n	8007e60 <_svfiprintf_r+0x114>
 8007e36:	eba0 0308 	sub.w	r3, r0, r8
 8007e3a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	9304      	str	r3, [sp, #16]
 8007e42:	46a2      	mov	sl, r4
 8007e44:	e7d2      	b.n	8007dec <_svfiprintf_r+0xa0>
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	1d19      	adds	r1, r3, #4
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	9103      	str	r1, [sp, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	bfbb      	ittet	lt
 8007e52:	425b      	neglt	r3, r3
 8007e54:	f042 0202 	orrlt.w	r2, r2, #2
 8007e58:	9307      	strge	r3, [sp, #28]
 8007e5a:	9307      	strlt	r3, [sp, #28]
 8007e5c:	bfb8      	it	lt
 8007e5e:	9204      	strlt	r2, [sp, #16]
 8007e60:	7823      	ldrb	r3, [r4, #0]
 8007e62:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e64:	d10a      	bne.n	8007e7c <_svfiprintf_r+0x130>
 8007e66:	7863      	ldrb	r3, [r4, #1]
 8007e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e6a:	d132      	bne.n	8007ed2 <_svfiprintf_r+0x186>
 8007e6c:	9b03      	ldr	r3, [sp, #12]
 8007e6e:	1d1a      	adds	r2, r3, #4
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	9203      	str	r2, [sp, #12]
 8007e74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e78:	3402      	adds	r4, #2
 8007e7a:	9305      	str	r3, [sp, #20]
 8007e7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f40 <_svfiprintf_r+0x1f4>
 8007e80:	7821      	ldrb	r1, [r4, #0]
 8007e82:	2203      	movs	r2, #3
 8007e84:	4650      	mov	r0, sl
 8007e86:	f7f8 f9d3 	bl	8000230 <memchr>
 8007e8a:	b138      	cbz	r0, 8007e9c <_svfiprintf_r+0x150>
 8007e8c:	9b04      	ldr	r3, [sp, #16]
 8007e8e:	eba0 000a 	sub.w	r0, r0, sl
 8007e92:	2240      	movs	r2, #64	@ 0x40
 8007e94:	4082      	lsls	r2, r0
 8007e96:	4313      	orrs	r3, r2
 8007e98:	3401      	adds	r4, #1
 8007e9a:	9304      	str	r3, [sp, #16]
 8007e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea0:	4824      	ldr	r0, [pc, #144]	@ (8007f34 <_svfiprintf_r+0x1e8>)
 8007ea2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ea6:	2206      	movs	r2, #6
 8007ea8:	f7f8 f9c2 	bl	8000230 <memchr>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d036      	beq.n	8007f1e <_svfiprintf_r+0x1d2>
 8007eb0:	4b21      	ldr	r3, [pc, #132]	@ (8007f38 <_svfiprintf_r+0x1ec>)
 8007eb2:	bb1b      	cbnz	r3, 8007efc <_svfiprintf_r+0x1b0>
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	3307      	adds	r3, #7
 8007eb8:	f023 0307 	bic.w	r3, r3, #7
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	9303      	str	r3, [sp, #12]
 8007ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ec2:	4433      	add	r3, r6
 8007ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ec6:	e76a      	b.n	8007d9e <_svfiprintf_r+0x52>
 8007ec8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ecc:	460c      	mov	r4, r1
 8007ece:	2001      	movs	r0, #1
 8007ed0:	e7a8      	b.n	8007e24 <_svfiprintf_r+0xd8>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	3401      	adds	r4, #1
 8007ed6:	9305      	str	r3, [sp, #20]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	f04f 0c0a 	mov.w	ip, #10
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ee4:	3a30      	subs	r2, #48	@ 0x30
 8007ee6:	2a09      	cmp	r2, #9
 8007ee8:	d903      	bls.n	8007ef2 <_svfiprintf_r+0x1a6>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0c6      	beq.n	8007e7c <_svfiprintf_r+0x130>
 8007eee:	9105      	str	r1, [sp, #20]
 8007ef0:	e7c4      	b.n	8007e7c <_svfiprintf_r+0x130>
 8007ef2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e7f0      	b.n	8007ede <_svfiprintf_r+0x192>
 8007efc:	ab03      	add	r3, sp, #12
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	462a      	mov	r2, r5
 8007f02:	4b0e      	ldr	r3, [pc, #56]	@ (8007f3c <_svfiprintf_r+0x1f0>)
 8007f04:	a904      	add	r1, sp, #16
 8007f06:	4638      	mov	r0, r7
 8007f08:	f3af 8000 	nop.w
 8007f0c:	1c42      	adds	r2, r0, #1
 8007f0e:	4606      	mov	r6, r0
 8007f10:	d1d6      	bne.n	8007ec0 <_svfiprintf_r+0x174>
 8007f12:	89ab      	ldrh	r3, [r5, #12]
 8007f14:	065b      	lsls	r3, r3, #25
 8007f16:	f53f af2d 	bmi.w	8007d74 <_svfiprintf_r+0x28>
 8007f1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f1c:	e72c      	b.n	8007d78 <_svfiprintf_r+0x2c>
 8007f1e:	ab03      	add	r3, sp, #12
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	462a      	mov	r2, r5
 8007f24:	4b05      	ldr	r3, [pc, #20]	@ (8007f3c <_svfiprintf_r+0x1f0>)
 8007f26:	a904      	add	r1, sp, #16
 8007f28:	4638      	mov	r0, r7
 8007f2a:	f000 fa5d 	bl	80083e8 <_printf_i>
 8007f2e:	e7ed      	b.n	8007f0c <_svfiprintf_r+0x1c0>
 8007f30:	08009a68 	.word	0x08009a68
 8007f34:	08009a72 	.word	0x08009a72
 8007f38:	00000000 	.word	0x00000000
 8007f3c:	08007c97 	.word	0x08007c97
 8007f40:	08009a6e 	.word	0x08009a6e

08007f44 <__sfputc_r>:
 8007f44:	6893      	ldr	r3, [r2, #8]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	b410      	push	{r4}
 8007f4c:	6093      	str	r3, [r2, #8]
 8007f4e:	da08      	bge.n	8007f62 <__sfputc_r+0x1e>
 8007f50:	6994      	ldr	r4, [r2, #24]
 8007f52:	42a3      	cmp	r3, r4
 8007f54:	db01      	blt.n	8007f5a <__sfputc_r+0x16>
 8007f56:	290a      	cmp	r1, #10
 8007f58:	d103      	bne.n	8007f62 <__sfputc_r+0x1e>
 8007f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f5e:	f000 bc8c 	b.w	800887a <__swbuf_r>
 8007f62:	6813      	ldr	r3, [r2, #0]
 8007f64:	1c58      	adds	r0, r3, #1
 8007f66:	6010      	str	r0, [r2, #0]
 8007f68:	7019      	strb	r1, [r3, #0]
 8007f6a:	4608      	mov	r0, r1
 8007f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <__sfputs_r>:
 8007f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f74:	4606      	mov	r6, r0
 8007f76:	460f      	mov	r7, r1
 8007f78:	4614      	mov	r4, r2
 8007f7a:	18d5      	adds	r5, r2, r3
 8007f7c:	42ac      	cmp	r4, r5
 8007f7e:	d101      	bne.n	8007f84 <__sfputs_r+0x12>
 8007f80:	2000      	movs	r0, #0
 8007f82:	e007      	b.n	8007f94 <__sfputs_r+0x22>
 8007f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f88:	463a      	mov	r2, r7
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f7ff ffda 	bl	8007f44 <__sfputc_r>
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	d1f3      	bne.n	8007f7c <__sfputs_r+0xa>
 8007f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f98 <_vfiprintf_r>:
 8007f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	460d      	mov	r5, r1
 8007f9e:	b09d      	sub	sp, #116	@ 0x74
 8007fa0:	4614      	mov	r4, r2
 8007fa2:	4698      	mov	r8, r3
 8007fa4:	4606      	mov	r6, r0
 8007fa6:	b118      	cbz	r0, 8007fb0 <_vfiprintf_r+0x18>
 8007fa8:	6a03      	ldr	r3, [r0, #32]
 8007faa:	b90b      	cbnz	r3, 8007fb0 <_vfiprintf_r+0x18>
 8007fac:	f7ff fd78 	bl	8007aa0 <__sinit>
 8007fb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fb2:	07d9      	lsls	r1, r3, #31
 8007fb4:	d405      	bmi.n	8007fc2 <_vfiprintf_r+0x2a>
 8007fb6:	89ab      	ldrh	r3, [r5, #12]
 8007fb8:	059a      	lsls	r2, r3, #22
 8007fba:	d402      	bmi.n	8007fc2 <_vfiprintf_r+0x2a>
 8007fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fbe:	f7ff fe68 	bl	8007c92 <__retarget_lock_acquire_recursive>
 8007fc2:	89ab      	ldrh	r3, [r5, #12]
 8007fc4:	071b      	lsls	r3, r3, #28
 8007fc6:	d501      	bpl.n	8007fcc <_vfiprintf_r+0x34>
 8007fc8:	692b      	ldr	r3, [r5, #16]
 8007fca:	b99b      	cbnz	r3, 8007ff4 <_vfiprintf_r+0x5c>
 8007fcc:	4629      	mov	r1, r5
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f000 fc92 	bl	80088f8 <__swsetup_r>
 8007fd4:	b170      	cbz	r0, 8007ff4 <_vfiprintf_r+0x5c>
 8007fd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fd8:	07dc      	lsls	r4, r3, #31
 8007fda:	d504      	bpl.n	8007fe6 <_vfiprintf_r+0x4e>
 8007fdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fe0:	b01d      	add	sp, #116	@ 0x74
 8007fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe6:	89ab      	ldrh	r3, [r5, #12]
 8007fe8:	0598      	lsls	r0, r3, #22
 8007fea:	d4f7      	bmi.n	8007fdc <_vfiprintf_r+0x44>
 8007fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fee:	f7ff fe51 	bl	8007c94 <__retarget_lock_release_recursive>
 8007ff2:	e7f3      	b.n	8007fdc <_vfiprintf_r+0x44>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ffe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008002:	2330      	movs	r3, #48	@ 0x30
 8008004:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80081b4 <_vfiprintf_r+0x21c>
 8008008:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800800c:	f04f 0901 	mov.w	r9, #1
 8008010:	4623      	mov	r3, r4
 8008012:	469a      	mov	sl, r3
 8008014:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008018:	b10a      	cbz	r2, 800801e <_vfiprintf_r+0x86>
 800801a:	2a25      	cmp	r2, #37	@ 0x25
 800801c:	d1f9      	bne.n	8008012 <_vfiprintf_r+0x7a>
 800801e:	ebba 0b04 	subs.w	fp, sl, r4
 8008022:	d00b      	beq.n	800803c <_vfiprintf_r+0xa4>
 8008024:	465b      	mov	r3, fp
 8008026:	4622      	mov	r2, r4
 8008028:	4629      	mov	r1, r5
 800802a:	4630      	mov	r0, r6
 800802c:	f7ff ffa1 	bl	8007f72 <__sfputs_r>
 8008030:	3001      	adds	r0, #1
 8008032:	f000 80a7 	beq.w	8008184 <_vfiprintf_r+0x1ec>
 8008036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008038:	445a      	add	r2, fp
 800803a:	9209      	str	r2, [sp, #36]	@ 0x24
 800803c:	f89a 3000 	ldrb.w	r3, [sl]
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 809f 	beq.w	8008184 <_vfiprintf_r+0x1ec>
 8008046:	2300      	movs	r3, #0
 8008048:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800804c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008050:	f10a 0a01 	add.w	sl, sl, #1
 8008054:	9304      	str	r3, [sp, #16]
 8008056:	9307      	str	r3, [sp, #28]
 8008058:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800805c:	931a      	str	r3, [sp, #104]	@ 0x68
 800805e:	4654      	mov	r4, sl
 8008060:	2205      	movs	r2, #5
 8008062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008066:	4853      	ldr	r0, [pc, #332]	@ (80081b4 <_vfiprintf_r+0x21c>)
 8008068:	f7f8 f8e2 	bl	8000230 <memchr>
 800806c:	9a04      	ldr	r2, [sp, #16]
 800806e:	b9d8      	cbnz	r0, 80080a8 <_vfiprintf_r+0x110>
 8008070:	06d1      	lsls	r1, r2, #27
 8008072:	bf44      	itt	mi
 8008074:	2320      	movmi	r3, #32
 8008076:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800807a:	0713      	lsls	r3, r2, #28
 800807c:	bf44      	itt	mi
 800807e:	232b      	movmi	r3, #43	@ 0x2b
 8008080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008084:	f89a 3000 	ldrb.w	r3, [sl]
 8008088:	2b2a      	cmp	r3, #42	@ 0x2a
 800808a:	d015      	beq.n	80080b8 <_vfiprintf_r+0x120>
 800808c:	9a07      	ldr	r2, [sp, #28]
 800808e:	4654      	mov	r4, sl
 8008090:	2000      	movs	r0, #0
 8008092:	f04f 0c0a 	mov.w	ip, #10
 8008096:	4621      	mov	r1, r4
 8008098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800809c:	3b30      	subs	r3, #48	@ 0x30
 800809e:	2b09      	cmp	r3, #9
 80080a0:	d94b      	bls.n	800813a <_vfiprintf_r+0x1a2>
 80080a2:	b1b0      	cbz	r0, 80080d2 <_vfiprintf_r+0x13a>
 80080a4:	9207      	str	r2, [sp, #28]
 80080a6:	e014      	b.n	80080d2 <_vfiprintf_r+0x13a>
 80080a8:	eba0 0308 	sub.w	r3, r0, r8
 80080ac:	fa09 f303 	lsl.w	r3, r9, r3
 80080b0:	4313      	orrs	r3, r2
 80080b2:	9304      	str	r3, [sp, #16]
 80080b4:	46a2      	mov	sl, r4
 80080b6:	e7d2      	b.n	800805e <_vfiprintf_r+0xc6>
 80080b8:	9b03      	ldr	r3, [sp, #12]
 80080ba:	1d19      	adds	r1, r3, #4
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	9103      	str	r1, [sp, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bfbb      	ittet	lt
 80080c4:	425b      	neglt	r3, r3
 80080c6:	f042 0202 	orrlt.w	r2, r2, #2
 80080ca:	9307      	strge	r3, [sp, #28]
 80080cc:	9307      	strlt	r3, [sp, #28]
 80080ce:	bfb8      	it	lt
 80080d0:	9204      	strlt	r2, [sp, #16]
 80080d2:	7823      	ldrb	r3, [r4, #0]
 80080d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80080d6:	d10a      	bne.n	80080ee <_vfiprintf_r+0x156>
 80080d8:	7863      	ldrb	r3, [r4, #1]
 80080da:	2b2a      	cmp	r3, #42	@ 0x2a
 80080dc:	d132      	bne.n	8008144 <_vfiprintf_r+0x1ac>
 80080de:	9b03      	ldr	r3, [sp, #12]
 80080e0:	1d1a      	adds	r2, r3, #4
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	9203      	str	r2, [sp, #12]
 80080e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080ea:	3402      	adds	r4, #2
 80080ec:	9305      	str	r3, [sp, #20]
 80080ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80081c4 <_vfiprintf_r+0x22c>
 80080f2:	7821      	ldrb	r1, [r4, #0]
 80080f4:	2203      	movs	r2, #3
 80080f6:	4650      	mov	r0, sl
 80080f8:	f7f8 f89a 	bl	8000230 <memchr>
 80080fc:	b138      	cbz	r0, 800810e <_vfiprintf_r+0x176>
 80080fe:	9b04      	ldr	r3, [sp, #16]
 8008100:	eba0 000a 	sub.w	r0, r0, sl
 8008104:	2240      	movs	r2, #64	@ 0x40
 8008106:	4082      	lsls	r2, r0
 8008108:	4313      	orrs	r3, r2
 800810a:	3401      	adds	r4, #1
 800810c:	9304      	str	r3, [sp, #16]
 800810e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008112:	4829      	ldr	r0, [pc, #164]	@ (80081b8 <_vfiprintf_r+0x220>)
 8008114:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008118:	2206      	movs	r2, #6
 800811a:	f7f8 f889 	bl	8000230 <memchr>
 800811e:	2800      	cmp	r0, #0
 8008120:	d03f      	beq.n	80081a2 <_vfiprintf_r+0x20a>
 8008122:	4b26      	ldr	r3, [pc, #152]	@ (80081bc <_vfiprintf_r+0x224>)
 8008124:	bb1b      	cbnz	r3, 800816e <_vfiprintf_r+0x1d6>
 8008126:	9b03      	ldr	r3, [sp, #12]
 8008128:	3307      	adds	r3, #7
 800812a:	f023 0307 	bic.w	r3, r3, #7
 800812e:	3308      	adds	r3, #8
 8008130:	9303      	str	r3, [sp, #12]
 8008132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008134:	443b      	add	r3, r7
 8008136:	9309      	str	r3, [sp, #36]	@ 0x24
 8008138:	e76a      	b.n	8008010 <_vfiprintf_r+0x78>
 800813a:	fb0c 3202 	mla	r2, ip, r2, r3
 800813e:	460c      	mov	r4, r1
 8008140:	2001      	movs	r0, #1
 8008142:	e7a8      	b.n	8008096 <_vfiprintf_r+0xfe>
 8008144:	2300      	movs	r3, #0
 8008146:	3401      	adds	r4, #1
 8008148:	9305      	str	r3, [sp, #20]
 800814a:	4619      	mov	r1, r3
 800814c:	f04f 0c0a 	mov.w	ip, #10
 8008150:	4620      	mov	r0, r4
 8008152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008156:	3a30      	subs	r2, #48	@ 0x30
 8008158:	2a09      	cmp	r2, #9
 800815a:	d903      	bls.n	8008164 <_vfiprintf_r+0x1cc>
 800815c:	2b00      	cmp	r3, #0
 800815e:	d0c6      	beq.n	80080ee <_vfiprintf_r+0x156>
 8008160:	9105      	str	r1, [sp, #20]
 8008162:	e7c4      	b.n	80080ee <_vfiprintf_r+0x156>
 8008164:	fb0c 2101 	mla	r1, ip, r1, r2
 8008168:	4604      	mov	r4, r0
 800816a:	2301      	movs	r3, #1
 800816c:	e7f0      	b.n	8008150 <_vfiprintf_r+0x1b8>
 800816e:	ab03      	add	r3, sp, #12
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	462a      	mov	r2, r5
 8008174:	4b12      	ldr	r3, [pc, #72]	@ (80081c0 <_vfiprintf_r+0x228>)
 8008176:	a904      	add	r1, sp, #16
 8008178:	4630      	mov	r0, r6
 800817a:	f3af 8000 	nop.w
 800817e:	4607      	mov	r7, r0
 8008180:	1c78      	adds	r0, r7, #1
 8008182:	d1d6      	bne.n	8008132 <_vfiprintf_r+0x19a>
 8008184:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008186:	07d9      	lsls	r1, r3, #31
 8008188:	d405      	bmi.n	8008196 <_vfiprintf_r+0x1fe>
 800818a:	89ab      	ldrh	r3, [r5, #12]
 800818c:	059a      	lsls	r2, r3, #22
 800818e:	d402      	bmi.n	8008196 <_vfiprintf_r+0x1fe>
 8008190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008192:	f7ff fd7f 	bl	8007c94 <__retarget_lock_release_recursive>
 8008196:	89ab      	ldrh	r3, [r5, #12]
 8008198:	065b      	lsls	r3, r3, #25
 800819a:	f53f af1f 	bmi.w	8007fdc <_vfiprintf_r+0x44>
 800819e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081a0:	e71e      	b.n	8007fe0 <_vfiprintf_r+0x48>
 80081a2:	ab03      	add	r3, sp, #12
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	462a      	mov	r2, r5
 80081a8:	4b05      	ldr	r3, [pc, #20]	@ (80081c0 <_vfiprintf_r+0x228>)
 80081aa:	a904      	add	r1, sp, #16
 80081ac:	4630      	mov	r0, r6
 80081ae:	f000 f91b 	bl	80083e8 <_printf_i>
 80081b2:	e7e4      	b.n	800817e <_vfiprintf_r+0x1e6>
 80081b4:	08009a68 	.word	0x08009a68
 80081b8:	08009a72 	.word	0x08009a72
 80081bc:	00000000 	.word	0x00000000
 80081c0:	08007f73 	.word	0x08007f73
 80081c4:	08009a6e 	.word	0x08009a6e

080081c8 <sbrk_aligned>:
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	4e0f      	ldr	r6, [pc, #60]	@ (8008208 <sbrk_aligned+0x40>)
 80081cc:	460c      	mov	r4, r1
 80081ce:	6831      	ldr	r1, [r6, #0]
 80081d0:	4605      	mov	r5, r0
 80081d2:	b911      	cbnz	r1, 80081da <sbrk_aligned+0x12>
 80081d4:	f000 fcb8 	bl	8008b48 <_sbrk_r>
 80081d8:	6030      	str	r0, [r6, #0]
 80081da:	4621      	mov	r1, r4
 80081dc:	4628      	mov	r0, r5
 80081de:	f000 fcb3 	bl	8008b48 <_sbrk_r>
 80081e2:	1c43      	adds	r3, r0, #1
 80081e4:	d103      	bne.n	80081ee <sbrk_aligned+0x26>
 80081e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80081ea:	4620      	mov	r0, r4
 80081ec:	bd70      	pop	{r4, r5, r6, pc}
 80081ee:	1cc4      	adds	r4, r0, #3
 80081f0:	f024 0403 	bic.w	r4, r4, #3
 80081f4:	42a0      	cmp	r0, r4
 80081f6:	d0f8      	beq.n	80081ea <sbrk_aligned+0x22>
 80081f8:	1a21      	subs	r1, r4, r0
 80081fa:	4628      	mov	r0, r5
 80081fc:	f000 fca4 	bl	8008b48 <_sbrk_r>
 8008200:	3001      	adds	r0, #1
 8008202:	d1f2      	bne.n	80081ea <sbrk_aligned+0x22>
 8008204:	e7ef      	b.n	80081e6 <sbrk_aligned+0x1e>
 8008206:	bf00      	nop
 8008208:	20004eb0 	.word	0x20004eb0

0800820c <_malloc_r>:
 800820c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008210:	1ccd      	adds	r5, r1, #3
 8008212:	f025 0503 	bic.w	r5, r5, #3
 8008216:	3508      	adds	r5, #8
 8008218:	2d0c      	cmp	r5, #12
 800821a:	bf38      	it	cc
 800821c:	250c      	movcc	r5, #12
 800821e:	2d00      	cmp	r5, #0
 8008220:	4606      	mov	r6, r0
 8008222:	db01      	blt.n	8008228 <_malloc_r+0x1c>
 8008224:	42a9      	cmp	r1, r5
 8008226:	d904      	bls.n	8008232 <_malloc_r+0x26>
 8008228:	230c      	movs	r3, #12
 800822a:	6033      	str	r3, [r6, #0]
 800822c:	2000      	movs	r0, #0
 800822e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008232:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008308 <_malloc_r+0xfc>
 8008236:	f000 faa3 	bl	8008780 <__malloc_lock>
 800823a:	f8d8 3000 	ldr.w	r3, [r8]
 800823e:	461c      	mov	r4, r3
 8008240:	bb44      	cbnz	r4, 8008294 <_malloc_r+0x88>
 8008242:	4629      	mov	r1, r5
 8008244:	4630      	mov	r0, r6
 8008246:	f7ff ffbf 	bl	80081c8 <sbrk_aligned>
 800824a:	1c43      	adds	r3, r0, #1
 800824c:	4604      	mov	r4, r0
 800824e:	d158      	bne.n	8008302 <_malloc_r+0xf6>
 8008250:	f8d8 4000 	ldr.w	r4, [r8]
 8008254:	4627      	mov	r7, r4
 8008256:	2f00      	cmp	r7, #0
 8008258:	d143      	bne.n	80082e2 <_malloc_r+0xd6>
 800825a:	2c00      	cmp	r4, #0
 800825c:	d04b      	beq.n	80082f6 <_malloc_r+0xea>
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	4639      	mov	r1, r7
 8008262:	4630      	mov	r0, r6
 8008264:	eb04 0903 	add.w	r9, r4, r3
 8008268:	f000 fc6e 	bl	8008b48 <_sbrk_r>
 800826c:	4581      	cmp	r9, r0
 800826e:	d142      	bne.n	80082f6 <_malloc_r+0xea>
 8008270:	6821      	ldr	r1, [r4, #0]
 8008272:	1a6d      	subs	r5, r5, r1
 8008274:	4629      	mov	r1, r5
 8008276:	4630      	mov	r0, r6
 8008278:	f7ff ffa6 	bl	80081c8 <sbrk_aligned>
 800827c:	3001      	adds	r0, #1
 800827e:	d03a      	beq.n	80082f6 <_malloc_r+0xea>
 8008280:	6823      	ldr	r3, [r4, #0]
 8008282:	442b      	add	r3, r5
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	f8d8 3000 	ldr.w	r3, [r8]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	bb62      	cbnz	r2, 80082e8 <_malloc_r+0xdc>
 800828e:	f8c8 7000 	str.w	r7, [r8]
 8008292:	e00f      	b.n	80082b4 <_malloc_r+0xa8>
 8008294:	6822      	ldr	r2, [r4, #0]
 8008296:	1b52      	subs	r2, r2, r5
 8008298:	d420      	bmi.n	80082dc <_malloc_r+0xd0>
 800829a:	2a0b      	cmp	r2, #11
 800829c:	d917      	bls.n	80082ce <_malloc_r+0xc2>
 800829e:	1961      	adds	r1, r4, r5
 80082a0:	42a3      	cmp	r3, r4
 80082a2:	6025      	str	r5, [r4, #0]
 80082a4:	bf18      	it	ne
 80082a6:	6059      	strne	r1, [r3, #4]
 80082a8:	6863      	ldr	r3, [r4, #4]
 80082aa:	bf08      	it	eq
 80082ac:	f8c8 1000 	streq.w	r1, [r8]
 80082b0:	5162      	str	r2, [r4, r5]
 80082b2:	604b      	str	r3, [r1, #4]
 80082b4:	4630      	mov	r0, r6
 80082b6:	f000 fa69 	bl	800878c <__malloc_unlock>
 80082ba:	f104 000b 	add.w	r0, r4, #11
 80082be:	1d23      	adds	r3, r4, #4
 80082c0:	f020 0007 	bic.w	r0, r0, #7
 80082c4:	1ac2      	subs	r2, r0, r3
 80082c6:	bf1c      	itt	ne
 80082c8:	1a1b      	subne	r3, r3, r0
 80082ca:	50a3      	strne	r3, [r4, r2]
 80082cc:	e7af      	b.n	800822e <_malloc_r+0x22>
 80082ce:	6862      	ldr	r2, [r4, #4]
 80082d0:	42a3      	cmp	r3, r4
 80082d2:	bf0c      	ite	eq
 80082d4:	f8c8 2000 	streq.w	r2, [r8]
 80082d8:	605a      	strne	r2, [r3, #4]
 80082da:	e7eb      	b.n	80082b4 <_malloc_r+0xa8>
 80082dc:	4623      	mov	r3, r4
 80082de:	6864      	ldr	r4, [r4, #4]
 80082e0:	e7ae      	b.n	8008240 <_malloc_r+0x34>
 80082e2:	463c      	mov	r4, r7
 80082e4:	687f      	ldr	r7, [r7, #4]
 80082e6:	e7b6      	b.n	8008256 <_malloc_r+0x4a>
 80082e8:	461a      	mov	r2, r3
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	42a3      	cmp	r3, r4
 80082ee:	d1fb      	bne.n	80082e8 <_malloc_r+0xdc>
 80082f0:	2300      	movs	r3, #0
 80082f2:	6053      	str	r3, [r2, #4]
 80082f4:	e7de      	b.n	80082b4 <_malloc_r+0xa8>
 80082f6:	230c      	movs	r3, #12
 80082f8:	6033      	str	r3, [r6, #0]
 80082fa:	4630      	mov	r0, r6
 80082fc:	f000 fa46 	bl	800878c <__malloc_unlock>
 8008300:	e794      	b.n	800822c <_malloc_r+0x20>
 8008302:	6005      	str	r5, [r0, #0]
 8008304:	e7d6      	b.n	80082b4 <_malloc_r+0xa8>
 8008306:	bf00      	nop
 8008308:	20004eb4 	.word	0x20004eb4

0800830c <_printf_common>:
 800830c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008310:	4616      	mov	r6, r2
 8008312:	4698      	mov	r8, r3
 8008314:	688a      	ldr	r2, [r1, #8]
 8008316:	690b      	ldr	r3, [r1, #16]
 8008318:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800831c:	4293      	cmp	r3, r2
 800831e:	bfb8      	it	lt
 8008320:	4613      	movlt	r3, r2
 8008322:	6033      	str	r3, [r6, #0]
 8008324:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008328:	4607      	mov	r7, r0
 800832a:	460c      	mov	r4, r1
 800832c:	b10a      	cbz	r2, 8008332 <_printf_common+0x26>
 800832e:	3301      	adds	r3, #1
 8008330:	6033      	str	r3, [r6, #0]
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	0699      	lsls	r1, r3, #26
 8008336:	bf42      	ittt	mi
 8008338:	6833      	ldrmi	r3, [r6, #0]
 800833a:	3302      	addmi	r3, #2
 800833c:	6033      	strmi	r3, [r6, #0]
 800833e:	6825      	ldr	r5, [r4, #0]
 8008340:	f015 0506 	ands.w	r5, r5, #6
 8008344:	d106      	bne.n	8008354 <_printf_common+0x48>
 8008346:	f104 0a19 	add.w	sl, r4, #25
 800834a:	68e3      	ldr	r3, [r4, #12]
 800834c:	6832      	ldr	r2, [r6, #0]
 800834e:	1a9b      	subs	r3, r3, r2
 8008350:	42ab      	cmp	r3, r5
 8008352:	dc26      	bgt.n	80083a2 <_printf_common+0x96>
 8008354:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008358:	6822      	ldr	r2, [r4, #0]
 800835a:	3b00      	subs	r3, #0
 800835c:	bf18      	it	ne
 800835e:	2301      	movne	r3, #1
 8008360:	0692      	lsls	r2, r2, #26
 8008362:	d42b      	bmi.n	80083bc <_printf_common+0xb0>
 8008364:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008368:	4641      	mov	r1, r8
 800836a:	4638      	mov	r0, r7
 800836c:	47c8      	blx	r9
 800836e:	3001      	adds	r0, #1
 8008370:	d01e      	beq.n	80083b0 <_printf_common+0xa4>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	6922      	ldr	r2, [r4, #16]
 8008376:	f003 0306 	and.w	r3, r3, #6
 800837a:	2b04      	cmp	r3, #4
 800837c:	bf02      	ittt	eq
 800837e:	68e5      	ldreq	r5, [r4, #12]
 8008380:	6833      	ldreq	r3, [r6, #0]
 8008382:	1aed      	subeq	r5, r5, r3
 8008384:	68a3      	ldr	r3, [r4, #8]
 8008386:	bf0c      	ite	eq
 8008388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800838c:	2500      	movne	r5, #0
 800838e:	4293      	cmp	r3, r2
 8008390:	bfc4      	itt	gt
 8008392:	1a9b      	subgt	r3, r3, r2
 8008394:	18ed      	addgt	r5, r5, r3
 8008396:	2600      	movs	r6, #0
 8008398:	341a      	adds	r4, #26
 800839a:	42b5      	cmp	r5, r6
 800839c:	d11a      	bne.n	80083d4 <_printf_common+0xc8>
 800839e:	2000      	movs	r0, #0
 80083a0:	e008      	b.n	80083b4 <_printf_common+0xa8>
 80083a2:	2301      	movs	r3, #1
 80083a4:	4652      	mov	r2, sl
 80083a6:	4641      	mov	r1, r8
 80083a8:	4638      	mov	r0, r7
 80083aa:	47c8      	blx	r9
 80083ac:	3001      	adds	r0, #1
 80083ae:	d103      	bne.n	80083b8 <_printf_common+0xac>
 80083b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b8:	3501      	adds	r5, #1
 80083ba:	e7c6      	b.n	800834a <_printf_common+0x3e>
 80083bc:	18e1      	adds	r1, r4, r3
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	2030      	movs	r0, #48	@ 0x30
 80083c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083c6:	4422      	add	r2, r4
 80083c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083d0:	3302      	adds	r3, #2
 80083d2:	e7c7      	b.n	8008364 <_printf_common+0x58>
 80083d4:	2301      	movs	r3, #1
 80083d6:	4622      	mov	r2, r4
 80083d8:	4641      	mov	r1, r8
 80083da:	4638      	mov	r0, r7
 80083dc:	47c8      	blx	r9
 80083de:	3001      	adds	r0, #1
 80083e0:	d0e6      	beq.n	80083b0 <_printf_common+0xa4>
 80083e2:	3601      	adds	r6, #1
 80083e4:	e7d9      	b.n	800839a <_printf_common+0x8e>
	...

080083e8 <_printf_i>:
 80083e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083ec:	7e0f      	ldrb	r7, [r1, #24]
 80083ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083f0:	2f78      	cmp	r7, #120	@ 0x78
 80083f2:	4691      	mov	r9, r2
 80083f4:	4680      	mov	r8, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	469a      	mov	sl, r3
 80083fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083fe:	d807      	bhi.n	8008410 <_printf_i+0x28>
 8008400:	2f62      	cmp	r7, #98	@ 0x62
 8008402:	d80a      	bhi.n	800841a <_printf_i+0x32>
 8008404:	2f00      	cmp	r7, #0
 8008406:	f000 80d2 	beq.w	80085ae <_printf_i+0x1c6>
 800840a:	2f58      	cmp	r7, #88	@ 0x58
 800840c:	f000 80b9 	beq.w	8008582 <_printf_i+0x19a>
 8008410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008414:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008418:	e03a      	b.n	8008490 <_printf_i+0xa8>
 800841a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800841e:	2b15      	cmp	r3, #21
 8008420:	d8f6      	bhi.n	8008410 <_printf_i+0x28>
 8008422:	a101      	add	r1, pc, #4	@ (adr r1, 8008428 <_printf_i+0x40>)
 8008424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008428:	08008481 	.word	0x08008481
 800842c:	08008495 	.word	0x08008495
 8008430:	08008411 	.word	0x08008411
 8008434:	08008411 	.word	0x08008411
 8008438:	08008411 	.word	0x08008411
 800843c:	08008411 	.word	0x08008411
 8008440:	08008495 	.word	0x08008495
 8008444:	08008411 	.word	0x08008411
 8008448:	08008411 	.word	0x08008411
 800844c:	08008411 	.word	0x08008411
 8008450:	08008411 	.word	0x08008411
 8008454:	08008595 	.word	0x08008595
 8008458:	080084bf 	.word	0x080084bf
 800845c:	0800854f 	.word	0x0800854f
 8008460:	08008411 	.word	0x08008411
 8008464:	08008411 	.word	0x08008411
 8008468:	080085b7 	.word	0x080085b7
 800846c:	08008411 	.word	0x08008411
 8008470:	080084bf 	.word	0x080084bf
 8008474:	08008411 	.word	0x08008411
 8008478:	08008411 	.word	0x08008411
 800847c:	08008557 	.word	0x08008557
 8008480:	6833      	ldr	r3, [r6, #0]
 8008482:	1d1a      	adds	r2, r3, #4
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6032      	str	r2, [r6, #0]
 8008488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800848c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008490:	2301      	movs	r3, #1
 8008492:	e09d      	b.n	80085d0 <_printf_i+0x1e8>
 8008494:	6833      	ldr	r3, [r6, #0]
 8008496:	6820      	ldr	r0, [r4, #0]
 8008498:	1d19      	adds	r1, r3, #4
 800849a:	6031      	str	r1, [r6, #0]
 800849c:	0606      	lsls	r6, r0, #24
 800849e:	d501      	bpl.n	80084a4 <_printf_i+0xbc>
 80084a0:	681d      	ldr	r5, [r3, #0]
 80084a2:	e003      	b.n	80084ac <_printf_i+0xc4>
 80084a4:	0645      	lsls	r5, r0, #25
 80084a6:	d5fb      	bpl.n	80084a0 <_printf_i+0xb8>
 80084a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084ac:	2d00      	cmp	r5, #0
 80084ae:	da03      	bge.n	80084b8 <_printf_i+0xd0>
 80084b0:	232d      	movs	r3, #45	@ 0x2d
 80084b2:	426d      	negs	r5, r5
 80084b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084b8:	4859      	ldr	r0, [pc, #356]	@ (8008620 <_printf_i+0x238>)
 80084ba:	230a      	movs	r3, #10
 80084bc:	e011      	b.n	80084e2 <_printf_i+0xfa>
 80084be:	6821      	ldr	r1, [r4, #0]
 80084c0:	6833      	ldr	r3, [r6, #0]
 80084c2:	0608      	lsls	r0, r1, #24
 80084c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80084c8:	d402      	bmi.n	80084d0 <_printf_i+0xe8>
 80084ca:	0649      	lsls	r1, r1, #25
 80084cc:	bf48      	it	mi
 80084ce:	b2ad      	uxthmi	r5, r5
 80084d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80084d2:	4853      	ldr	r0, [pc, #332]	@ (8008620 <_printf_i+0x238>)
 80084d4:	6033      	str	r3, [r6, #0]
 80084d6:	bf14      	ite	ne
 80084d8:	230a      	movne	r3, #10
 80084da:	2308      	moveq	r3, #8
 80084dc:	2100      	movs	r1, #0
 80084de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084e2:	6866      	ldr	r6, [r4, #4]
 80084e4:	60a6      	str	r6, [r4, #8]
 80084e6:	2e00      	cmp	r6, #0
 80084e8:	bfa2      	ittt	ge
 80084ea:	6821      	ldrge	r1, [r4, #0]
 80084ec:	f021 0104 	bicge.w	r1, r1, #4
 80084f0:	6021      	strge	r1, [r4, #0]
 80084f2:	b90d      	cbnz	r5, 80084f8 <_printf_i+0x110>
 80084f4:	2e00      	cmp	r6, #0
 80084f6:	d04b      	beq.n	8008590 <_printf_i+0x1a8>
 80084f8:	4616      	mov	r6, r2
 80084fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80084fe:	fb03 5711 	mls	r7, r3, r1, r5
 8008502:	5dc7      	ldrb	r7, [r0, r7]
 8008504:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008508:	462f      	mov	r7, r5
 800850a:	42bb      	cmp	r3, r7
 800850c:	460d      	mov	r5, r1
 800850e:	d9f4      	bls.n	80084fa <_printf_i+0x112>
 8008510:	2b08      	cmp	r3, #8
 8008512:	d10b      	bne.n	800852c <_printf_i+0x144>
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	07df      	lsls	r7, r3, #31
 8008518:	d508      	bpl.n	800852c <_printf_i+0x144>
 800851a:	6923      	ldr	r3, [r4, #16]
 800851c:	6861      	ldr	r1, [r4, #4]
 800851e:	4299      	cmp	r1, r3
 8008520:	bfde      	ittt	le
 8008522:	2330      	movle	r3, #48	@ 0x30
 8008524:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008528:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800852c:	1b92      	subs	r2, r2, r6
 800852e:	6122      	str	r2, [r4, #16]
 8008530:	f8cd a000 	str.w	sl, [sp]
 8008534:	464b      	mov	r3, r9
 8008536:	aa03      	add	r2, sp, #12
 8008538:	4621      	mov	r1, r4
 800853a:	4640      	mov	r0, r8
 800853c:	f7ff fee6 	bl	800830c <_printf_common>
 8008540:	3001      	adds	r0, #1
 8008542:	d14a      	bne.n	80085da <_printf_i+0x1f2>
 8008544:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008548:	b004      	add	sp, #16
 800854a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	f043 0320 	orr.w	r3, r3, #32
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	4833      	ldr	r0, [pc, #204]	@ (8008624 <_printf_i+0x23c>)
 8008558:	2778      	movs	r7, #120	@ 0x78
 800855a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	6831      	ldr	r1, [r6, #0]
 8008562:	061f      	lsls	r7, r3, #24
 8008564:	f851 5b04 	ldr.w	r5, [r1], #4
 8008568:	d402      	bmi.n	8008570 <_printf_i+0x188>
 800856a:	065f      	lsls	r7, r3, #25
 800856c:	bf48      	it	mi
 800856e:	b2ad      	uxthmi	r5, r5
 8008570:	6031      	str	r1, [r6, #0]
 8008572:	07d9      	lsls	r1, r3, #31
 8008574:	bf44      	itt	mi
 8008576:	f043 0320 	orrmi.w	r3, r3, #32
 800857a:	6023      	strmi	r3, [r4, #0]
 800857c:	b11d      	cbz	r5, 8008586 <_printf_i+0x19e>
 800857e:	2310      	movs	r3, #16
 8008580:	e7ac      	b.n	80084dc <_printf_i+0xf4>
 8008582:	4827      	ldr	r0, [pc, #156]	@ (8008620 <_printf_i+0x238>)
 8008584:	e7e9      	b.n	800855a <_printf_i+0x172>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	f023 0320 	bic.w	r3, r3, #32
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	e7f6      	b.n	800857e <_printf_i+0x196>
 8008590:	4616      	mov	r6, r2
 8008592:	e7bd      	b.n	8008510 <_printf_i+0x128>
 8008594:	6833      	ldr	r3, [r6, #0]
 8008596:	6825      	ldr	r5, [r4, #0]
 8008598:	6961      	ldr	r1, [r4, #20]
 800859a:	1d18      	adds	r0, r3, #4
 800859c:	6030      	str	r0, [r6, #0]
 800859e:	062e      	lsls	r6, r5, #24
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	d501      	bpl.n	80085a8 <_printf_i+0x1c0>
 80085a4:	6019      	str	r1, [r3, #0]
 80085a6:	e002      	b.n	80085ae <_printf_i+0x1c6>
 80085a8:	0668      	lsls	r0, r5, #25
 80085aa:	d5fb      	bpl.n	80085a4 <_printf_i+0x1bc>
 80085ac:	8019      	strh	r1, [r3, #0]
 80085ae:	2300      	movs	r3, #0
 80085b0:	6123      	str	r3, [r4, #16]
 80085b2:	4616      	mov	r6, r2
 80085b4:	e7bc      	b.n	8008530 <_printf_i+0x148>
 80085b6:	6833      	ldr	r3, [r6, #0]
 80085b8:	1d1a      	adds	r2, r3, #4
 80085ba:	6032      	str	r2, [r6, #0]
 80085bc:	681e      	ldr	r6, [r3, #0]
 80085be:	6862      	ldr	r2, [r4, #4]
 80085c0:	2100      	movs	r1, #0
 80085c2:	4630      	mov	r0, r6
 80085c4:	f7f7 fe34 	bl	8000230 <memchr>
 80085c8:	b108      	cbz	r0, 80085ce <_printf_i+0x1e6>
 80085ca:	1b80      	subs	r0, r0, r6
 80085cc:	6060      	str	r0, [r4, #4]
 80085ce:	6863      	ldr	r3, [r4, #4]
 80085d0:	6123      	str	r3, [r4, #16]
 80085d2:	2300      	movs	r3, #0
 80085d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085d8:	e7aa      	b.n	8008530 <_printf_i+0x148>
 80085da:	6923      	ldr	r3, [r4, #16]
 80085dc:	4632      	mov	r2, r6
 80085de:	4649      	mov	r1, r9
 80085e0:	4640      	mov	r0, r8
 80085e2:	47d0      	blx	sl
 80085e4:	3001      	adds	r0, #1
 80085e6:	d0ad      	beq.n	8008544 <_printf_i+0x15c>
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	079b      	lsls	r3, r3, #30
 80085ec:	d413      	bmi.n	8008616 <_printf_i+0x22e>
 80085ee:	68e0      	ldr	r0, [r4, #12]
 80085f0:	9b03      	ldr	r3, [sp, #12]
 80085f2:	4298      	cmp	r0, r3
 80085f4:	bfb8      	it	lt
 80085f6:	4618      	movlt	r0, r3
 80085f8:	e7a6      	b.n	8008548 <_printf_i+0x160>
 80085fa:	2301      	movs	r3, #1
 80085fc:	4632      	mov	r2, r6
 80085fe:	4649      	mov	r1, r9
 8008600:	4640      	mov	r0, r8
 8008602:	47d0      	blx	sl
 8008604:	3001      	adds	r0, #1
 8008606:	d09d      	beq.n	8008544 <_printf_i+0x15c>
 8008608:	3501      	adds	r5, #1
 800860a:	68e3      	ldr	r3, [r4, #12]
 800860c:	9903      	ldr	r1, [sp, #12]
 800860e:	1a5b      	subs	r3, r3, r1
 8008610:	42ab      	cmp	r3, r5
 8008612:	dcf2      	bgt.n	80085fa <_printf_i+0x212>
 8008614:	e7eb      	b.n	80085ee <_printf_i+0x206>
 8008616:	2500      	movs	r5, #0
 8008618:	f104 0619 	add.w	r6, r4, #25
 800861c:	e7f5      	b.n	800860a <_printf_i+0x222>
 800861e:	bf00      	nop
 8008620:	08009a79 	.word	0x08009a79
 8008624:	08009a8a 	.word	0x08009a8a

08008628 <__sflush_r>:
 8008628:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800862c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008630:	0716      	lsls	r6, r2, #28
 8008632:	4605      	mov	r5, r0
 8008634:	460c      	mov	r4, r1
 8008636:	d454      	bmi.n	80086e2 <__sflush_r+0xba>
 8008638:	684b      	ldr	r3, [r1, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	dc02      	bgt.n	8008644 <__sflush_r+0x1c>
 800863e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008640:	2b00      	cmp	r3, #0
 8008642:	dd48      	ble.n	80086d6 <__sflush_r+0xae>
 8008644:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008646:	2e00      	cmp	r6, #0
 8008648:	d045      	beq.n	80086d6 <__sflush_r+0xae>
 800864a:	2300      	movs	r3, #0
 800864c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008650:	682f      	ldr	r7, [r5, #0]
 8008652:	6a21      	ldr	r1, [r4, #32]
 8008654:	602b      	str	r3, [r5, #0]
 8008656:	d030      	beq.n	80086ba <__sflush_r+0x92>
 8008658:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800865a:	89a3      	ldrh	r3, [r4, #12]
 800865c:	0759      	lsls	r1, r3, #29
 800865e:	d505      	bpl.n	800866c <__sflush_r+0x44>
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	1ad2      	subs	r2, r2, r3
 8008664:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008666:	b10b      	cbz	r3, 800866c <__sflush_r+0x44>
 8008668:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800866a:	1ad2      	subs	r2, r2, r3
 800866c:	2300      	movs	r3, #0
 800866e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008670:	6a21      	ldr	r1, [r4, #32]
 8008672:	4628      	mov	r0, r5
 8008674:	47b0      	blx	r6
 8008676:	1c43      	adds	r3, r0, #1
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	d106      	bne.n	800868a <__sflush_r+0x62>
 800867c:	6829      	ldr	r1, [r5, #0]
 800867e:	291d      	cmp	r1, #29
 8008680:	d82b      	bhi.n	80086da <__sflush_r+0xb2>
 8008682:	4a2a      	ldr	r2, [pc, #168]	@ (800872c <__sflush_r+0x104>)
 8008684:	410a      	asrs	r2, r1
 8008686:	07d6      	lsls	r6, r2, #31
 8008688:	d427      	bmi.n	80086da <__sflush_r+0xb2>
 800868a:	2200      	movs	r2, #0
 800868c:	6062      	str	r2, [r4, #4]
 800868e:	04d9      	lsls	r1, r3, #19
 8008690:	6922      	ldr	r2, [r4, #16]
 8008692:	6022      	str	r2, [r4, #0]
 8008694:	d504      	bpl.n	80086a0 <__sflush_r+0x78>
 8008696:	1c42      	adds	r2, r0, #1
 8008698:	d101      	bne.n	800869e <__sflush_r+0x76>
 800869a:	682b      	ldr	r3, [r5, #0]
 800869c:	b903      	cbnz	r3, 80086a0 <__sflush_r+0x78>
 800869e:	6560      	str	r0, [r4, #84]	@ 0x54
 80086a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086a2:	602f      	str	r7, [r5, #0]
 80086a4:	b1b9      	cbz	r1, 80086d6 <__sflush_r+0xae>
 80086a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086aa:	4299      	cmp	r1, r3
 80086ac:	d002      	beq.n	80086b4 <__sflush_r+0x8c>
 80086ae:	4628      	mov	r0, r5
 80086b0:	f000 fa7a 	bl	8008ba8 <_free_r>
 80086b4:	2300      	movs	r3, #0
 80086b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80086b8:	e00d      	b.n	80086d6 <__sflush_r+0xae>
 80086ba:	2301      	movs	r3, #1
 80086bc:	4628      	mov	r0, r5
 80086be:	47b0      	blx	r6
 80086c0:	4602      	mov	r2, r0
 80086c2:	1c50      	adds	r0, r2, #1
 80086c4:	d1c9      	bne.n	800865a <__sflush_r+0x32>
 80086c6:	682b      	ldr	r3, [r5, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d0c6      	beq.n	800865a <__sflush_r+0x32>
 80086cc:	2b1d      	cmp	r3, #29
 80086ce:	d001      	beq.n	80086d4 <__sflush_r+0xac>
 80086d0:	2b16      	cmp	r3, #22
 80086d2:	d11e      	bne.n	8008712 <__sflush_r+0xea>
 80086d4:	602f      	str	r7, [r5, #0]
 80086d6:	2000      	movs	r0, #0
 80086d8:	e022      	b.n	8008720 <__sflush_r+0xf8>
 80086da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086de:	b21b      	sxth	r3, r3
 80086e0:	e01b      	b.n	800871a <__sflush_r+0xf2>
 80086e2:	690f      	ldr	r7, [r1, #16]
 80086e4:	2f00      	cmp	r7, #0
 80086e6:	d0f6      	beq.n	80086d6 <__sflush_r+0xae>
 80086e8:	0793      	lsls	r3, r2, #30
 80086ea:	680e      	ldr	r6, [r1, #0]
 80086ec:	bf08      	it	eq
 80086ee:	694b      	ldreq	r3, [r1, #20]
 80086f0:	600f      	str	r7, [r1, #0]
 80086f2:	bf18      	it	ne
 80086f4:	2300      	movne	r3, #0
 80086f6:	eba6 0807 	sub.w	r8, r6, r7
 80086fa:	608b      	str	r3, [r1, #8]
 80086fc:	f1b8 0f00 	cmp.w	r8, #0
 8008700:	dde9      	ble.n	80086d6 <__sflush_r+0xae>
 8008702:	6a21      	ldr	r1, [r4, #32]
 8008704:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008706:	4643      	mov	r3, r8
 8008708:	463a      	mov	r2, r7
 800870a:	4628      	mov	r0, r5
 800870c:	47b0      	blx	r6
 800870e:	2800      	cmp	r0, #0
 8008710:	dc08      	bgt.n	8008724 <__sflush_r+0xfc>
 8008712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800871a:	81a3      	strh	r3, [r4, #12]
 800871c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008724:	4407      	add	r7, r0
 8008726:	eba8 0800 	sub.w	r8, r8, r0
 800872a:	e7e7      	b.n	80086fc <__sflush_r+0xd4>
 800872c:	dfbffffe 	.word	0xdfbffffe

08008730 <_fflush_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	690b      	ldr	r3, [r1, #16]
 8008734:	4605      	mov	r5, r0
 8008736:	460c      	mov	r4, r1
 8008738:	b913      	cbnz	r3, 8008740 <_fflush_r+0x10>
 800873a:	2500      	movs	r5, #0
 800873c:	4628      	mov	r0, r5
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	b118      	cbz	r0, 800874a <_fflush_r+0x1a>
 8008742:	6a03      	ldr	r3, [r0, #32]
 8008744:	b90b      	cbnz	r3, 800874a <_fflush_r+0x1a>
 8008746:	f7ff f9ab 	bl	8007aa0 <__sinit>
 800874a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0f3      	beq.n	800873a <_fflush_r+0xa>
 8008752:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008754:	07d0      	lsls	r0, r2, #31
 8008756:	d404      	bmi.n	8008762 <_fflush_r+0x32>
 8008758:	0599      	lsls	r1, r3, #22
 800875a:	d402      	bmi.n	8008762 <_fflush_r+0x32>
 800875c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800875e:	f7ff fa98 	bl	8007c92 <__retarget_lock_acquire_recursive>
 8008762:	4628      	mov	r0, r5
 8008764:	4621      	mov	r1, r4
 8008766:	f7ff ff5f 	bl	8008628 <__sflush_r>
 800876a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800876c:	07da      	lsls	r2, r3, #31
 800876e:	4605      	mov	r5, r0
 8008770:	d4e4      	bmi.n	800873c <_fflush_r+0xc>
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	059b      	lsls	r3, r3, #22
 8008776:	d4e1      	bmi.n	800873c <_fflush_r+0xc>
 8008778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800877a:	f7ff fa8b 	bl	8007c94 <__retarget_lock_release_recursive>
 800877e:	e7dd      	b.n	800873c <_fflush_r+0xc>

08008780 <__malloc_lock>:
 8008780:	4801      	ldr	r0, [pc, #4]	@ (8008788 <__malloc_lock+0x8>)
 8008782:	f7ff ba86 	b.w	8007c92 <__retarget_lock_acquire_recursive>
 8008786:	bf00      	nop
 8008788:	20004eac 	.word	0x20004eac

0800878c <__malloc_unlock>:
 800878c:	4801      	ldr	r0, [pc, #4]	@ (8008794 <__malloc_unlock+0x8>)
 800878e:	f7ff ba81 	b.w	8007c94 <__retarget_lock_release_recursive>
 8008792:	bf00      	nop
 8008794:	20004eac 	.word	0x20004eac

08008798 <__sread>:
 8008798:	b510      	push	{r4, lr}
 800879a:	460c      	mov	r4, r1
 800879c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a0:	f000 f9c0 	bl	8008b24 <_read_r>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	bfab      	itete	ge
 80087a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80087aa:	89a3      	ldrhlt	r3, [r4, #12]
 80087ac:	181b      	addge	r3, r3, r0
 80087ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80087b2:	bfac      	ite	ge
 80087b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80087b6:	81a3      	strhlt	r3, [r4, #12]
 80087b8:	bd10      	pop	{r4, pc}

080087ba <__swrite>:
 80087ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087be:	461f      	mov	r7, r3
 80087c0:	898b      	ldrh	r3, [r1, #12]
 80087c2:	05db      	lsls	r3, r3, #23
 80087c4:	4605      	mov	r5, r0
 80087c6:	460c      	mov	r4, r1
 80087c8:	4616      	mov	r6, r2
 80087ca:	d505      	bpl.n	80087d8 <__swrite+0x1e>
 80087cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d0:	2302      	movs	r3, #2
 80087d2:	2200      	movs	r2, #0
 80087d4:	f000 f994 	bl	8008b00 <_lseek_r>
 80087d8:	89a3      	ldrh	r3, [r4, #12]
 80087da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087e2:	81a3      	strh	r3, [r4, #12]
 80087e4:	4632      	mov	r2, r6
 80087e6:	463b      	mov	r3, r7
 80087e8:	4628      	mov	r0, r5
 80087ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087ee:	f000 b9bb 	b.w	8008b68 <_write_r>

080087f2 <__sseek>:
 80087f2:	b510      	push	{r4, lr}
 80087f4:	460c      	mov	r4, r1
 80087f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087fa:	f000 f981 	bl	8008b00 <_lseek_r>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	89a3      	ldrh	r3, [r4, #12]
 8008802:	bf15      	itete	ne
 8008804:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008806:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800880a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800880e:	81a3      	strheq	r3, [r4, #12]
 8008810:	bf18      	it	ne
 8008812:	81a3      	strhne	r3, [r4, #12]
 8008814:	bd10      	pop	{r4, pc}

08008816 <__sclose>:
 8008816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800881a:	f000 b93f 	b.w	8008a9c <_close_r>

0800881e <_realloc_r>:
 800881e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008822:	4680      	mov	r8, r0
 8008824:	4615      	mov	r5, r2
 8008826:	460c      	mov	r4, r1
 8008828:	b921      	cbnz	r1, 8008834 <_realloc_r+0x16>
 800882a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800882e:	4611      	mov	r1, r2
 8008830:	f7ff bcec 	b.w	800820c <_malloc_r>
 8008834:	b92a      	cbnz	r2, 8008842 <_realloc_r+0x24>
 8008836:	f000 f9b7 	bl	8008ba8 <_free_r>
 800883a:	2400      	movs	r4, #0
 800883c:	4620      	mov	r0, r4
 800883e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008842:	f000 f9fb 	bl	8008c3c <_malloc_usable_size_r>
 8008846:	4285      	cmp	r5, r0
 8008848:	4606      	mov	r6, r0
 800884a:	d802      	bhi.n	8008852 <_realloc_r+0x34>
 800884c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008850:	d8f4      	bhi.n	800883c <_realloc_r+0x1e>
 8008852:	4629      	mov	r1, r5
 8008854:	4640      	mov	r0, r8
 8008856:	f7ff fcd9 	bl	800820c <_malloc_r>
 800885a:	4607      	mov	r7, r0
 800885c:	2800      	cmp	r0, #0
 800885e:	d0ec      	beq.n	800883a <_realloc_r+0x1c>
 8008860:	42b5      	cmp	r5, r6
 8008862:	462a      	mov	r2, r5
 8008864:	4621      	mov	r1, r4
 8008866:	bf28      	it	cs
 8008868:	4632      	movcs	r2, r6
 800886a:	f000 f98f 	bl	8008b8c <memcpy>
 800886e:	4621      	mov	r1, r4
 8008870:	4640      	mov	r0, r8
 8008872:	f000 f999 	bl	8008ba8 <_free_r>
 8008876:	463c      	mov	r4, r7
 8008878:	e7e0      	b.n	800883c <_realloc_r+0x1e>

0800887a <__swbuf_r>:
 800887a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887c:	460e      	mov	r6, r1
 800887e:	4614      	mov	r4, r2
 8008880:	4605      	mov	r5, r0
 8008882:	b118      	cbz	r0, 800888c <__swbuf_r+0x12>
 8008884:	6a03      	ldr	r3, [r0, #32]
 8008886:	b90b      	cbnz	r3, 800888c <__swbuf_r+0x12>
 8008888:	f7ff f90a 	bl	8007aa0 <__sinit>
 800888c:	69a3      	ldr	r3, [r4, #24]
 800888e:	60a3      	str	r3, [r4, #8]
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	071a      	lsls	r2, r3, #28
 8008894:	d501      	bpl.n	800889a <__swbuf_r+0x20>
 8008896:	6923      	ldr	r3, [r4, #16]
 8008898:	b943      	cbnz	r3, 80088ac <__swbuf_r+0x32>
 800889a:	4621      	mov	r1, r4
 800889c:	4628      	mov	r0, r5
 800889e:	f000 f82b 	bl	80088f8 <__swsetup_r>
 80088a2:	b118      	cbz	r0, 80088ac <__swbuf_r+0x32>
 80088a4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80088a8:	4638      	mov	r0, r7
 80088aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	6922      	ldr	r2, [r4, #16]
 80088b0:	1a98      	subs	r0, r3, r2
 80088b2:	6963      	ldr	r3, [r4, #20]
 80088b4:	b2f6      	uxtb	r6, r6
 80088b6:	4283      	cmp	r3, r0
 80088b8:	4637      	mov	r7, r6
 80088ba:	dc05      	bgt.n	80088c8 <__swbuf_r+0x4e>
 80088bc:	4621      	mov	r1, r4
 80088be:	4628      	mov	r0, r5
 80088c0:	f7ff ff36 	bl	8008730 <_fflush_r>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d1ed      	bne.n	80088a4 <__swbuf_r+0x2a>
 80088c8:	68a3      	ldr	r3, [r4, #8]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	60a3      	str	r3, [r4, #8]
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	6022      	str	r2, [r4, #0]
 80088d4:	701e      	strb	r6, [r3, #0]
 80088d6:	6962      	ldr	r2, [r4, #20]
 80088d8:	1c43      	adds	r3, r0, #1
 80088da:	429a      	cmp	r2, r3
 80088dc:	d004      	beq.n	80088e8 <__swbuf_r+0x6e>
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	07db      	lsls	r3, r3, #31
 80088e2:	d5e1      	bpl.n	80088a8 <__swbuf_r+0x2e>
 80088e4:	2e0a      	cmp	r6, #10
 80088e6:	d1df      	bne.n	80088a8 <__swbuf_r+0x2e>
 80088e8:	4621      	mov	r1, r4
 80088ea:	4628      	mov	r0, r5
 80088ec:	f7ff ff20 	bl	8008730 <_fflush_r>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	d0d9      	beq.n	80088a8 <__swbuf_r+0x2e>
 80088f4:	e7d6      	b.n	80088a4 <__swbuf_r+0x2a>
	...

080088f8 <__swsetup_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4b29      	ldr	r3, [pc, #164]	@ (80089a0 <__swsetup_r+0xa8>)
 80088fc:	4605      	mov	r5, r0
 80088fe:	6818      	ldr	r0, [r3, #0]
 8008900:	460c      	mov	r4, r1
 8008902:	b118      	cbz	r0, 800890c <__swsetup_r+0x14>
 8008904:	6a03      	ldr	r3, [r0, #32]
 8008906:	b90b      	cbnz	r3, 800890c <__swsetup_r+0x14>
 8008908:	f7ff f8ca 	bl	8007aa0 <__sinit>
 800890c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008910:	0719      	lsls	r1, r3, #28
 8008912:	d422      	bmi.n	800895a <__swsetup_r+0x62>
 8008914:	06da      	lsls	r2, r3, #27
 8008916:	d407      	bmi.n	8008928 <__swsetup_r+0x30>
 8008918:	2209      	movs	r2, #9
 800891a:	602a      	str	r2, [r5, #0]
 800891c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008920:	81a3      	strh	r3, [r4, #12]
 8008922:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008926:	e033      	b.n	8008990 <__swsetup_r+0x98>
 8008928:	0758      	lsls	r0, r3, #29
 800892a:	d512      	bpl.n	8008952 <__swsetup_r+0x5a>
 800892c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800892e:	b141      	cbz	r1, 8008942 <__swsetup_r+0x4a>
 8008930:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008934:	4299      	cmp	r1, r3
 8008936:	d002      	beq.n	800893e <__swsetup_r+0x46>
 8008938:	4628      	mov	r0, r5
 800893a:	f000 f935 	bl	8008ba8 <_free_r>
 800893e:	2300      	movs	r3, #0
 8008940:	6363      	str	r3, [r4, #52]	@ 0x34
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008948:	81a3      	strh	r3, [r4, #12]
 800894a:	2300      	movs	r3, #0
 800894c:	6063      	str	r3, [r4, #4]
 800894e:	6923      	ldr	r3, [r4, #16]
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	f043 0308 	orr.w	r3, r3, #8
 8008958:	81a3      	strh	r3, [r4, #12]
 800895a:	6923      	ldr	r3, [r4, #16]
 800895c:	b94b      	cbnz	r3, 8008972 <__swsetup_r+0x7a>
 800895e:	89a3      	ldrh	r3, [r4, #12]
 8008960:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008968:	d003      	beq.n	8008972 <__swsetup_r+0x7a>
 800896a:	4621      	mov	r1, r4
 800896c:	4628      	mov	r0, r5
 800896e:	f000 f83f 	bl	80089f0 <__smakebuf_r>
 8008972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008976:	f013 0201 	ands.w	r2, r3, #1
 800897a:	d00a      	beq.n	8008992 <__swsetup_r+0x9a>
 800897c:	2200      	movs	r2, #0
 800897e:	60a2      	str	r2, [r4, #8]
 8008980:	6962      	ldr	r2, [r4, #20]
 8008982:	4252      	negs	r2, r2
 8008984:	61a2      	str	r2, [r4, #24]
 8008986:	6922      	ldr	r2, [r4, #16]
 8008988:	b942      	cbnz	r2, 800899c <__swsetup_r+0xa4>
 800898a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800898e:	d1c5      	bne.n	800891c <__swsetup_r+0x24>
 8008990:	bd38      	pop	{r3, r4, r5, pc}
 8008992:	0799      	lsls	r1, r3, #30
 8008994:	bf58      	it	pl
 8008996:	6962      	ldrpl	r2, [r4, #20]
 8008998:	60a2      	str	r2, [r4, #8]
 800899a:	e7f4      	b.n	8008986 <__swsetup_r+0x8e>
 800899c:	2000      	movs	r0, #0
 800899e:	e7f7      	b.n	8008990 <__swsetup_r+0x98>
 80089a0:	20000030 	.word	0x20000030

080089a4 <__swhatbuf_r>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	460c      	mov	r4, r1
 80089a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ac:	2900      	cmp	r1, #0
 80089ae:	b096      	sub	sp, #88	@ 0x58
 80089b0:	4615      	mov	r5, r2
 80089b2:	461e      	mov	r6, r3
 80089b4:	da0d      	bge.n	80089d2 <__swhatbuf_r+0x2e>
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089bc:	f04f 0100 	mov.w	r1, #0
 80089c0:	bf14      	ite	ne
 80089c2:	2340      	movne	r3, #64	@ 0x40
 80089c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089c8:	2000      	movs	r0, #0
 80089ca:	6031      	str	r1, [r6, #0]
 80089cc:	602b      	str	r3, [r5, #0]
 80089ce:	b016      	add	sp, #88	@ 0x58
 80089d0:	bd70      	pop	{r4, r5, r6, pc}
 80089d2:	466a      	mov	r2, sp
 80089d4:	f000 f872 	bl	8008abc <_fstat_r>
 80089d8:	2800      	cmp	r0, #0
 80089da:	dbec      	blt.n	80089b6 <__swhatbuf_r+0x12>
 80089dc:	9901      	ldr	r1, [sp, #4]
 80089de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089e6:	4259      	negs	r1, r3
 80089e8:	4159      	adcs	r1, r3
 80089ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089ee:	e7eb      	b.n	80089c8 <__swhatbuf_r+0x24>

080089f0 <__smakebuf_r>:
 80089f0:	898b      	ldrh	r3, [r1, #12]
 80089f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089f4:	079d      	lsls	r5, r3, #30
 80089f6:	4606      	mov	r6, r0
 80089f8:	460c      	mov	r4, r1
 80089fa:	d507      	bpl.n	8008a0c <__smakebuf_r+0x1c>
 80089fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	6123      	str	r3, [r4, #16]
 8008a04:	2301      	movs	r3, #1
 8008a06:	6163      	str	r3, [r4, #20]
 8008a08:	b003      	add	sp, #12
 8008a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a0c:	ab01      	add	r3, sp, #4
 8008a0e:	466a      	mov	r2, sp
 8008a10:	f7ff ffc8 	bl	80089a4 <__swhatbuf_r>
 8008a14:	9f00      	ldr	r7, [sp, #0]
 8008a16:	4605      	mov	r5, r0
 8008a18:	4639      	mov	r1, r7
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f7ff fbf6 	bl	800820c <_malloc_r>
 8008a20:	b948      	cbnz	r0, 8008a36 <__smakebuf_r+0x46>
 8008a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a26:	059a      	lsls	r2, r3, #22
 8008a28:	d4ee      	bmi.n	8008a08 <__smakebuf_r+0x18>
 8008a2a:	f023 0303 	bic.w	r3, r3, #3
 8008a2e:	f043 0302 	orr.w	r3, r3, #2
 8008a32:	81a3      	strh	r3, [r4, #12]
 8008a34:	e7e2      	b.n	80089fc <__smakebuf_r+0xc>
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	6020      	str	r0, [r4, #0]
 8008a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a3e:	81a3      	strh	r3, [r4, #12]
 8008a40:	9b01      	ldr	r3, [sp, #4]
 8008a42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a46:	b15b      	cbz	r3, 8008a60 <__smakebuf_r+0x70>
 8008a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f000 f847 	bl	8008ae0 <_isatty_r>
 8008a52:	b128      	cbz	r0, 8008a60 <__smakebuf_r+0x70>
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	f023 0303 	bic.w	r3, r3, #3
 8008a5a:	f043 0301 	orr.w	r3, r3, #1
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	431d      	orrs	r5, r3
 8008a64:	81a5      	strh	r5, [r4, #12]
 8008a66:	e7cf      	b.n	8008a08 <__smakebuf_r+0x18>

08008a68 <memmove>:
 8008a68:	4288      	cmp	r0, r1
 8008a6a:	b510      	push	{r4, lr}
 8008a6c:	eb01 0402 	add.w	r4, r1, r2
 8008a70:	d902      	bls.n	8008a78 <memmove+0x10>
 8008a72:	4284      	cmp	r4, r0
 8008a74:	4623      	mov	r3, r4
 8008a76:	d807      	bhi.n	8008a88 <memmove+0x20>
 8008a78:	1e43      	subs	r3, r0, #1
 8008a7a:	42a1      	cmp	r1, r4
 8008a7c:	d008      	beq.n	8008a90 <memmove+0x28>
 8008a7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a86:	e7f8      	b.n	8008a7a <memmove+0x12>
 8008a88:	4402      	add	r2, r0
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	428a      	cmp	r2, r1
 8008a8e:	d100      	bne.n	8008a92 <memmove+0x2a>
 8008a90:	bd10      	pop	{r4, pc}
 8008a92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a9a:	e7f7      	b.n	8008a8c <memmove+0x24>

08008a9c <_close_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d06      	ldr	r5, [pc, #24]	@ (8008ab8 <_close_r+0x1c>)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	602b      	str	r3, [r5, #0]
 8008aa8:	f7f8 f935 	bl	8000d16 <_close>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d102      	bne.n	8008ab6 <_close_r+0x1a>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	b103      	cbz	r3, 8008ab6 <_close_r+0x1a>
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	20004eb8 	.word	0x20004eb8

08008abc <_fstat_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4d07      	ldr	r5, [pc, #28]	@ (8008adc <_fstat_r+0x20>)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	602b      	str	r3, [r5, #0]
 8008aca:	f7f8 f930 	bl	8000d2e <_fstat>
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	d102      	bne.n	8008ad8 <_fstat_r+0x1c>
 8008ad2:	682b      	ldr	r3, [r5, #0]
 8008ad4:	b103      	cbz	r3, 8008ad8 <_fstat_r+0x1c>
 8008ad6:	6023      	str	r3, [r4, #0]
 8008ad8:	bd38      	pop	{r3, r4, r5, pc}
 8008ada:	bf00      	nop
 8008adc:	20004eb8 	.word	0x20004eb8

08008ae0 <_isatty_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4d06      	ldr	r5, [pc, #24]	@ (8008afc <_isatty_r+0x1c>)
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	4608      	mov	r0, r1
 8008aea:	602b      	str	r3, [r5, #0]
 8008aec:	f7f8 f92f 	bl	8000d4e <_isatty>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_isatty_r+0x1a>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_isatty_r+0x1a>
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	20004eb8 	.word	0x20004eb8

08008b00 <_lseek_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	4d07      	ldr	r5, [pc, #28]	@ (8008b20 <_lseek_r+0x20>)
 8008b04:	4604      	mov	r4, r0
 8008b06:	4608      	mov	r0, r1
 8008b08:	4611      	mov	r1, r2
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	602a      	str	r2, [r5, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	f7f8 f928 	bl	8000d64 <_lseek>
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	d102      	bne.n	8008b1e <_lseek_r+0x1e>
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	b103      	cbz	r3, 8008b1e <_lseek_r+0x1e>
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	20004eb8 	.word	0x20004eb8

08008b24 <_read_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	4d07      	ldr	r5, [pc, #28]	@ (8008b44 <_read_r+0x20>)
 8008b28:	4604      	mov	r4, r0
 8008b2a:	4608      	mov	r0, r1
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	2200      	movs	r2, #0
 8008b30:	602a      	str	r2, [r5, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	f7f8 f8b6 	bl	8000ca4 <_read>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d102      	bne.n	8008b42 <_read_r+0x1e>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	b103      	cbz	r3, 8008b42 <_read_r+0x1e>
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
 8008b44:	20004eb8 	.word	0x20004eb8

08008b48 <_sbrk_r>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	4d06      	ldr	r5, [pc, #24]	@ (8008b64 <_sbrk_r+0x1c>)
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	4604      	mov	r4, r0
 8008b50:	4608      	mov	r0, r1
 8008b52:	602b      	str	r3, [r5, #0]
 8008b54:	f7f8 f914 	bl	8000d80 <_sbrk>
 8008b58:	1c43      	adds	r3, r0, #1
 8008b5a:	d102      	bne.n	8008b62 <_sbrk_r+0x1a>
 8008b5c:	682b      	ldr	r3, [r5, #0]
 8008b5e:	b103      	cbz	r3, 8008b62 <_sbrk_r+0x1a>
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	bd38      	pop	{r3, r4, r5, pc}
 8008b64:	20004eb8 	.word	0x20004eb8

08008b68 <_write_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4d07      	ldr	r5, [pc, #28]	@ (8008b88 <_write_r+0x20>)
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	4608      	mov	r0, r1
 8008b70:	4611      	mov	r1, r2
 8008b72:	2200      	movs	r2, #0
 8008b74:	602a      	str	r2, [r5, #0]
 8008b76:	461a      	mov	r2, r3
 8008b78:	f7f8 f8b1 	bl	8000cde <_write>
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	d102      	bne.n	8008b86 <_write_r+0x1e>
 8008b80:	682b      	ldr	r3, [r5, #0]
 8008b82:	b103      	cbz	r3, 8008b86 <_write_r+0x1e>
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	bd38      	pop	{r3, r4, r5, pc}
 8008b88:	20004eb8 	.word	0x20004eb8

08008b8c <memcpy>:
 8008b8c:	440a      	add	r2, r1
 8008b8e:	4291      	cmp	r1, r2
 8008b90:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008b94:	d100      	bne.n	8008b98 <memcpy+0xc>
 8008b96:	4770      	bx	lr
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ba2:	4291      	cmp	r1, r2
 8008ba4:	d1f9      	bne.n	8008b9a <memcpy+0xe>
 8008ba6:	bd10      	pop	{r4, pc}

08008ba8 <_free_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	4605      	mov	r5, r0
 8008bac:	2900      	cmp	r1, #0
 8008bae:	d041      	beq.n	8008c34 <_free_r+0x8c>
 8008bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bb4:	1f0c      	subs	r4, r1, #4
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	bfb8      	it	lt
 8008bba:	18e4      	addlt	r4, r4, r3
 8008bbc:	f7ff fde0 	bl	8008780 <__malloc_lock>
 8008bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8008c38 <_free_r+0x90>)
 8008bc2:	6813      	ldr	r3, [r2, #0]
 8008bc4:	b933      	cbnz	r3, 8008bd4 <_free_r+0x2c>
 8008bc6:	6063      	str	r3, [r4, #4]
 8008bc8:	6014      	str	r4, [r2, #0]
 8008bca:	4628      	mov	r0, r5
 8008bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bd0:	f7ff bddc 	b.w	800878c <__malloc_unlock>
 8008bd4:	42a3      	cmp	r3, r4
 8008bd6:	d908      	bls.n	8008bea <_free_r+0x42>
 8008bd8:	6820      	ldr	r0, [r4, #0]
 8008bda:	1821      	adds	r1, r4, r0
 8008bdc:	428b      	cmp	r3, r1
 8008bde:	bf01      	itttt	eq
 8008be0:	6819      	ldreq	r1, [r3, #0]
 8008be2:	685b      	ldreq	r3, [r3, #4]
 8008be4:	1809      	addeq	r1, r1, r0
 8008be6:	6021      	streq	r1, [r4, #0]
 8008be8:	e7ed      	b.n	8008bc6 <_free_r+0x1e>
 8008bea:	461a      	mov	r2, r3
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	b10b      	cbz	r3, 8008bf4 <_free_r+0x4c>
 8008bf0:	42a3      	cmp	r3, r4
 8008bf2:	d9fa      	bls.n	8008bea <_free_r+0x42>
 8008bf4:	6811      	ldr	r1, [r2, #0]
 8008bf6:	1850      	adds	r0, r2, r1
 8008bf8:	42a0      	cmp	r0, r4
 8008bfa:	d10b      	bne.n	8008c14 <_free_r+0x6c>
 8008bfc:	6820      	ldr	r0, [r4, #0]
 8008bfe:	4401      	add	r1, r0
 8008c00:	1850      	adds	r0, r2, r1
 8008c02:	4283      	cmp	r3, r0
 8008c04:	6011      	str	r1, [r2, #0]
 8008c06:	d1e0      	bne.n	8008bca <_free_r+0x22>
 8008c08:	6818      	ldr	r0, [r3, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	6053      	str	r3, [r2, #4]
 8008c0e:	4408      	add	r0, r1
 8008c10:	6010      	str	r0, [r2, #0]
 8008c12:	e7da      	b.n	8008bca <_free_r+0x22>
 8008c14:	d902      	bls.n	8008c1c <_free_r+0x74>
 8008c16:	230c      	movs	r3, #12
 8008c18:	602b      	str	r3, [r5, #0]
 8008c1a:	e7d6      	b.n	8008bca <_free_r+0x22>
 8008c1c:	6820      	ldr	r0, [r4, #0]
 8008c1e:	1821      	adds	r1, r4, r0
 8008c20:	428b      	cmp	r3, r1
 8008c22:	bf04      	itt	eq
 8008c24:	6819      	ldreq	r1, [r3, #0]
 8008c26:	685b      	ldreq	r3, [r3, #4]
 8008c28:	6063      	str	r3, [r4, #4]
 8008c2a:	bf04      	itt	eq
 8008c2c:	1809      	addeq	r1, r1, r0
 8008c2e:	6021      	streq	r1, [r4, #0]
 8008c30:	6054      	str	r4, [r2, #4]
 8008c32:	e7ca      	b.n	8008bca <_free_r+0x22>
 8008c34:	bd38      	pop	{r3, r4, r5, pc}
 8008c36:	bf00      	nop
 8008c38:	20004eb4 	.word	0x20004eb4

08008c3c <_malloc_usable_size_r>:
 8008c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c40:	1f18      	subs	r0, r3, #4
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	bfbc      	itt	lt
 8008c46:	580b      	ldrlt	r3, [r1, r0]
 8008c48:	18c0      	addlt	r0, r0, r3
 8008c4a:	4770      	bx	lr

08008c4c <_init>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	bf00      	nop
 8008c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c52:	bc08      	pop	{r3}
 8008c54:	469e      	mov	lr, r3
 8008c56:	4770      	bx	lr

08008c58 <_fini>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	bf00      	nop
 8008c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5e:	bc08      	pop	{r3}
 8008c60:	469e      	mov	lr, r3
 8008c62:	4770      	bx	lr
